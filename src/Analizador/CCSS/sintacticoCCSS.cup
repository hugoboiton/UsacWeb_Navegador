package Analizador.CCSS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;
//parser ccss

parser code
{:
    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());
         
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
         
    }

:}
action code
{:
    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }

:}

terminal String ALINEADO , IZQUIERDA , DERECHA , CENTRADO , JUSTIFICADO;

terminal String TEXTO;

terminal String FORMATO , NEGRILLA , CURSIVA , MAYUSC , MININ , CAPITALT;

terminal String LETRA , TAMTEX , FONDOELEMTO , AUTOREDIMEN ,VERTICAL,HORIZONTAL, VISIBLE ,     
BORDE , OPAQUE , COLORTEXT , GRUPO , ID;

terminal String CORCHEIZQ , CORCHEDER , PARIZQ , PARDER , PUNTOCOMA , DOSPUNTOS , IGUAL,      
MAS , MENOS , POR , DIVI,COMA;

terminal String EVERDADERO , EFALSO , EID , ENUMERO , ECADENA;

nonterminal String inicio,cuerpo,bloqueccss;

nonterminal String  elemento,lelemento;

nonterminal String id ,grupo;

nonterminal String lpropiedades ,propiedad;

nonterminal String alineado, opalineado;

nonterminal String texto;

nonterminal String formato,lopfor, opfor;

nonterminal String letra,tamtex,fondoelemento;

nonterminal String autoredi , op1,op2;

nonterminal String visible,borde,opaque,colortext;

nonterminal String exp, val;

precedence left MAS,MENOS;
precedence left POR,DIVI;

start with inicio;

inicio ::= cuerpo
        {:
            System.out.println("Gramatica corecta");
        :};


cuerpo ::= cuerpo bloqueccss
	   | bloqueccss;

bloqueccss ::= EID CORCHEIZQ lelemento CORCHEDER;

lelemento ::= lelemento elemento
		  |elemento;

elemento ::=id 
         |grupo ;   

id  	::= ID PARIZQ EID PARDER PUNTOCOMA lpropiedades;

grupo   ::= GRUPO PARIZQ EID PARDER PUNTOCOMA lpropiedades;

lpropiedades ::= lpropiedades propiedad
             |propiedad; 

propiedad	 ::= alineado
			 |texto
			 |formato
			 |letra
			 |tamtex
			 |fondoelemento
			 |autoredi
			 |visible
			 |borde
			 |opaque
			 |colortext
             |error PUNTOCOMA;

alineado    ::= ALINEADO DOSPUNTOS IGUAL opalineado PUNTOCOMA;

opalineado  ::= JUSTIFICADO
			|CENTRADO
			|DERECHA
			|IZQUIERDA;

texto    ::= TEXTO DOSPUNTOS IGUAL exp PUNTOCOMA;

formato  ::= FORMATO DOSPUNTOS IGUAL lopfor PUNTOCOMA;

lopfor	::= lopfor COMA opfor
		|opfor;

opfor	::= NEGRILLA
		|CURSIVA
		|MAYUSC
		|MININ
		|CAPITALT;

letra   ::= LETRA DOSPUNTOS IGUAL exp PUNTOCOMA;

tamtex  ::= TAMTEX DOSPUNTOS IGUAL exp PUNTOCOMA;

fondoelemento ::= FONDOELEMTO DOSPUNTOS IGUAL exp PUNTOCOMA;

autoredi  ::= AUTOREDIMEN DOSPUNTOS IGUAL CORCHEIZQ op1 COMA op2 CORCHEDER PUNTOCOMA;

op1 ::= EVERDADERO
	|EFALSO;
 
op2 ::= VERTICAL
	|HORIZONTAL;

visible ::= VISIBLE DOSPUNTOS IGUAL op1 PUNTOCOMA;

borde   ::= BORDE DOSPUNTOS IGUAL CORCHEIZQ exp COMA exp COMA op1 CORCHEDER PUNTOCOMA; 		

opaque  ::= OPAQUE DOSPUNTOS IGUAL op1 PUNTOCOMA;

colortext ::= COLORTEXT DOSPUNTOS IGUAL exp PUNTOCOMA;	

exp ::= exp MAS exp
	|exp MENOS exp
	|exp POR exp
	|exp DIVI exp
	|val;

val ::= ENUMERO
    |ECADENA;
