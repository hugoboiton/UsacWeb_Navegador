
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 20 00:17:08 CST 2018
//----------------------------------------------------

package Analizador.CCSS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 20 00:17:08 CST 2018
  */
public class parserCCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCCSS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\006\004" +
    "\000\002\006\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\010\000\002\010\010\000\002\011\004\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\013\007\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\015\007\000\002\016\007" +
    "\000\002\017\005\000\002\017\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\007\000\002\022\007\000\002\023" +
    "\007\000\002\024\013\000\002\025\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\007\000" +
    "\002\030\015\000\002\031\007\000\002\032\007\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\003\000\002\034\003\000\002\034\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\052\007\001\002\000\006\002\000\052" +
    "\007\001\002\000\006\002\ufffe\052\ufffe\001\002\000\004" +
    "\002\206\001\002\000\004\034\010\001\002\000\006\032" +
    "\014\033\012\001\002\000\010\032\ufffb\033\ufffb\035\ufffb" +
    "\001\002\000\004\036\201\001\002\000\010\032\014\033" +
    "\012\035\200\001\002\000\004\036\017\001\002\000\010" +
    "\032\ufff9\033\ufff9\035\ufff9\001\002\000\010\032\ufffa\033" +
    "\ufffa\035\ufffa\001\002\000\004\052\020\001\002\000\004" +
    "\037\021\001\002\000\004\040\022\001\002\000\032\003" +
    "\047\004\045\011\046\012\037\020\026\021\051\022\040" +
    "\023\027\026\050\027\041\030\052\031\030\001\002\000" +
    "\040\003\uffea\004\uffea\011\uffea\012\uffea\020\uffea\021\uffea" +
    "\022\uffea\023\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\035\uffea\001\002\000\040\003\ufff3\004\ufff3" +
    "\011\ufff3\012\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3" +
    "\001\002\000\040\003\uffed\004\uffed\011\uffed\012\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\035\uffed\001\002\000\004\041" +
    "\173\001\002\000\004\041\161\001\002\000\004\041\155" +
    "\001\002\000\040\003\uffee\004\uffee\011\uffee\012\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\033\uffee\035\uffee\001\002\000\040\003" +
    "\ufff0\004\ufff0\011\ufff0\012\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\035\ufff0\001\002\000\040\003\uffeb\004\uffeb\011\uffeb" +
    "\012\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\001\002" +
    "\000\040\003\ufff2\004\ufff2\011\ufff2\012\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2" +
    "\032\ufff2\033\ufff2\035\ufff2\001\002\000\040\003\ufff5\004" +
    "\ufff5\011\ufff5\012\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\035" +
    "\ufff5\001\002\000\040\003\047\004\045\011\046\012\037" +
    "\020\026\021\051\022\040\023\027\026\050\027\041\030" +
    "\052\031\030\032\ufff7\033\ufff7\035\ufff7\001\002\000\004" +
    "\041\140\001\002\000\004\041\134\001\002\000\004\041" +
    "\122\001\002\000\040\003\ufff4\004\ufff4\011\ufff4\012\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\026\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\035\ufff4\001\002\000\040" +
    "\003\ufff1\004\ufff1\011\ufff1\012\ufff1\020\ufff1\021\ufff1\022" +
    "\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1" +
    "\033\ufff1\035\ufff1\001\002\000\040\003\uffef\004\uffef\011" +
    "\uffef\012\uffef\020\uffef\021\uffef\022\uffef\023\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\035\uffef\001" +
    "\002\000\004\041\112\001\002\000\004\041\106\001\002" +
    "\000\004\040\105\001\002\000\004\041\101\001\002\000" +
    "\004\041\062\001\002\000\004\041\054\001\002\000\040" +
    "\003\uffec\004\uffec\011\uffec\012\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\035\uffec\001\002\000\004\042\055\001\002\000" +
    "\006\050\060\051\056\001\002\000\010\035\uffd5\040\uffd5" +
    "\047\uffd5\001\002\000\004\040\061\001\002\000\010\035" +
    "\uffd6\040\uffd6\047\uffd6\001\002\000\040\003\uffd0\004\uffd0" +
    "\011\uffd0\012\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0" +
    "\001\002\000\004\042\063\001\002\000\006\053\064\054" +
    "\065\001\002\000\016\040\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\001\002\000\016\040\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\001\002\000\016\040\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\001\002\000" +
    "\014\040\074\043\070\044\071\045\072\046\073\001\002" +
    "\000\006\053\064\054\065\001\002\000\006\053\064\054" +
    "\065\001\002\000\006\053\064\054\065\001\002\000\006" +
    "\053\064\054\065\001\002\000\040\003\uffd9\004\uffd9\011" +
    "\uffd9\012\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\001" +
    "\002\000\016\040\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\001\002\000\016\040\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\001\002\000\016\040\uffcd\043\uffcd" +
    "\044\uffcd\045\072\046\073\047\uffcd\001\002\000\016\040" +
    "\uffce\043\uffce\044\uffce\045\072\046\073\047\uffce\001\002" +
    "\000\004\042\102\001\002\000\006\050\060\051\056\001" +
    "\002\000\004\040\104\001\002\000\040\003\uffd2\004\uffd2" +
    "\011\uffd2\012\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2" +
    "\001\002\000\040\003\uffe9\004\uffe9\011\uffe9\012\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\035\uffe9\001\002\000\004\042" +
    "\107\001\002\000\006\053\064\054\065\001\002\000\014" +
    "\040\111\043\070\044\071\045\072\046\073\001\002\000" +
    "\040\003\uffe3\004\uffe3\011\uffe3\012\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\035\uffe3\001\002\000\004\042\113\001\002" +
    "\000\012\005\116\006\114\007\117\010\115\001\002\000" +
    "\004\040\uffe5\001\002\000\004\040\uffe7\001\002\000\004" +
    "\040\uffe4\001\002\000\004\040\uffe6\001\002\000\004\040" +
    "\121\001\002\000\040\003\uffe8\004\uffe8\011\uffe8\012\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8\027\uffe8\030" +
    "\uffe8\031\uffe8\032\uffe8\033\uffe8\035\uffe8\001\002\000\004" +
    "\042\123\001\002\000\004\034\124\001\002\000\006\053" +
    "\064\054\065\001\002\000\014\043\070\044\071\045\072" +
    "\046\073\047\126\001\002\000\006\053\064\054\065\001" +
    "\002\000\014\043\070\044\071\045\072\046\073\047\130" +
    "\001\002\000\006\050\060\051\056\001\002\000\004\035" +
    "\132\001\002\000\004\040\133\001\002\000\040\003\uffd1" +
    "\004\uffd1\011\uffd1\012\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\035\uffd1\001\002\000\004\042\135\001\002\000\006\053" +
    "\064\054\065\001\002\000\014\040\137\043\070\044\071" +
    "\045\072\046\073\001\002\000\040\003\uffd8\004\uffd8\011" +
    "\uffd8\012\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\035\uffd8\001" +
    "\002\000\004\042\141\001\002\000\014\013\145\014\147" +
    "\015\143\016\150\017\146\001\002\000\006\040\152\047" +
    "\151\001\002\000\006\040\uffdd\047\uffdd\001\002\000\006" +
    "\040\uffe0\047\uffe0\001\002\000\006\040\uffdf\047\uffdf\001" +
    "\002\000\006\040\uffdb\047\uffdb\001\002\000\006\040\uffde" +
    "\047\uffde\001\002\000\006\040\uffdc\047\uffdc\001\002\000" +
    "\014\013\145\014\147\015\143\016\150\017\146\001\002" +
    "\000\040\003\uffe2\004\uffe2\011\uffe2\012\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\035\uffe2\001\002\000\006\040\uffe1\047" +
    "\uffe1\001\002\000\040\003\ufff6\004\ufff6\011\ufff6\012\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\001\002\000\004" +
    "\042\156\001\002\000\006\053\064\054\065\001\002\000" +
    "\014\040\160\043\070\044\071\045\072\046\073\001\002" +
    "\000\040\003\uffcf\004\uffcf\011\uffcf\012\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\035\uffcf\001\002\000\004\042\162\001" +
    "\002\000\004\034\163\001\002\000\006\050\060\051\056" +
    "\001\002\000\004\047\165\001\002\000\006\024\170\025" +
    "\166\001\002\000\004\035\uffd3\001\002\000\004\035\171" +
    "\001\002\000\004\035\uffd4\001\002\000\004\040\172\001" +
    "\002\000\040\003\uffd7\004\uffd7\011\uffd7\012\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\026\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\035\uffd7\001\002\000\004\042\174" +
    "\001\002\000\006\053\064\054\065\001\002\000\014\040" +
    "\176\043\070\044\071\045\072\046\073\001\002\000\040" +
    "\003\uffda\004\uffda\011\uffda\012\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\035\uffda\001\002\000\010\032\ufffc\033\ufffc\035" +
    "\ufffc\001\002\000\006\002\ufffd\052\ufffd\001\002\000\004" +
    "\052\202\001\002\000\004\037\203\001\002\000\004\040" +
    "\204\001\002\000\032\003\047\004\045\011\046\012\037" +
    "\020\026\021\051\022\040\023\027\026\050\027\041\030" +
    "\052\031\030\001\002\000\040\003\047\004\045\011\046" +
    "\012\037\020\026\021\051\022\040\023\027\026\050\027" +
    "\041\030\052\031\030\032\ufff8\033\ufff8\035\ufff8\001\002" +
    "\000\004\002\001\001\002\000\006\002\uffff\052\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\010\002\005\003\003\004\004\001\001\000" +
    "\004\004\206\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\010\006\012\007\015\010" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\176\007\015\010\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\011\035\012\034\013" +
    "\041\015\023\016\033\021\042\022\031\023\043\024\030" +
    "\027\024\030\052\031\032\032\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\012\153\013\041\015\023\016\033\021" +
    "\042\022\031\023\043\024\030\027\024\030\052\031\032" +
    "\032\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\066\034" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\077\034\065\001" +
    "\001\000\006\033\076\034\065\001\001\000\006\033\075" +
    "\034\065\001\001\000\006\033\074\034\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\107\034\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\124\034\065\001\001\000\002\001\001\000\006" +
    "\033\126\034\065\001\001\000\002\001\001\000\004\025" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\135\034\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\141\020\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\156\034\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\163\001\001\000\002\001" +
    "\001\000\004\026\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\174\034\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\204\012\034\013\041\015\023\016" +
    "\033\021\042\022\031\023\043\024\030\027\024\030\052" +
    "\031\032\032\022\001\001\000\032\012\153\013\041\015" +
    "\023\016\033\021\042\022\031\023\043\024\030\027\024" +
    "\030\052\031\032\032\022\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());
         
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
         
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCCSS$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }


  private final parserCCSS parser;

  /** Constructor */
  CUP$parserCCSS$actions(parserCCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCCSS$do_action(
    int                        CUP$parserCCSS$act_num,
    java_cup.runtime.lr_parser CUP$parserCCSS$parser,
    java.util.Stack            CUP$parserCCSS$stack,
    int                        CUP$parserCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCCSS$result;

      /* select the action based on the action number */
      switch (CUP$parserCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // val ::= ECADENA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("val",26, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // val ::= ENUMERO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("val",26, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= val 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp DIVI exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp POR exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp MENOS exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp MAS exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // colortext ::= COLORTEXT DOSPUNTOS IGUAL exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("colortext",24, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opaque ::= OPAQUE DOSPUNTOS IGUAL op1 PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opaque",23, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // borde ::= BORDE DOSPUNTOS IGUAL CORCHEIZQ exp COMA exp COMA op1 CORCHEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("borde",22, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // visible ::= VISIBLE DOSPUNTOS IGUAL op1 PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("visible",21, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op2 ::= HORIZONTAL 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op2",20, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op2 ::= VERTICAL 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op2",20, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op1 ::= EFALSO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op1 ::= EVERDADERO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // autoredi ::= AUTOREDIMEN DOSPUNTOS IGUAL CORCHEIZQ op1 COMA op2 CORCHEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("autoredi",18, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-8)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // fondoelemento ::= FONDOELEMTO DOSPUNTOS IGUAL exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("fondoelemento",17, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tamtex ::= TAMTEX DOSPUNTOS IGUAL exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("tamtex",16, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // letra ::= LETRA DOSPUNTOS IGUAL exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("letra",15, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opfor ::= CAPITALT 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // opfor ::= MININ 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opfor ::= MAYUSC 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opfor ::= CURSIVA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opfor ::= NEGRILLA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lopfor ::= opfor 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lopfor",13, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lopfor ::= lopfor COMA opfor 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lopfor",13, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // formato ::= FORMATO DOSPUNTOS IGUAL lopfor PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("formato",12, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // texto ::= TEXTO DOSPUNTOS IGUAL exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("texto",11, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // opalineado ::= IZQUIERDA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // opalineado ::= DERECHA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opalineado ::= CENTRADO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opalineado ::= JUSTIFICADO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // alineado ::= ALINEADO DOSPUNTOS IGUAL opalineado PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("alineado",9, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // propiedad ::= error PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propiedad ::= colortext 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propiedad ::= opaque 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propiedad ::= borde 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // propiedad ::= visible 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propiedad ::= autoredi 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // propiedad ::= fondoelemento 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // propiedad ::= tamtex 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // propiedad ::= letra 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // propiedad ::= formato 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // propiedad ::= texto 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // propiedad ::= alineado 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lpropiedades ::= propiedad 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lpropiedades",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lpropiedades ::= lpropiedades propiedad 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lpropiedades",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // grupo ::= GRUPO PARIZQ EID PARDER PUNTOCOMA lpropiedades 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("grupo",6, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id ::= ID PARIZQ EID PARDER PUNTOCOMA lpropiedades 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elemento ::= grupo 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("elemento",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= id 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("elemento",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lelemento ::= elemento 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lelemento",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lelemento ::= lelemento elemento 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lelemento",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueccss ::= EID CORCHEIZQ lelemento CORCHEDER 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("bloqueccss",2, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= bloqueccss 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= cuerpo bloqueccss 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo 
            {
              String RESULT =null;
		
            System.out.println("Gramatica corecta");
        
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		RESULT = start_val;
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCCSS$parser.done_parsing();
          return CUP$parserCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

