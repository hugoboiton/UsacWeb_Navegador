
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 17 21:33:57 CST 2018
//----------------------------------------------------

package Analizador.CCSS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 17 21:33:57 CST 2018
  */
public class parserCCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCCSS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\006\004" +
    "\000\002\006\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\010\000\002\010\010\000\002\011\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\013\007\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\007\000\002\016\007\000\002\017\005\000\002\017\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\021\007\000\002" +
    "\022\007\000\002\023\007\000\002\024\013\000\002\025" +
    "\003\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\007\000\002\030\015\000\002\031\007\000" +
    "\002\032\007\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\003\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\052\007\001\002\000\006\002\000\052" +
    "\007\001\002\000\006\002\ufffe\052\ufffe\001\002\000\004" +
    "\002\203\001\002\000\004\034\010\001\002\000\006\032" +
    "\014\033\012\001\002\000\010\032\ufffb\033\ufffb\035\ufffb" +
    "\001\002\000\004\036\176\001\002\000\010\032\014\033" +
    "\012\035\175\001\002\000\004\036\017\001\002\000\010" +
    "\032\ufff9\033\ufff9\035\ufff9\001\002\000\010\032\ufffa\033" +
    "\ufffa\035\ufffa\001\002\000\004\052\020\001\002\000\004" +
    "\037\021\001\002\000\004\040\022\001\002\000\002\001" +
    "\002\000\036\004\045\011\046\012\040\020\027\021\050" +
    "\022\037\023\030\026\047\027\041\030\051\031\031\032" +
    "\ufff7\033\ufff7\035\ufff7\001\002\000\036\004\uffeb\011\uffeb" +
    "\012\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\035\uffeb\001\002" +
    "\000\036\004\ufff4\011\ufff4\012\ufff4\020\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\035\ufff4\001\002\000\036\004\uffee\011\uffee\012" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\033\uffee\035\uffee\001\002\000" +
    "\004\041\170\001\002\000\004\041\156\001\002\000\004" +
    "\041\152\001\002\000\036\004\uffef\011\uffef\012\uffef\020" +
    "\uffef\021\uffef\022\uffef\023\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\035\uffef\001\002\000\036\004" +
    "\ufff1\011\ufff1\012\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\035" +
    "\ufff1\001\002\000\036\004\uffec\011\uffec\012\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\035\uffec\001\002\000\036\004\ufff3" +
    "\011\ufff3\012\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3" +
    "\001\002\000\036\004\ufff6\011\ufff6\012\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\035\ufff6\001\002\000\004\041\146\001" +
    "\002\000\004\041\132\001\002\000\004\041\120\001\002" +
    "\000\036\004\ufff5\011\ufff5\012\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5" +
    "\033\ufff5\035\ufff5\001\002\000\036\004\ufff2\011\ufff2\012" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\035\ufff2\001\002\000" +
    "\036\004\ufff0\011\ufff0\012\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\035\ufff0\001\002\000\004\041\110\001\002\000\004" +
    "\041\104\001\002\000\004\041\100\001\002\000\004\041" +
    "\061\001\002\000\004\041\053\001\002\000\036\004\uffed" +
    "\011\uffed\012\uffed\020\uffed\021\uffed\022\uffed\023\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\035\uffed" +
    "\001\002\000\004\042\054\001\002\000\006\050\057\051" +
    "\055\001\002\000\012\035\uffd7\040\uffd7\041\uffd7\047\uffd7" +
    "\001\002\000\004\040\060\001\002\000\012\035\uffd8\040" +
    "\uffd8\041\uffd8\047\uffd8\001\002\000\036\004\uffd2\011\uffd2" +
    "\012\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\001\002" +
    "\000\004\042\062\001\002\000\006\053\063\054\064\001" +
    "\002\000\016\040\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\001\002\000\016\040\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\001\002\000\016\040\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\001\002\000\014\040" +
    "\073\043\067\044\070\045\071\046\072\001\002\000\006" +
    "\053\063\054\064\001\002\000\006\053\063\054\064\001" +
    "\002\000\006\053\063\054\064\001\002\000\006\053\063" +
    "\054\064\001\002\000\036\004\uffdb\011\uffdb\012\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\035\uffdb\001\002\000\016\040" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002" +
    "\000\016\040\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\001\002\000\016\040\uffcf\043\uffcf\044\uffcf\045\071" +
    "\046\072\047\uffcf\001\002\000\016\040\uffd0\043\uffd0\044" +
    "\uffd0\045\071\046\072\047\uffd0\001\002\000\004\042\101" +
    "\001\002\000\006\050\057\051\055\001\002\000\004\041" +
    "\103\001\002\000\036\004\uffd4\011\uffd4\012\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\035\uffd4\001\002\000\004\042\105" +
    "\001\002\000\006\053\063\054\064\001\002\000\014\040" +
    "\107\043\067\044\070\045\071\046\072\001\002\000\036" +
    "\004\uffe5\011\uffe5\012\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\001\002\000\004\042\111\001\002\000\012\005" +
    "\114\006\112\007\115\010\113\001\002\000\004\040\uffe7" +
    "\001\002\000\004\040\uffe9\001\002\000\004\040\uffe6\001" +
    "\002\000\004\040\uffe8\001\002\000\004\040\117\001\002" +
    "\000\036\004\uffea\011\uffea\012\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea" +
    "\033\uffea\035\uffea\001\002\000\004\042\121\001\002\000" +
    "\004\034\122\001\002\000\006\053\063\054\064\001\002" +
    "\000\014\043\067\044\070\045\071\046\072\047\124\001" +
    "\002\000\004\054\125\001\002\000\004\047\126\001\002" +
    "\000\006\050\057\051\055\001\002\000\004\035\130\001" +
    "\002\000\004\040\131\001\002\000\036\004\uffd3\011\uffd3" +
    "\012\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\035\uffd3\001\002" +
    "\000\004\042\133\001\002\000\014\013\140\014\141\015" +
    "\135\016\142\017\136\001\002\000\006\040\144\047\143" +
    "\001\002\000\006\040\uffdf\047\uffdf\001\002\000\006\040" +
    "\uffdd\047\uffdd\001\002\000\006\040\uffe2\047\uffe2\001\002" +
    "\000\006\040\uffe1\047\uffe1\001\002\000\006\040\uffe0\047" +
    "\uffe0\001\002\000\006\040\uffde\047\uffde\001\002\000\014" +
    "\013\140\014\141\015\135\016\142\017\136\001\002\000" +
    "\036\004\uffe4\011\uffe4\012\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\035\uffe4\001\002\000\006\040\uffe3\047\uffe3\001\002" +
    "\000\004\042\147\001\002\000\004\054\150\001\002\000" +
    "\004\040\151\001\002\000\036\004\uffda\011\uffda\012\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\035\uffda\001\002\000\004" +
    "\042\153\001\002\000\004\054\154\001\002\000\004\040" +
    "\155\001\002\000\036\004\uffd1\011\uffd1\012\uffd1\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\035\uffd1\001\002\000\004\042\157" +
    "\001\002\000\004\034\160\001\002\000\006\050\057\051" +
    "\055\001\002\000\004\047\162\001\002\000\006\024\165" +
    "\025\163\001\002\000\004\035\uffd5\001\002\000\004\035" +
    "\166\001\002\000\004\035\uffd6\001\002\000\004\040\167" +
    "\001\002\000\036\004\uffd9\011\uffd9\012\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\023\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\035\uffd9\001\002\000\004\042\171\001" +
    "\002\000\004\054\172\001\002\000\004\040\173\001\002" +
    "\000\036\004\uffdc\011\uffdc\012\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\035\uffdc\001\002\000\010\032\ufffc\033\ufffc\035" +
    "\ufffc\001\002\000\006\002\ufffd\052\ufffd\001\002\000\004" +
    "\052\177\001\002\000\004\037\200\001\002\000\004\040" +
    "\201\001\002\000\002\001\002\000\036\004\045\011\046" +
    "\012\040\020\027\021\050\022\037\023\030\026\047\027" +
    "\041\030\051\031\031\032\ufff8\033\ufff8\035\ufff8\001\002" +
    "\000\004\002\001\001\002\000\006\002\uffff\052\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\010\002\005\003\003\004\004\001\001\000" +
    "\004\004\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\010\006\012\007\015\010" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\173\007\015\010\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\022\001\001\000" +
    "\032\012\035\013\041\015\024\016\034\021\042\022\032" +
    "\023\043\024\031\027\025\030\051\031\033\032\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\065\034\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\076\034\064\001\001\000" +
    "\006\033\075\034\064\001\001\000\006\033\074\034\064" +
    "\001\001\000\006\033\073\034\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\105\034\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\122\034\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\133" +
    "\020\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\160\001" +
    "\001\000\002\001\001\000\004\026\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\201\001\001\000\032\012\035\013" +
    "\041\015\024\016\034\021\042\022\032\023\043\024\031" +
    "\027\025\030\051\031\033\032\023\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());
         errorSin=errorSin+"Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "+s.value + " no reconocido."+"\n";
         System.err.println("Error de Sintaxis---a");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());   
         System.err.println("Error de Sintaxis----b");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCCSS$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }


  private final parserCCSS parser;

  /** Constructor */
  CUP$parserCCSS$actions(parserCCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCCSS$do_action(
    int                        CUP$parserCCSS$act_num,
    java_cup.runtime.lr_parser CUP$parserCCSS$parser,
    java.util.Stack            CUP$parserCCSS$stack,
    int                        CUP$parserCCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCCSS$result;

      /* select the action based on the action number */
      switch (CUP$parserCCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // val ::= ECADENA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("val",26, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // val ::= ENUMERO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("val",26, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= val 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp DIVI exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp POR exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp MENOS exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp MAS exp 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("exp",25, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // colortext ::= COLORTEXT DOSPUNTOS IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("colortext",24, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opaque ::= OPAQUE DOSPUNTOS IGUAL op1 PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opaque",23, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // borde ::= BORDE DOSPUNTOS IGUAL CORCHEIZQ exp COMA ECADENA COMA op1 CORCHEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("borde",22, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // visible ::= VISIBLE DOSPUNTOS IGUAL op1 DOSPUNTOS 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("visible",21, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op2 ::= HORIZONTAL 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op2",20, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op2 ::= VERTICAL 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op2",20, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op1 ::= EFALSO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op1 ::= EVERDADERO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("op1",19, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // autoredi ::= AUTOREDIMEN DOSPUNTOS IGUAL CORCHEIZQ op1 COMA op2 CORCHEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("autoredi",18, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-8)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // fondoelemento ::= FONDOELEMTO DOSPUNTOS IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("fondoelemento",17, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tamtex ::= TAMTEX DOSPUNTOS IGUAL exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("tamtex",16, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // letra ::= LETRA DOSPUNTOS IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("letra",15, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opfor ::= CAPITALT 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opfor ::= MININ 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // opfor ::= MAYUSC 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // opfor ::= CURSIVA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // opfor ::= NEGRILLA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opfor",14, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lopfor ::= opfor 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lopfor",13, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lopfor ::= lopfor COMA opfor 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lopfor",13, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // formato ::= FORMATO DOSPUNTOS IGUAL lopfor PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("formato",12, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // texto ::= TEXTO DOSPUNTOS IGUAL exp PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("texto",11, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opalineado ::= IZQUIERDA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opalineado ::= DERECHA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // opalineado ::= CENTRADO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // opalineado ::= JUSTIFICADO 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("opalineado",10, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // alineado ::= ALINEADO DOSPUNTOS IGUAL opalineado PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("alineado",9, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // propiedad ::= colortext 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // propiedad ::= opaque 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // propiedad ::= borde 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propiedad ::= visible 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // propiedad ::= autoredi 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // propiedad ::= fondoelemento 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // propiedad ::= tamtex 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // propiedad ::= letra 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // propiedad ::= formato 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // propiedad ::= texto 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // propiedad ::= alineado 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("propiedad",8, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lpropiedades ::= lpropiedades propiedad 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lpropiedades",7, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // grupo ::= GRUPO PARIZQ EID PARDER PUNTOCOMA lpropiedades 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("grupo",6, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // id ::= ID PARIZQ EID PARDER PUNTOCOMA lpropiedades 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elemento ::= grupo 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("elemento",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= id 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("elemento",3, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lelemento ::= elemento 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lelemento",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lelemento ::= lelemento elemento 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("lelemento",4, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloqueccss ::= EID CORCHEIZQ lelemento CORCHEDER 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("bloqueccss",2, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cuerpo ::= bloqueccss 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cuerpo ::= cuerpo bloqueccss 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("cuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= cuerpo 
            {
              String RESULT =null;

              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          return CUP$parserCCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)).value;
		RESULT = start_val;
              CUP$parserCCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.elementAt(CUP$parserCCSS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCCSS$parser.done_parsing();
          return CUP$parserCCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

