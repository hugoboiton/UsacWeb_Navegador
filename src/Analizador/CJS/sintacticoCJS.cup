package Analizador.CJS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;
//parser ccss

parser code
{:
    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
        
    }

:}
action code
{:
    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }

:}

terminal String DIMV , ATEXTO,CONTEO;

terminal String SI , SINO , SELECCIONA , CASO,DEFECTO;    

terminal String PARA , MIENTRAS , DETENER ;     

terminal String IMPRIMIR , FUNCION , RETORNAR ,MENSAJE ,
 DOCUMETO , OBSERVADOR , OBTENER , SETELEMENTO;

terminal String MAS , MENOS , DIVI , POR ,        
MOD , POT , AUMENTO , DECREMENTO;   

terminal String IGUALIGUAL , DIFERENTE , MENOR ,      
MAYOR , MENORIGUAL , MAYOTIGUAL;  

terminal String AND , OR , NOT;   

terminal String DOSPUNTOS , PUNTOCOMA , COMA , 
PARIZQ , PARDER , LLAVEIZQ , LLAVEDER , PUNTO , EVERDARERO , EFALSO;       

terminal String EID , ENUMERO , ECADENA ,EDATE , EDATETIME;   

nonterminal String inicio,lcuerpo,cuerpo;

nonterminal String declararvar,asignarvar;

nonterminal String declararvec,asignarvec,lvalores;
nonterminal String funcionesVector;

nonterminal String si;

nonterminal String seleccionar ,lcaso ,caso ,defecto;

nonterminal String para,para0,para1;

nonterminal String mientras;

nonterminal String detener;

nonterminal String imprimir;

nonterminal String mensaje;

nonterminal String retorno;

nonterminal String llamdaFunciones;

nonterminal String funciones ,lparametros;

nonterminal String lsen,sent;

nonterminal String logica ,relacional,op,exp,valor;

nonterminal String eventos , listaEventos,evento;

nonterminal String obtener,observador,obs0,setelem;

nonterminal String valorchtml;

precedence left OR;
precedence left AND;
precedence right NOT;

precedence left MAS,MENOS;
precedence left POR,DIVI,MOD;
precedence right POT;
precedence right AUMENTO,DECREMENTO;

precedence nonassoc PARIZQ,PARDER;

start with inicio;

inicio  ::= lcuerpo 
        {:
            System.out.println("Gramatica corecta");
        :};

lcuerpo  ::= lcuerpo cuerpo
         |cuerpo;

cuerpo   ::=  declararvar PUNTOCOMA
         |declararvec
         |llamdaFunciones PUNTOCOMA
         |funciones
         |imprimir
         |mensaje
         |valorchtml PUNTOCOMA
         |eventos PUNTOCOMA;


funciones ::= FUNCION EID PARIZQ  PARDER LLAVEIZQ lsen LLAVEDER
          |FUNCION EID PARIZQ lparametros PARDER LLAVEIZQ lsen LLAVEDER;

lparametros ::= lparametros COMA EID
        |EID; 

declararvar ::= DIMV EID  DOSPUNTOS logica 
           |DIMV EID ;
asignarvar ::= EID DOSPUNTOS logica;

declararvec ::= DIMV EID LLAVEIZQ logica LLAVEDER PUNTOCOMA
            |DIMV EID DOSPUNTOS LLAVEIZQ lvalores LLAVEDER PUNTOCOMA
            |DIMV EID LLAVEIZQ logica LLAVEDER DOSPUNTOS LLAVEIZQ lvalores LLAVEDER PUNTOCOMA;

lvalores   ::= lvalores COMA logica
           |logica;

asignarvec ::= EID LLAVEIZQ logica LLAVEDER DOSPUNTOS logica PUNTOCOMA
           |EID DOSPUNTOS LLAVEIZQ lvalores LLAVEDER PUNTOCOMA;


funcionesVector ::= EID PUNTO CONTEO
                |EID PUNTO ATEXTO PARIZQ PARDER
                |EID LLAVEIZQ logica LLAVEDER;

lsen    ::= lsen sent
        |sent;

sent     ::= declararvar PUNTOCOMA
        |asignarvar PUNTOCOMA
        |declararvec
        |asignarvec
        |si
        |seleccionar
        |para
        |mientras
        |detener
        |imprimir
        |mensaje
        |retorno
        |llamdaFunciones PUNTOCOMA
        |eventos PUNTOCOMA
        |valorchtml PUNTOCOMA
        |error PUNTOCOMA;

si      ::= SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER
        |SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER SINO LLAVEIZQ lsen LLAVEDER;

seleccionar ::= SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso LLAVEDER  
            |SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso defecto LLAVEDER;

lcaso       ::= lcaso caso
            |caso;

caso  ::= CASO logica DOSPUNTOS lsen;

defecto ::= DEFECTO DOSPUNTOS lsen;

para   ::= PARA PARIZQ para0 PUNTOCOMA logica PUNTOCOMA para1 PARDER LLAVEIZQ lsen LLAVEDER;

para0 ::= declararvar
        |asignarvar;

para1 ::= AUMENTO
      |DECREMENTO;

mientras ::= MIENTRAS PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER;

detener  ::= DETENER PUNTOCOMA;

retorno  ::= RETORNAR logica PUNTOCOMA;

imprimir  ::= IMPRIMIR PARIZQ logica PARDER PUNTOCOMA;

mensaje  ::= MENSAJE PARIZQ logica PARDER PUNTOCOMA;

llamdaFunciones ::= EID PARIZQ PARDER
                |EID PARIZQ lvalores PARDER;

logica  ::= logica OR logica
        |logica AND logica
        |NOT logica
        |PARIZQ logica PARDER
        |relacional;

relacional  ::= relacional op exp
            |exp;

op ::= IGUALIGUAL
   |DIFERENTE
   |MENOR
   |MENORIGUAL
   |MAYOR
   |MAYOTIGUAL;

exp ::= exp MAS exp
    |exp MENOS exp
    |exp POR exp
    |exp DIVI exp
    |exp MOD exp
    |exp POT exp
    |exp AUMENTO
    |exp DECREMENTO
    |PARIZQ exp PARDER
    |valor;

valor ::= EVERDARERO
      |EFALSO 
      |ECADENA
      |ENUMERO
      |EDATETIME
      |EDATE
      |EID
      |funcionesVector
      |llamdaFunciones
      |eventos
      |valorchtml;


eventos ::= DOCUMETO PUNTO listaEventos;

listaEventos ::=listaEventos PUNTO evento
             |evento;

evento ::= obtener
       |observador
       |setelem;

obtener ::= OBTENER PARIZQ logica PARDER;

observador ::= OBSERVADOR PARIZQ logica COMA obs0 PARDER;

obs0 ::= llamdaFunciones
     |funciones;

setelem ::=SETELEMENTO PARIZQ logica COMA logica PARDER;

valorchtml  ::= EID PUNTO listaEventos;
