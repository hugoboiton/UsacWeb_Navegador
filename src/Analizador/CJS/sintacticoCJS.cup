package Analizador.CJS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;
//parser ccss

parser code
{:
    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
        
    }

:}
action code
{:
    // acciones que podemos hacer en le codigo
    NodoArbol raiz;
    NodoArbol padre,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,0,0);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }
    private String QuitarComillas(String cadena)
    {
        cadena=cadena.replace('\"', ' ');
        return cadena.trim();
    }
    private String QuitarComillasimple(String cadena)
    {
        cadena=cadena.replace('\'', ' ');
        return cadena.trim();
    }

:}

terminal String DIMV , ATEXTO,CONTEO;

terminal String SI , SINO , SELECCIONA , CASO,DEFECTO;    

terminal String PARA , MIENTRAS , DETENER ;     

terminal String IMPRIMIR , FUNCION , RETORNAR ,MENSAJE ,
 DOCUMETO , OBSERVADOR , OBTENER , SETELEMENTO;

terminal String MAS , MENOS , DIVI , POR ,        
MOD , POT , AUMENTO , DECREMENTO;   

terminal String IGUALIGUAL , DIFERENTE , MENOR ,      
MAYOR , MENORIGUAL , MAYOTIGUAL;  

terminal String AND , OR , NOT;   

terminal String DOSPUNTOS , PUNTOCOMA , COMA , 
PARIZQ , PARDER , LLAVEIZQ , LLAVEDER , PUNTO , EVERDARERO , EFALSO;       

terminal String EID , ENUMERO , ECADENA ,EDATE , EDATETIME;   

nonterminal NodoArbol inicio,lcuerpo,cuerpo;

nonterminal NodoArbol declararvar,asignarvar;

nonterminal NodoArbol declararvec,asignarvec,valores;
nonterminal NodoArbol funcionesVector;

nonterminal NodoArbol si;

nonterminal NodoArbol seleccionar ,lcaso ,caso ,defecto;

nonterminal NodoArbol para,para0,para1;

nonterminal NodoArbol mientras;

nonterminal NodoArbol detener;

nonterminal NodoArbol imprimir;

nonterminal NodoArbol mensaje;

nonterminal NodoArbol retorno;

nonterminal NodoArbol llamdaFunciones;

nonterminal NodoArbol funciones ,parametros;

nonterminal NodoArbol lsen,sent;

nonterminal NodoArbol logica ,relacional,op,exp,valor;

nonterminal NodoArbol documento ,evento;

nonterminal NodoArbol obtener,observador,obs0,setelem;

nonterminal NodoArbol valorchtml;



precedence left OR;
precedence left AND;
precedence right NOT;

precedence left MAS,MENOS;
precedence left POR,DIVI,MOD;
precedence right POT;
precedence right AUMENTO,DECREMENTO;

precedence nonassoc PARIZQ,PARDER;

start with inicio;

inicio  ::= lcuerpo:c
        {:
            System.out.println("Gramatica corecta");
            raiz=c;
            RESULT=raiz;
        :};

lcuerpo  ::= lcuerpo:l cuerpo:c
         {:
            l=AddHijo(l,c);
            RESULT=l;            
          :}
         |cuerpo:c
         {:
            padre=CrearHoja(ConstantesCJS.cuerpo,"");
            padre=AddHijo(padre,c);
            RESULT=padre;
          :};

cuerpo   ::=  declararvar:nodo PUNTOCOMA{:RESULT=nodo;:}
         |asignarvar:nodo PUNTOCOMA{:RESULT=nodo;:}
         |declararvec:nodo{:RESULT=nodo;:}
         |asignarvec:nodo{:RESULT=nodo;:}
         |llamdaFunciones:nodo PUNTOCOMA{:RESULT=nodo;:}
         |funciones:nodo{:RESULT=nodo;:}
         |imprimir:nodo{:RESULT=nodo;:}
         |mensaje:nodo{:RESULT=nodo;:}
         |documento:nodo PUNTOCOMA{:RESULT=nodo;:}
         |valorchtml:nodo{:RESULT = nodo;:}
         |error PUNTOCOMA{:RESULT=CrearHoja(ConstantesCJS.error,"");:};


funciones ::= FUNCION EID:text PARIZQ  PARDER LLAVEIZQ lsen:sen LLAVEDER
          {:
            padre=CrearHoja(ConstantesCJS.funcion,text);
            padre=AddHijo(padre,CrearHoja(ConstantesCJS.parametros,""));
            padre=AddHijo(padre,sen);
            RESULT=padre;

          :}
          |FUNCION EID:text PARIZQ parametros:pa PARDER LLAVEIZQ lsen:sen LLAVEDER 
          {:
            padre=CrearHoja(ConstantesCJS.funcion,text);
            padre=AddHijo(padre,pa);
            padre=AddHijo(padre,sen);
            RESULT=padre;

          :};

parametros ::= parametros:p COMA EID:eid
        {:
            p=AddHijo(p,CrearHoja(ConstantesCJS.eid,eid));
            RESULT=p;
        :}
        |EID:eid
        {:
            padre=CrearHoja(ConstantesCJS.parametros,"");
            padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
            RESULT=padre;
        :}; 


declararvar ::= DIMV EID:eid  DOSPUNTOS logica:l
            {:
                padre=CrearHoja(ConstantesCJS.declararvar,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                RESULT=padre;
            :} 
           |DIMV EID:eid 
           {:
              padre=CrearHoja(ConstantesCJS.declararvar,"");
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.logica,""));
              RESULT=padre;
            :};


asignarvar ::= EID:eid DOSPUNTOS logica:l
           {:
              padre=CrearHoja(ConstantesCJS.asignarvar,"");
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
              padre=AddHijo(padre,l);
              RESULT=padre;
          :};
          

declararvec ::= DIMV EID:eid LLAVEIZQ logica:l LLAVEDER PUNTOCOMA
            {:
                padre=CrearHoja(ConstantesCJS.declararvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                RESULT=padre;
            :}
            |DIMV EID:eid DOSPUNTOS LLAVEIZQ valores:v LLAVEDER PUNTOCOMA
            {:
                padre=CrearHoja(ConstantesCJS.declararvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,v);
                RESULT=padre;  

            :}
            |DIMV EID:eid LLAVEIZQ logica:l LLAVEDER DOSPUNTOS LLAVEIZQ valores:v LLAVEDER PUNTOCOMA
            {:
                padre=CrearHoja(ConstantesCJS.declararvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,v);
                RESULT=padre;
            :};

valores   ::= valores:v COMA logica:l
          {:
              v=AddHijo(v,l);
              RESULT=v;
          :}
           |logica:l
           {:
              padre=CrearHoja(ConstantesCJS.valores,"");
              padre=AddHijo(padre,l);
              RESULT=padre;
            :};

asignarvec ::= EID:eid LLAVEIZQ logica:l LLAVEDER DOSPUNTOS logica:l1 PUNTOCOMA
            {:
                padre=CrearHoja(ConstantesCJS.asignarvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,l1);
                RESULT=padre;
            :}
           |EID:eid DOSPUNTOS LLAVEIZQ valores:v LLAVEDER PUNTOCOMA
           {:
              padre=CrearHoja(ConstantesCJS.asignarvar,"");
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
              padre=AddHijo(padre,v);
              RESULT=padre;
            :};


funcionesVector ::= EID:eid PUNTO CONTEO
                {:
                    RESULT=CrearHoja(ConstantesCJS.conteov,eid);
                :}
                |EID:eid PUNTO ATEXTO PARIZQ PARDER
                {:
                    RESULT=CrearHoja(ConstantesCJS.atextov,eid);
                :}
                |EID:eid LLAVEIZQ logica:l LLAVEDER
                {:
                    padre=CrearHoja(ConstantesCJS.valorvec,"");
                    padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                    padre=AddHijo(padre,l);
                    RESULT=padre;
                :};

lsen    ::= lsen:ls sent:s
        {:
            ls=AddHijo(ls,s);
            RESULT=ls;
        :}
        |sent:nodo
        {:
          padre=CrearHoja(ConstantesCJS.sen,"");
          padre=AddHijo(padre,nodo);
          RESULT=padre;
        :};

sent     ::= declararvar:nodo PUNTOCOMA{:RESULT=nodo;:}
        |asignarvar:nodo PUNTOCOMA{:RESULT=nodo;:}
        |declararvec:nodo{:RESULT=nodo;:}
        |asignarvec:nodo{:RESULT=nodo;:}
        |si:nodo{:RESULT=nodo;:}
        |seleccionar:nodo{:RESULT=nodo;:}
        |para:nodo{:RESULT=nodo;:}
        |mientras:nodo{:RESULT=nodo;:}
        |detener:nodo{:RESULT=nodo;:}
        |imprimir:nodo{:RESULT=nodo;:}
        |mensaje:nodo{:RESULT=nodo;:}
        |retorno:nodo{:RESULT=nodo;:}
        |llamdaFunciones:nodo PUNTOCOMA{:RESULT=nodo;:}
        |documento:nodo PUNTOCOMA{:RESULT=nodo;:}
        |valorchtml:nodo{:RESULT = nodo;:}
        |error PUNTOCOMA{:RESULT=CrearHoja(ConstantesCJS.error,"");:};

si      ::= SI PARIZQ logica:l PARDER LLAVEIZQ lsen:s LLAVEDER
        {:
          padre=CrearHoja(ConstantesCJS.si,"");
          padre=AddHijo(padre,l);
          padre=AddHijo(padre,s);
          RESULT=padre;
        :}
        |SI PARIZQ logica:l PARDER LLAVEIZQ lsen:s LLAVEDER SINO LLAVEIZQ lsen:s1 LLAVEDER
        {:
            padre=CrearHoja(ConstantesCJS.si,"");
            padre=AddHijo(padre,l);
            padre=AddHijo(padre,s);
            padre=AddHijo(padre,s1);
            RESULT=padre;
        :};

seleccionar ::= SELECCIONA PARIZQ logica:l PARDER LLAVEIZQ lcaso:lc LLAVEDER 
            {:
                padre=CrearHoja(ConstantesCJS.seleccionar,"");
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,lc);
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.defecto,""));
                RESULT=padre;
            :} 
            |SELECCIONA PARIZQ logica:l PARDER LLAVEIZQ lcaso:lc defecto:d LLAVEDER
            {:
                padre=CrearHoja(ConstantesCJS.seleccionar,"");
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,lc);
                padre=AddHijo(padre,d);
                RESULT=padre;

            :};

lcaso       ::= lcaso:l caso:nodo
            {:
              l=AddHijo(l,nodo);
              RESULT=l;
            :}
            |caso:nodo
            {:
              padre=CrearHoja(ConstantesCJS.lcaso,"");
              padre=AddHijo(padre,nodo);
              RESULT=padre;
            :};

caso  ::= CASO logica:l DOSPUNTOS lsen:s
      {:
        padre=CrearHoja(ConstantesCJS.caso,"");
        padre=AddHijo(padre,l);
        padre=AddHijo(padre,s);
        RESULT=padre;

      :};

defecto ::= DEFECTO DOSPUNTOS lsen:ls
        {:
            padre=CrearHoja(ConstantesCJS.defecto,"");
            padre=AddHijo(padre,ls);
            RESULT=padre;
        :};

para   ::= PARA PARIZQ para0:pa PUNTOCOMA logica:lo PUNTOCOMA para1:p1 PARDER LLAVEIZQ lsen:ls LLAVEDER
       {:
          padre=CrearHoja(ConstantesCJS.para,"");
          padre=AddHijo(padre,pa);
          padre=AddHijo(padre,lo);
          padre=AddHijo(padre,p1);
          padre=AddHijo(padre,ls);
          RESULT=padre;
      :};

para0 ::= declararvar:nodo{:RESULT=nodo;:}
        |asignarvar:nodo{:RESULT=nodo;:};

para1 ::= AUMENTO{:RESULT=CrearHoja(ConstantesCJS.aumentar,"7");:}
      |DECREMENTO{:RESULT=CrearHoja(ConstantesCJS.decremento,"8");:};

mientras ::= MIENTRAS PARIZQ logica:l PARDER LLAVEIZQ lsen:ls LLAVEDER
         {:
            padre=CrearHoja(ConstantesCJS.mientras,"");
            padre=AddHijo(padre,l);
            padre=AddHijo(padre,ls);
            RESULT=padre;
          :};

detener  ::= DETENER PUNTOCOMA{:RESULT=CrearHoja(ConstantesCJS.detener,"");:};

retorno  ::= RETORNAR logica:l PUNTOCOMA
         {:
            padre=CrearHoja(ConstantesCJS.retorno,"");
            padre=AddHijo(padre,l);
            RESULT=padre;
          :};

imprimir  ::= IMPRIMIR PARIZQ logica:l PARDER PUNTOCOMA
          {:
              padre=CrearHoja(ConstantesCJS.imprimir,"");
              padre=AddHijo(padre,l);
              RESULT=padre;
          :};

mensaje  ::= MENSAJE PARIZQ logica:l PARDER PUNTOCOMA
         {:
            padre=CrearHoja(ConstantesCJS.mensaje,"");
            padre=AddHijo(padre,l);
            RESULT=padre;
          :};

llamdaFunciones ::= EID:eid PARIZQ PARDER
                {:
                    padre=CrearHoja(ConstantesCJS.llamdafuncion,eid);
                    padre=AddHijo(padre,CrearHoja(ConstantesCJS.valores,""));
                    RESULT=padre;
                :}
                |EID:eid PARIZQ valores:v PARDER
                {:
                    padre=CrearHoja(ConstantesCJS.llamdafuncion,eid);
                    padre=AddHijo(padre,v);
                    RESULT=padre;
                :};

logica  ::= logica:l1 OR logica:l2
        {:
          padre=CrearHoja(ConstantesCJS.logica,"");
          padre=AddHijo(padre,l2);
          padre=AddHijo(padre,CrearHoja(ConstantesCJS.or,"1"));
          padre=AddHijo(padre,l1); 
          RESULT=padre;

        :}
        |logica:l1 AND logica:l2
        {:
          padre=CrearHoja(ConstantesCJS.logica,"");
          padre=AddHijo(padre,l2);
          padre=AddHijo(padre,CrearHoja(ConstantesCJS.and,"2"));
          padre=AddHijo(padre,l1);
          RESULT=padre;

        :}
        |NOT logica:l 
        {:
          padre=CrearHoja(ConstantesCJS.logica,"");
          padre=AddHijo(padre,CrearHoja(ConstantesCJS.not,"3"));
          padre=AddHijo(padre,l);
          RESULT=padre;
        :}
        |PARIZQ logica:l PARDER{:RESULT=l;:}
        |relacional:r {:RESULT=r;:};

relacional  ::= relacional:r op:o exp:xp
            {:
                padre=CrearHoja(ConstantesCJS.relacional,"");
                padre=AddHijo(padre,r);
                padre=AddHijo(padre,o);
                padre=AddHijo(padre,xp);
                RESULT=padre;
            :}
            |exp:nodo{:RESULT=nodo;:};

op ::= IGUALIGUAL{:RESULT=CrearHoja(ConstantesCJS.igualigual,"1");:}
   |DIFERENTE {:RESULT=CrearHoja(ConstantesCJS.diferente,"2");:}
   |MENOR     {:RESULT=CrearHoja(ConstantesCJS.menor,"3");:}
   |MENORIGUAL{:RESULT=CrearHoja(ConstantesCJS.menorigual,"4");:}
   |MAYOR     {:RESULT=CrearHoja(ConstantesCJS.mayor,"5");:}
   |MAYOTIGUAL{:RESULT=CrearHoja(ConstantesCJS.mayorigual,"6");:};

exp ::= exp:iz MAS exp:dr
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.mas,"1"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    :}
    |exp:iz MENOS exp:dr
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.menos,"2"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    :}
    |exp:iz POR exp:dr
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.por,"3"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    :}
    |exp:iz DIVI exp:dr
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.divi,"4"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    :}
    |exp:iz MOD exp:dr
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.mod,"5"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    :}
    |exp:iz POT exp:dr
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.pot,"6"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    :}
    |exp:iz AUMENTO
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.aumentar,"7"));
      RESULT=padre;
    :}
    |exp:iz DECREMENTO
    {:
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.decremento,"8"));
      RESULT=padre;
    :}
    |PARIZQ exp:xp PARDER{:RESULT=xp;:}
    |valor:v{:RESULT=v;:};

valor ::= EVERDARERO {:RESULT =  CrearHoja(ConstantesCJS.booleano,ConstantesCJS.verdadero);:}
      |EFALSO {:RESULT =  CrearHoja(ConstantesCJS.booleano,ConstantesCJS.falso);:} 
      |ECADENA:text {:RESULT =  CrearHoja(ConstantesCJS.texto,QuitarComillas(text));:}
      |ENUMERO:text {:RESULT =  CrearHoja(ConstantesCJS.numero,text);:}
      |EDATETIME:text {:RESULT =  CrearHoja(ConstantesCJS.fecha,QuitarComillasimple(text));:}
      |EDATE:text {:RESULT =  CrearHoja(ConstantesCJS.fechahora,QuitarComillasimple(text));:}
      |EID:text {:RESULT = CrearHoja(ConstantesCJS.eid,text);:}
      |funcionesVector:nodo{:RESULT = nodo;:}
      |llamdaFunciones:nodo{:RESULT = nodo;:}
      |documento:nodo{:RESULT = nodo;:}
      |valorchtml:nodo{:RESULT = nodo;:};


documento ::= DOCUMETO PUNTO evento:nodo
          {:
              padre=CrearHoja(ConstantesCJS.documento,"");
              padre=AddHijo(padre,nodo);
              RESULT=padre;
          :};


evento ::= obtener:nodo{:RESULT=nodo;:}
       |observador:nodo{:RESULT=nodo;:};
       
observador ::= OBSERVADOR PARIZQ logica:l COMA obs0:nodo PARDER
        {:
            padre=CrearHoja(ConstantesCJS.observador,"");
            padre=AddHijo(padre,l);
            padre=AddHijo(padre,nodo);
            RESULT=padre;
        :};

obs0 ::= llamdaFunciones:nodo{:RESULT=nodo;:}
     |funciones:nodo{:RESULT=nodo;:};

obtener ::= OBTENER PARIZQ logica:l PARDER 
        {:
              padre=CrearHoja(ConstantesCJS.obtener,"");
              padre=AddHijo(padre,l);
              RESULT=padre;
        :}
        |OBTENER PARIZQ logica:l PARDER PUNTO setelem:s
        {:
          padre=CrearHoja(ConstantesCJS.obtener,"");
          padre=AddHijo(padre,l);
          padre=AddHijo(padre,s);
          RESULT=padre;
        :};

setelem ::=SETELEMENTO PARIZQ logica:l1 COMA logica:l2 PARDER
        {:
            padre=CrearHoja(ConstantesCJS.setelem,"");
            padre=AddHijo(padre,l1);
            padre=AddHijo(padre,l2);
            RESULT=padre;
        :};
        

valorchtml  ::= EID:eid PUNTO setelem:nodo
            {:
                padre=CrearHoja(ConstantesCJS.valorchtml,eid);
                padre=AddHijo(padre,nodo);
                RESULT=padre;
            :};
            
