
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 24 01:05:25 CST 2018
//----------------------------------------------------

package Analizador.CJS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 24 01:05:25 CST 2018
  */
public class parserCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCJS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\031" +
    "\011\000\002\031\012\000\002\032\005\000\002\032\003" +
    "\000\002\005\006\000\002\005\004\000\002\006\005\000" +
    "\002\007\010\000\002\007\011\000\002\007\014\000\002" +
    "\011\005\000\002\011\003\000\002\010\011\000\002\010" +
    "\010\000\002\012\005\000\002\012\007\000\002\012\006" +
    "\000\002\033\004\000\002\033\003\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\004\000\002\034\004\000" +
    "\002\034\003\000\002\034\004\000\002\013\011\000\002" +
    "\013\015\000\002\014\011\000\002\014\012\000\002\015" +
    "\004\000\002\015\003\000\002\016\006\000\002\017\005" +
    "\000\002\020\015\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\011\000\002" +
    "\024\004\000\002\027\005\000\002\025\007\000\002\026" +
    "\007\000\002\030\005\000\002\030\006\000\002\035\005" +
    "\000\002\035\005\000\002\035\004\000\002\035\005\000" +
    "\002\035\003\000\002\036\005\000\002\036\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\004\000\002" +
    "\040\004\000\002\040\005\000\002\040\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\005\000\002\043\003\000\002\043" +
    "\003\000\002\045\010\000\002\046\003\000\002\046\003" +
    "\000\002\044\006\000\002\044\010\000\002\047\010\000" +
    "\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\020\003\021\004\024\017\012\020\026\022" +
    "\027\023\013\062\016\001\002\000\004\051\377\001\002" +
    "\000\004\051\376\001\002\000\022\002\ufff8\003\ufff8\004" +
    "\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\062\ufff8\001\002" +
    "\000\022\002\ufffe\003\ufffe\004\ufffe\017\ufffe\020\ufffe\022" +
    "\ufffe\023\ufffe\062\ufffe\001\002\000\022\002\ufff7\003\ufff7" +
    "\004\ufff7\017\ufff7\020\ufff7\022\ufff7\023\ufff7\062\ufff7\001" +
    "\002\000\022\002\ufff4\003\ufff4\004\ufff4\017\ufff4\020\ufff4" +
    "\022\ufff4\023\ufff4\062\ufff4\001\002\000\004\053\372\001" +
    "\002\000\004\057\347\001\002\000\022\002\ufff6\003\ufff6" +
    "\004\ufff6\017\ufff6\020\ufff6\022\ufff6\023\ufff6\062\ufff6\001" +
    "\002\000\004\002\346\001\002\000\012\050\334\053\061" +
    "\055\333\057\332\001\002\000\022\002\ufffa\003\ufffa\004" +
    "\ufffa\017\ufffa\020\ufffa\022\ufffa\023\ufffa\062\ufffa\001\002" +
    "\000\022\002\000\003\021\004\024\017\012\020\026\022" +
    "\027\023\013\062\016\001\002\000\004\051\330\001\002" +
    "\000\022\002\ufffb\003\ufffb\004\ufffb\017\ufffb\020\ufffb\022" +
    "\ufffb\023\ufffb\062\ufffb\001\002\000\004\051\327\001\002" +
    "\000\004\062\310\001\002\000\004\051\307\001\002\000" +
    "\004\062\143\001\002\000\004\053\030\001\002\000\026" +
    "\023\013\047\033\053\036\060\045\061\040\062\044\063" +
    "\037\064\032\065\050\066\051\001\002\000\054\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\054\uff9c\056" +
    "\uff9c\001\002\000\054\027\uffa2\030\uffa2\031\uffa2\032\uffa2" +
    "\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\054\uffa2\056\uffa2\001\002\000\026\023" +
    "\013\047\033\053\036\060\045\061\040\062\044\063\037" +
    "\064\032\065\050\066\051\001\002\000\054\027\uff9a\030" +
    "\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a" +
    "\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\054\uff9a\056\uff9a" +
    "\001\002\000\054\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\054\uff9d\056\uff9d\001\002\000\026\023\013" +
    "\047\033\053\036\060\045\061\040\062\044\063\037\064" +
    "\032\065\050\066\051\001\002\000\054\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\050\uffa1\051\uffa1\052\uffa1\054\uffa1\056\uffa1\001" +
    "\002\000\054\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\054\uffa3\056\uffa3\001\002\000\054\027\126\030" +
    "\122\031\121\032\125\033\124\034\123\035\120\036\130" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\054\uffb5\056\uffb5" +
    "\001\002\000\054\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\054\uffa5\056\uffa5\001\002\000\034\037\107" +
    "\040\110\041\111\042\112\043\106\044\113\045\uffb7\046" +
    "\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\056\uffb7\001\002" +
    "\000\062\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034" +
    "\uff9e\035\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\061\054\uff9e\055\062\056\uff9e\057\060\001\002" +
    "\000\054\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034" +
    "\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\054\uffa4\056\uffa4\001\002\000\054\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b\056\uff9b\001" +
    "\002\000\010\045\053\046\054\054\052\001\002\000\054" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051\uff9f\052\uff9f\054" +
    "\uff9f\056\uff9f\001\002\000\054\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\054\uffa0\056\uffa0\001\002\000" +
    "\004\051\057\001\002\000\026\023\013\047\033\053\036" +
    "\060\045\061\040\062\044\063\037\064\032\065\050\066" +
    "\051\001\002\000\026\023\013\047\033\053\036\060\045" +
    "\061\040\062\044\063\037\064\032\065\050\066\051\001" +
    "\002\000\020\045\053\046\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\054\uffbb\056\uffbb\001\002\000\020\045\uffba\046\uffba\050" +
    "\uffba\051\uffba\052\uffba\054\uffba\056\uffba\001\002\000\044" +
    "\002\uffbe\003\uffbe\004\uffbe\007\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\056\uffbe\062\uffbe\001\002\000\010\005" +
    "\073\006\075\026\076\001\002\000\030\023\013\047\033" +
    "\053\036\054\065\060\045\061\040\062\044\063\037\064" +
    "\032\065\050\066\051\001\002\000\026\023\013\047\033" +
    "\053\036\060\045\061\040\062\044\063\037\064\032\065" +
    "\050\066\051\001\002\000\010\045\053\046\054\056\064" +
    "\001\002\000\054\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033" +
    "\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\050\uffe2\051" +
    "\uffe2\052\uffe2\054\uffe2\056\uffe2\001\002\000\054\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\046\uffbd\050\uffbd\051\uffbd\052\uffbd\054\uffbd\056" +
    "\uffbd\001\002\000\014\045\053\046\054\052\uffe7\054\uffe7" +
    "\056\uffe7\001\002\000\006\052\070\054\071\001\002\000" +
    "\026\023\013\047\033\053\036\060\045\061\040\062\044" +
    "\063\037\064\032\065\050\066\051\001\002\000\054\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc" +
    "\056\uffbc\001\002\000\014\045\053\046\054\052\uffe8\054" +
    "\uffe8\056\uffe8\001\002\000\004\053\104\001\002\000\114" +
    "\002\uff90\003\uff90\004\uff90\007\uff90\011\uff90\012\uff90\013" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90" +
    "\022\uff90\023\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050\uff90\051" +
    "\uff90\052\uff90\054\uff90\056\uff90\062\uff90\001\002\000\054" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\054" +
    "\uffe4\056\uffe4\001\002\000\004\053\077\001\002\000\026" +
    "\023\013\047\033\053\036\060\045\061\040\062\044\063" +
    "\037\064\032\065\050\066\051\001\002\000\010\045\053" +
    "\046\054\052\101\001\002\000\026\023\013\047\033\053" +
    "\036\060\045\061\040\062\044\063\037\064\032\065\050" +
    "\066\051\001\002\000\010\045\053\046\054\054\103\001" +
    "\002\000\114\002\uff91\003\uff91\004\uff91\007\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\017\uff91\020" +
    "\uff91\021\uff91\022\uff91\023\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91" +
    "\050\uff91\051\uff91\052\uff91\054\uff91\056\uff91\062\uff91\001" +
    "\002\000\004\054\105\001\002\000\054\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\050\uffe3\051\uffe3\052\uffe3\054\uffe3\056\uffe3\001" +
    "\002\000\024\023\uffb1\053\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\066\uffb1\001\002\000\024\023" +
    "\uffb4\053\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4" +
    "\065\uffb4\066\uffb4\001\002\000\024\023\uffb3\053\uffb3\060" +
    "\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3" +
    "\001\002\000\024\023\uffb2\053\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002\000\024" +
    "\023\uffb0\053\uffb0\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\065\uffb0\066\uffb0\001\002\000\024\023\uffaf\053\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066" +
    "\uffaf\001\002\000\024\023\013\053\116\060\045\061\040" +
    "\062\044\063\037\064\032\065\050\066\051\001\002\000" +
    "\054\027\126\030\122\031\121\032\125\033\124\034\123" +
    "\035\120\036\130\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\054\uffb6\056\uffb6\001\002\000\024\023\013\053\116\060" +
    "\045\061\040\062\044\063\037\064\032\065\050\066\051" +
    "\001\002\000\024\027\126\030\122\031\121\032\125\033" +
    "\124\034\123\035\120\036\130\054\127\001\002\000\054" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\044\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8\054" +
    "\uffa8\056\uffa8\001\002\000\024\023\013\053\116\060\045" +
    "\061\040\062\044\063\037\064\032\065\050\066\051\001" +
    "\002\000\024\023\013\053\116\060\045\061\040\062\044" +
    "\063\037\064\032\065\050\066\051\001\002\000\024\023" +
    "\013\053\116\060\045\061\040\062\044\063\037\064\032" +
    "\065\050\066\051\001\002\000\024\023\013\053\116\060" +
    "\045\061\040\062\044\063\037\064\032\065\050\066\051" +
    "\001\002\000\024\023\013\053\116\060\045\061\040\062" +
    "\044\063\037\064\032\065\050\066\051\001\002\000\024" +
    "\023\013\053\116\060\045\061\040\062\044\063\037\064" +
    "\032\065\050\066\051\001\002\000\054\027\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\050\uffa6\051\uffa6\052\uffa6\054\uffa6\056\uffa6\001" +
    "\002\000\054\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\054\uffa7\056\uffa7\001\002\000\054\027\uffae\030" +
    "\uffae\031\121\032\125\033\124\034\123\035\120\036\130" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\050\uffae\051\uffae\052\uffae\054\uffae\056\uffae" +
    "\001\002\000\054\027\uffac\030\uffac\031\uffac\032\uffac\033" +
    "\uffac\034\123\035\120\036\130\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\052\uffac\054\uffac\056\uffac\001\002\000\054\027\uffaa" +
    "\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\123\035\120\036" +
    "\130\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\056" +
    "\uffaa\001\002\000\054\027\uffa9\030\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\034\123\035\120\036\130\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\054\uffa9\056\uffa9\001\002\000\054\027" +
    "\uffad\030\uffad\031\121\032\125\033\124\034\123\035\120" +
    "\036\130\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad\054\uffad" +
    "\056\uffad\001\002\000\054\027\uffab\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\123\035\120\036\130\037\uffab\040\uffab" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\050" +
    "\uffab\051\uffab\052\uffab\054\uffab\056\uffab\001\002\000\044" +
    "\027\126\030\122\031\121\032\125\033\124\034\123\035" +
    "\120\036\130\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5" +
    "\044\uffb5\045\uffb5\046\uffb5\054\127\001\002\000\010\045" +
    "\053\046\054\054\141\001\002\000\020\045\uffb8\046\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\054\uffb8\056\uffb8\001\002\000" +
    "\020\045\uffb9\046\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9" +
    "\056\uffb9\001\002\000\004\053\144\001\002\000\006\054" +
    "\146\062\147\001\002\000\006\052\301\054\302\001\002" +
    "\000\004\055\150\001\002\000\006\052\uffef\054\uffef\001" +
    "\002\000\032\003\166\004\024\007\165\011\156\014\161" +
    "\015\175\016\174\017\012\021\164\022\027\023\013\062" +
    "\016\001\002\000\004\051\300\001\002\000\004\051\277" +
    "\001\002\000\040\003\uffd9\004\uffd9\007\uffd9\011\uffd9\012" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\056\uffd9\062\uffd9\001\002\000\040\003" +
    "\uffda\004\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\056" +
    "\uffda\062\uffda\001\002\000\040\003\uffd1\004\uffd1\007\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\056\uffd1\062\uffd1\001\002" +
    "\000\004\053\256\001\002\000\040\003\uffd6\004\uffd6\007" +
    "\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\021\uffd6\022\uffd6\023\uffd6\056\uffd6\062\uffd6\001" +
    "\002\000\040\003\uffd8\004\uffd8\007\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\056\uffd8\062\uffd8\001\002\000\004\053\231" +
    "\001\002\000\040\003\uffd5\004\uffd5\007\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5" +
    "\022\uffd5\023\uffd5\056\uffd5\062\uffd5\001\002\000\040\003" +
    "\uffdc\004\uffdc\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\056" +
    "\uffdc\062\uffdc\001\002\000\026\023\013\047\033\053\036" +
    "\060\045\061\040\062\044\063\037\064\032\065\050\066" +
    "\051\001\002\000\004\053\215\001\002\000\004\051\214" +
    "\001\002\000\040\003\uffdd\004\uffdd\007\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\056\uffdd\062\uffdd\001\002\000\040\003" +
    "\uffd4\004\uffd4\007\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023\uffd4\056" +
    "\uffd4\062\uffd4\001\002\000\034\003\166\004\024\007\165" +
    "\011\156\014\161\015\175\016\174\017\012\021\164\022" +
    "\027\023\013\056\213\062\016\001\002\000\004\051\212" +
    "\001\002\000\040\003\uffd7\004\uffd7\007\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7" +
    "\022\uffd7\023\uffd7\056\uffd7\062\uffd7\001\002\000\004\051" +
    "\211\001\002\000\004\053\202\001\002\000\040\003\uffdb" +
    "\004\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\056\uffdb" +
    "\062\uffdb\001\002\000\004\051\201\001\002\000\040\003" +
    "\uffe0\004\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\056" +
    "\uffe0\062\uffe0\001\002\000\040\003\uffde\004\uffde\007\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\021\uffde\022\uffde\023\uffde\056\uffde\062\uffde\001\002" +
    "\000\026\023\013\047\033\053\036\060\045\061\040\062" +
    "\044\063\037\064\032\065\050\066\051\001\002\000\010" +
    "\045\053\046\054\054\204\001\002\000\004\055\205\001" +
    "\002\000\032\003\166\004\024\007\165\011\156\014\161" +
    "\015\175\016\174\017\012\021\164\022\027\023\013\062" +
    "\016\001\002\000\034\003\166\004\024\007\165\011\156" +
    "\014\161\015\175\016\174\017\012\021\164\022\027\023" +
    "\013\056\207\062\016\001\002\000\040\003\uffc2\004\uffc2" +
    "\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\056\uffc2\062\uffc2" +
    "\001\002\000\040\003\uffe1\004\uffe1\007\uffe1\011\uffe1\012" +
    "\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\056\uffe1\062\uffe1\001\002\000\040\003" +
    "\uffc1\004\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\056" +
    "\uffc1\062\uffc1\001\002\000\040\003\uffd2\004\uffd2\007\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\056\uffd2\062\uffd2\001\002" +
    "\000\024\002\ufff2\003\ufff2\004\ufff2\017\ufff2\020\ufff2\022" +
    "\ufff2\023\ufff2\054\ufff2\062\ufff2\001\002\000\040\003\uffd0" +
    "\004\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\056\uffd0" +
    "\062\uffd0\001\002\000\026\023\013\047\033\053\036\060" +
    "\045\061\040\062\044\063\037\064\032\065\050\066\051" +
    "\001\002\000\010\045\053\046\054\054\217\001\002\000" +
    "\004\055\220\001\002\000\032\003\166\004\024\007\165" +
    "\011\156\014\161\015\175\016\174\017\012\021\164\022" +
    "\027\023\013\062\016\001\002\000\034\003\166\004\024" +
    "\007\165\011\156\014\161\015\175\016\174\017\012\021" +
    "\164\022\027\023\013\056\222\062\016\001\002\000\042" +
    "\003\uffcf\004\uffcf\007\uffcf\010\223\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\056\uffcf\062\uffcf\001\002\000\004\055\224\001" +
    "\002\000\032\003\166\004\024\007\165\011\156\014\161" +
    "\015\175\016\174\017\012\021\164\022\027\023\013\062" +
    "\016\001\002\000\034\003\166\004\024\007\165\011\156" +
    "\014\161\015\175\016\174\017\012\021\164\022\027\023" +
    "\013\056\226\062\016\001\002\000\040\003\uffce\004\uffce" +
    "\007\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\021\uffce\022\uffce\023\uffce\056\uffce\062\uffce" +
    "\001\002\000\010\045\053\046\054\051\230\001\002\000" +
    "\040\003\uffc0\004\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\056\uffc0\062\uffc0\001\002\000\006\004\232\062\236" +
    "\001\002\000\004\062\253\001\002\000\004\051\uffc5\001" +
    "\002\000\004\051\241\001\002\000\004\051\uffc6\001\002" +
    "\000\004\050\237\001\002\000\026\023\013\047\033\053" +
    "\036\060\045\061\040\062\044\063\037\064\032\065\050" +
    "\066\051\001\002\000\010\045\053\046\054\051\uffec\001" +
    "\002\000\026\023\013\047\033\053\036\060\045\061\040" +
    "\062\044\063\037\064\032\065\050\066\051\001\002\000" +
    "\010\045\053\046\054\051\243\001\002\000\006\035\244" +
    "\036\245\001\002\000\004\054\uffc4\001\002\000\004\054" +
    "\uffc3\001\002\000\004\054\247\001\002\000\004\055\250" +
    "\001\002\000\032\003\166\004\024\007\165\011\156\014" +
    "\161\015\175\016\174\017\012\021\164\022\027\023\013" +
    "\062\016\001\002\000\034\003\166\004\024\007\165\011" +
    "\156\014\161\015\175\016\174\017\012\021\164\022\027" +
    "\023\013\056\252\062\016\001\002\000\040\003\uffc7\004" +
    "\uffc7\007\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\056\uffc7\062" +
    "\uffc7\001\002\000\006\050\254\051\uffed\001\002\000\026" +
    "\023\013\047\033\053\036\060\045\061\040\062\044\063" +
    "\037\064\032\065\050\066\051\001\002\000\010\045\053" +
    "\046\054\051\uffee\001\002\000\026\023\013\047\033\053" +
    "\036\060\045\061\040\062\044\063\037\064\032\065\050" +
    "\066\051\001\002\000\010\045\053\046\054\054\260\001" +
    "\002\000\004\055\261\001\002\000\004\012\264\001\002" +
    "\000\010\012\264\013\271\056\270\001\002\000\010\012" +
    "\uffca\013\uffca\056\uffca\001\002\000\026\023\013\047\033" +
    "\053\036\060\045\061\040\062\044\063\037\064\032\065" +
    "\050\066\051\001\002\000\010\045\053\046\054\050\266" +
    "\001\002\000\032\003\166\004\024\007\165\011\156\014" +
    "\161\015\175\016\174\017\012\021\164\022\027\023\013" +
    "\062\016\001\002\000\040\003\166\004\024\007\165\011" +
    "\156\012\uffc9\013\uffc9\014\161\015\175\016\174\017\012" +
    "\021\164\022\027\023\013\056\uffc9\062\016\001\002\000" +
    "\040\003\uffcd\004\uffcd\007\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\056\uffcd\062\uffcd\001\002\000\004\050\275\001\002" +
    "\000\010\012\uffcb\013\uffcb\056\uffcb\001\002\000\004\056" +
    "\274\001\002\000\040\003\uffcc\004\uffcc\007\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\056\uffcc\062\uffcc\001\002\000\032" +
    "\003\166\004\024\007\165\011\156\014\161\015\175\016" +
    "\174\017\012\021\164\022\027\023\013\062\016\001\002" +
    "\000\034\003\166\004\024\007\165\011\156\014\161\015" +
    "\175\016\174\017\012\021\164\022\027\023\013\056\uffc8" +
    "\062\016\001\002\000\040\003\uffdf\004\uffdf\007\uffdf\011" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\056\uffdf\062\uffdf\001\002\000" +
    "\040\003\uffd3\004\uffd3\007\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\056\uffd3\062\uffd3\001\002\000\004\062\306\001\002" +
    "\000\004\055\303\001\002\000\032\003\166\004\024\007" +
    "\165\011\156\014\161\015\175\016\174\017\012\021\164" +
    "\022\027\023\013\062\016\001\002\000\034\003\166\004" +
    "\024\007\165\011\156\014\161\015\175\016\174\017\012" +
    "\021\164\022\027\023\013\056\305\062\016\001\002\000" +
    "\024\002\ufff1\003\ufff1\004\ufff1\017\ufff1\020\ufff1\022\ufff1" +
    "\023\ufff1\054\ufff1\062\ufff1\001\002\000\006\052\ufff0\054" +
    "\ufff0\001\002\000\022\002\ufffc\003\ufffc\004\ufffc\017\ufffc" +
    "\020\ufffc\022\ufffc\023\ufffc\062\ufffc\001\002\000\010\050" +
    "\312\051\uffed\055\311\001\002\000\026\023\013\047\033" +
    "\053\036\060\045\061\040\062\044\063\037\064\032\065" +
    "\050\066\051\001\002\000\030\023\013\047\033\053\036" +
    "\055\313\060\045\061\040\062\044\063\037\064\032\065" +
    "\050\066\051\001\002\000\026\023\013\047\033\053\036" +
    "\060\045\061\040\062\044\063\037\064\032\065\050\066" +
    "\051\001\002\000\006\052\070\056\315\001\002\000\004" +
    "\051\316\001\002\000\044\002\uffea\003\uffea\004\uffea\007" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\056\uffea\062" +
    "\uffea\001\002\000\010\045\053\046\054\056\320\001\002" +
    "\000\006\050\321\051\322\001\002\000\004\055\323\001" +
    "\002\000\044\002\uffeb\003\uffeb\004\uffeb\007\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\056\uffeb\062\uffeb\001\002" +
    "\000\026\023\013\047\033\053\036\060\045\061\040\062" +
    "\044\063\037\064\032\065\050\066\051\001\002\000\006" +
    "\052\070\056\325\001\002\000\004\051\326\001\002\000" +
    "\044\002\uffe9\003\uffe9\004\uffe9\007\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\056\uffe9\062\uffe9\001\002\000\022" +
    "\002\ufff5\003\ufff5\004\ufff5\017\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\062\ufff5\001\002\000\022\002\ufff3\003\ufff3\004\ufff3" +
    "\017\ufff3\020\ufff3\022\ufff3\023\ufff3\062\ufff3\001\002\000" +
    "\022\002\uffff\003\uffff\004\uffff\017\uffff\020\uffff\022\uffff" +
    "\023\uffff\062\uffff\001\002\000\004\026\076\001\002\000" +
    "\026\023\013\047\033\053\036\060\045\061\040\062\044" +
    "\063\037\064\032\065\050\066\051\001\002\000\030\023" +
    "\013\047\033\053\036\055\335\060\045\061\040\062\044" +
    "\063\037\064\032\065\050\066\051\001\002\000\026\023" +
    "\013\047\033\053\036\060\045\061\040\062\044\063\037" +
    "\064\032\065\050\066\051\001\002\000\006\052\070\056" +
    "\337\001\002\000\004\051\340\001\002\000\044\002\uffe5" +
    "\003\uffe5\004\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\056\uffe5\062\uffe5\001\002\000\010\045\053\046" +
    "\054\056\342\001\002\000\004\050\343\001\002\000\026" +
    "\023\013\047\033\053\036\060\045\061\040\062\044\063" +
    "\037\064\032\065\050\066\051\001\002\000\010\045\053" +
    "\046\054\051\345\001\002\000\044\002\uffe6\003\uffe6\004" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\056" +
    "\uffe6\062\uffe6\001\002\000\004\002\001\001\002\000\006" +
    "\024\353\025\350\001\002\000\004\053\365\001\002\000" +
    "\054\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97\052\uff97" +
    "\054\uff97\056\uff97\001\002\000\054\027\uff98\030\uff98\031" +
    "\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\050\uff98\051\uff98\052\uff98\054\uff98\056\uff98\001\002" +
    "\000\004\053\355\001\002\000\054\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
    "\uff99\050\uff99\051\uff99\052\uff99\054\uff99\056\uff99\001\002" +
    "\000\026\023\013\047\033\053\036\060\045\061\040\062" +
    "\044\063\037\064\032\065\050\066\051\001\002\000\010" +
    "\045\053\046\054\052\357\001\002\000\006\020\026\062" +
    "\363\001\002\000\004\054\364\001\002\000\004\054\uff95" +
    "\001\002\000\004\054\uff94\001\002\000\004\053\061\001" +
    "\002\000\054\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96\051\uff96" +
    "\052\uff96\054\uff96\056\uff96\001\002\000\026\023\013\047" +
    "\033\053\036\060\045\061\040\062\044\063\037\064\032" +
    "\065\050\066\051\001\002\000\010\045\053\046\054\054" +
    "\367\001\002\000\056\027\uff93\030\uff93\031\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93" +
    "\051\uff93\052\uff93\054\uff93\056\uff93\057\370\001\002\000" +
    "\004\026\076\001\002\000\054\027\uff92\030\uff92\031\uff92" +
    "\032\uff92\033\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040" +
    "\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92" +
    "\050\uff92\051\uff92\052\uff92\054\uff92\056\uff92\001\002\000" +
    "\026\023\013\047\033\053\036\060\045\061\040\062\044" +
    "\063\037\064\032\065\050\066\051\001\002\000\010\045" +
    "\053\046\054\054\374\001\002\000\004\051\375\001\002" +
    "\000\044\002\uffbf\003\uffbf\004\uffbf\007\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\056\uffbf\062\uffbf\001\002\000" +
    "\022\002\ufffd\003\ufffd\004\ufffd\017\ufffd\020\ufffd\022\ufffd" +
    "\023\ufffd\062\ufffd\001\002\000\022\002\ufff9\003\ufff9\004" +
    "\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\062\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\034\002\014\003\017\004\006\005\004\006" +
    "\024\007\021\010\016\025\007\026\013\030\003\031\005" +
    "\042\022\050\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\330\005\004\006\024\007\021\010" +
    "\016\025\007\026\013\030\003\031\005\042\022\050\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\034\030\030\035\046\036" +
    "\042\040\040\041\041\042\045\050\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\034\030\030\035" +
    "\141\036\042\040\040\041\041\042\045\050\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\034\030" +
    "\030\035\137\036\042\040\136\041\041\042\045\050\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\012\034\030\030\035\055\036\042\040\040\041" +
    "\041\042\045\050\033\001\001\000\022\012\034\030\030" +
    "\035\054\036\042\040\040\041\041\042\045\050\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\073\001\001\000\024\011\066\012\034\030" +
    "\030\035\065\036\042\040\040\041\041\042\045\050\033" +
    "\001\001\000\022\012\034\030\030\035\062\036\042\040" +
    "\040\041\041\042\045\050\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\034\030\030\035\071\036\042" +
    "\040\040\041\041\042\045\050\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\034\030" +
    "\030\035\077\036\042\040\040\041\041\042\045\050\033" +
    "\001\001\000\002\001\001\000\022\012\034\030\030\035" +
    "\101\036\042\040\040\041\041\042\045\050\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\034\030\030\040\114\041\041\042\045" +
    "\050\033\001\001\000\002\001\001\000\016\012\034\030" +
    "\030\040\116\041\041\042\045\050\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\034\030\030\040" +
    "\135\041\041\042\045\050\033\001\001\000\016\012\034" +
    "\030\030\040\134\041\041\042\045\050\033\001\001\000" +
    "\016\012\034\030\030\040\133\041\041\042\045\050\033" +
    "\001\001\000\016\012\034\030\030\040\132\041\041\042" +
    "\045\050\033\001\001\000\016\012\034\030\030\040\131" +
    "\041\041\042\045\050\033\001\001\000\016\012\034\030" +
    "\030\040\130\041\041\042\045\050\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\151\006\176\007\166\010\162" +
    "\013\175\014\153\020\152\023\157\024\172\025\156\026" +
    "\161\027\167\030\150\033\170\034\177\042\171\050\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\034\030\030" +
    "\035\226\036\042\040\040\041\041\042\045\050\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\151\006\176\007\166\010" +
    "\162\013\175\014\153\020\152\023\157\024\172\025\156" +
    "\026\161\027\167\030\150\034\207\042\171\050\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\034\030\030" +
    "\035\202\036\042\040\040\041\041\042\045\050\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\151" +
    "\006\176\007\166\010\162\013\175\014\153\020\152\023" +
    "\157\024\172\025\156\026\161\027\167\030\150\033\205" +
    "\034\177\042\171\050\154\001\001\000\042\005\151\006" +
    "\176\007\166\010\162\013\175\014\153\020\152\023\157" +
    "\024\172\025\156\026\161\027\167\030\150\034\207\042" +
    "\171\050\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\034\030\030\035\215\036\042" +
    "\040\040\041\041\042\045\050\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\005\151\006\176\007\166" +
    "\010\162\013\175\014\153\020\152\023\157\024\172\025" +
    "\156\026\161\027\167\030\150\033\220\034\177\042\171" +
    "\050\154\001\001\000\042\005\151\006\176\007\166\010" +
    "\162\013\175\014\153\020\152\023\157\024\172\025\156" +
    "\026\161\027\167\030\150\034\207\042\171\050\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\151" +
    "\006\176\007\166\010\162\013\175\014\153\020\152\023" +
    "\157\024\172\025\156\026\161\027\167\030\150\033\224" +
    "\034\177\042\171\050\154\001\001\000\042\005\151\006" +
    "\176\007\166\010\162\013\175\014\153\020\152\023\157" +
    "\024\172\025\156\026\161\027\167\030\150\034\207\042" +
    "\171\050\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\234\006\232\021\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\034\030" +
    "\030\035\237\036\042\040\040\041\041\042\045\050\033" +
    "\001\001\000\002\001\001\000\022\012\034\030\030\035" +
    "\241\036\042\040\040\041\041\042\045\050\033\001\001" +
    "\000\002\001\001\000\004\022\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\151\006\176\007\166\010\162\013\175\014" +
    "\153\020\152\023\157\024\172\025\156\026\161\027\167" +
    "\030\150\033\250\034\177\042\171\050\154\001\001\000" +
    "\042\005\151\006\176\007\166\010\162\013\175\014\153" +
    "\020\152\023\157\024\172\025\156\026\161\027\167\030" +
    "\150\034\207\042\171\050\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\034\030\030\035\254\036" +
    "\042\040\040\041\041\042\045\050\033\001\001\000\002" +
    "\001\001\000\022\012\034\030\030\035\256\036\042\040" +
    "\040\041\041\042\045\050\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\261\016\262\001\001\000" +
    "\006\016\271\017\272\001\001\000\002\001\001\000\022" +
    "\012\034\030\030\035\264\036\042\040\040\041\041\042" +
    "\045\050\033\001\001\000\002\001\001\000\044\005\151" +
    "\006\176\007\166\010\162\013\175\014\153\020\152\023" +
    "\157\024\172\025\156\026\161\027\167\030\150\033\266" +
    "\034\177\042\171\050\154\001\001\000\042\005\151\006" +
    "\176\007\166\010\162\013\175\014\153\020\152\023\157" +
    "\024\172\025\156\026\161\027\167\030\150\034\207\042" +
    "\171\050\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\151\006\176\007\166\010\162\013\175\014\153" +
    "\020\152\023\157\024\172\025\156\026\161\027\167\030" +
    "\150\033\275\034\177\042\171\050\154\001\001\000\042" +
    "\005\151\006\176\007\166\010\162\013\175\014\153\020" +
    "\152\023\157\024\172\025\156\026\161\027\167\030\150" +
    "\034\207\042\171\050\154\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\151\006\176\007\166\010\162\013\175\014\153\020" +
    "\152\023\157\024\172\025\156\026\161\027\167\030\150" +
    "\033\303\034\177\042\171\050\154\001\001\000\042\005" +
    "\151\006\176\007\166\010\162\013\175\014\153\020\152" +
    "\023\157\024\172\025\156\026\161\027\167\030\150\034" +
    "\207\042\171\050\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\034\030\030\035\316\036\042\040\040\041\041\042\045" +
    "\050\033\001\001\000\022\012\034\030\030\035\254\036" +
    "\042\040\040\041\041\042\045\050\033\001\001\000\024" +
    "\011\313\012\034\030\030\035\065\036\042\040\040\041" +
    "\041\042\045\050\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\323" +
    "\012\034\030\030\035\065\036\042\040\040\041\041\042" +
    "\045\050\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\073\001\001\000\022\012\034" +
    "\030\030\035\340\036\042\040\040\041\041\042\045\050" +
    "\033\001\001\000\022\012\034\030\030\035\237\036\042" +
    "\040\040\041\041\042\045\050\033\001\001\000\024\011" +
    "\335\012\034\030\030\035\065\036\042\040\040\041\041" +
    "\042\045\050\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\012\034\030\030\035\343\036\042\040\040\041" +
    "\041\042\045\050\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\043\353\044\351\045" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\034\030\030\035\355\036\042\040\040\041\041\042\045" +
    "\050\033\001\001\000\002\001\001\000\010\030\360\031" +
    "\361\046\357\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\034\030\030\035\365\036\042\040\040\041\041" +
    "\042\045\050\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\370\001\001\000\002\001\001\000\022" +
    "\012\034\030\030\035\372\036\042\040\040\041\041\042" +
    "\045\050\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
        
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCJS$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz;
    NodoArbol padre,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,0,0);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }
    private String QuitarComillas(String cadena)
    {
        cadena=cadena.replace('\"', ' ');
        return cadena.trim();
    }
    private String QuitarComillasimple(String cadena)
    {
        cadena=cadena.replace('\'', ' ');
        return cadena.trim();
    }


  private final parserCJS parser;

  /** Constructor */
  CUP$parserCJS$actions(parserCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCJS$do_action(
    int                        CUP$parserCJS$act_num,
    java_cup.runtime.lr_parser CUP$parserCJS$parser,
    java.util.Stack            CUP$parserCJS$stack,
    int                        CUP$parserCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCJS$result;

      /* select the action based on the action number */
      switch (CUP$parserCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // valorchtml ::= EID PUNTO setelem 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                padre=CrearHoja(ConstantesCJS.valorchtml,eid);
                padre=AddHijo(padre,nodo);
                RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valorchtml",38, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // setelem ::= SETELEMENTO PARIZQ logica COMA logica PARDER 
            {
              NodoArbol RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		NodoArbol l1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
            padre=CrearHoja(ConstantesCJS.setelem,"");
            padre=AddHijo(padre,l1);
            padre=AddHijo(padre,l2);
            RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("setelem",37, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // obtener ::= OBTENER PARIZQ logica PARDER PUNTO setelem 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
          padre=CrearHoja(ConstantesCJS.obtener,"");
          padre=AddHijo(padre,l);
          padre=AddHijo(padre,s);
          RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obtener",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // obtener ::= OBTENER PARIZQ logica PARDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
              padre=CrearHoja(ConstantesCJS.obtener,"");
              padre=AddHijo(padre,l);
              RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obtener",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // obs0 ::= funciones 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obs0",36, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // obs0 ::= llamdaFunciones 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obs0",36, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // observador ::= OBSERVADOR PARIZQ logica COMA obs0 PARDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
            padre=CrearHoja(ConstantesCJS.observador,"");
            padre=AddHijo(padre,l);
            padre=AddHijo(padre,nodo);
            RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("observador",35, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // evento ::= observador 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",33, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // evento ::= obtener 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",33, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // documento ::= DOCUMETO PUNTO evento 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
              padre=CrearHoja(ConstantesCJS.documento,"");
              padre=AddHijo(padre,nodo);
              RESULT=padre;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("documento",32, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // valor ::= valorchtml 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT = nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // valor ::= documento 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT = nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // valor ::= llamdaFunciones 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT = nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= funcionesVector 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT = nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= EID 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT = CrearHoja(ConstantesCJS.eid,text);
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= EDATE 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT =  CrearHoja(ConstantesCJS.fechahora,QuitarComillasimple(text));
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= EDATETIME 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT =  CrearHoja(ConstantesCJS.fecha,QuitarComillasimple(text));
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor ::= ENUMERO 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT =  CrearHoja(ConstantesCJS.numero,text);
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= ECADENA 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT =  CrearHoja(ConstantesCJS.texto,QuitarComillas(text));
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= EFALSO 
            {
              NodoArbol RESULT =null;
		RESULT =  CrearHoja(ConstantesCJS.booleano,ConstantesCJS.falso);
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= EVERDARERO 
            {
              NodoArbol RESULT =null;
		RESULT =  CrearHoja(ConstantesCJS.booleano,ConstantesCJS.verdadero);
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp ::= valor 
            {
              NodoArbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol v = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=v;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exp ::= PARIZQ exp PARDER 
            {
              NodoArbol RESULT =null;
		int xpleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int xpright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol xp = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=xp;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exp ::= exp DECREMENTO 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.decremento,"8"));
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp ::= exp AUMENTO 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.aumentar,"7"));
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp ::= exp POT exp 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol dr = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.pot,"6"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp ::= exp MOD exp 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol dr = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.mod,"5"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp ::= exp DIVI exp 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol dr = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.divi,"4"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp ::= exp POR exp 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol dr = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.por,"3"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp ::= exp MENOS exp 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol dr = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.menos,"2"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp ::= exp MAS exp 
            {
              NodoArbol RESULT =null;
		int izleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int izright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol iz = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol dr = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
      padre=CrearHoja(ConstantesCJS.exp,"");
      padre=AddHijo(padre,iz);
      padre=AddHijo(padre,CrearHoja(ConstantesCJS.mas,"1"));
      padre=AddHijo(padre,dr);
      RESULT=padre;
    
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op ::= MAYOTIGUAL 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.mayorigual,"6");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op ::= MAYOR 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.mayor,"5");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op ::= MENORIGUAL 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.menorigual,"4");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op ::= MENOR 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.menor,"3");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op ::= DIFERENTE 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.diferente,"2");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op ::= IGUALIGUAL 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.igualigual,"1");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // relacional ::= exp 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("relacional",28, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // relacional ::= relacional op exp 
            {
              NodoArbol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol o = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int xpleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int xpright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol xp = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                padre=CrearHoja(ConstantesCJS.relacional,"");
                padre=AddHijo(padre,r);
                padre=AddHijo(padre,o);
                padre=AddHijo(padre,xp);
                RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("relacional",28, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logica ::= relacional 
            {
              NodoArbol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol r = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=r;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // logica ::= PARIZQ logica PARDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=l;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // logica ::= NOT logica 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
          padre=CrearHoja(ConstantesCJS.logica,"");
          padre=AddHijo(padre,CrearHoja(ConstantesCJS.not,"3"));
          padre=AddHijo(padre,l);
          RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logica ::= logica AND logica 
            {
              NodoArbol RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol l1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol l2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
          padre=CrearHoja(ConstantesCJS.logica,"");
          padre=AddHijo(padre,l2);
          padre=AddHijo(padre,CrearHoja(ConstantesCJS.and,"2"));
          padre=AddHijo(padre,l1);
          RESULT=padre;

        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logica ::= logica OR logica 
            {
              NodoArbol RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol l1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol l2 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
          padre=CrearHoja(ConstantesCJS.logica,"");
          padre=AddHijo(padre,l2);
          padre=AddHijo(padre,CrearHoja(ConstantesCJS.or,"1"));
          padre=AddHijo(padre,l1); 
          RESULT=padre;

        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // llamdaFunciones ::= EID PARIZQ valores PARDER 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol v = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    padre=CrearHoja(ConstantesCJS.llamdafuncion,eid);
                    padre=AddHijo(padre,v);
                    RESULT=padre;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("llamdaFunciones",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // llamdaFunciones ::= EID PARIZQ PARDER 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    padre=CrearHoja(ConstantesCJS.llamdafuncion,eid);
                    padre=AddHijo(padre,CrearHoja(ConstantesCJS.valores,""));
                    RESULT=padre;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("llamdaFunciones",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // mensaje ::= MENSAJE PARIZQ logica PARDER PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
            padre=CrearHoja(ConstantesCJS.mensaje,"");
            padre=AddHijo(padre,l);
            RESULT=padre;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("mensaje",20, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // imprimir ::= IMPRIMIR PARIZQ logica PARDER PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
              padre=CrearHoja(ConstantesCJS.imprimir,"");
              padre=AddHijo(padre,l);
              RESULT=padre;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("imprimir",19, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // retorno ::= RETORNAR logica PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
            padre=CrearHoja(ConstantesCJS.retorno,"");
            padre=AddHijo(padre,l);
            RESULT=padre;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("retorno",21, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // detener ::= DETENER PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.detener,"");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("detener",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // mientras ::= MIENTRAS PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
            padre=CrearHoja(ConstantesCJS.mientras,"");
            padre=AddHijo(padre,l);
            padre=AddHijo(padre,ls);
            RESULT=padre;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("mientras",17, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // para1 ::= DECREMENTO 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.decremento,"8");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para1",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // para1 ::= AUMENTO 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.aumentar,"7");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para1",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // para0 ::= asignarvar 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para0",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // para0 ::= declararvar 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para0",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // para ::= PARA PARIZQ para0 PUNTOCOMA logica PUNTOCOMA para1 PARDER LLAVEIZQ lsen LLAVEDER 
            {
              NodoArbol RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		NodoArbol pa = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int loleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int loright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		NodoArbol lo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		NodoArbol p1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
          padre=CrearHoja(ConstantesCJS.para,"");
          padre=AddHijo(padre,pa);
          padre=AddHijo(padre,lo);
          padre=AddHijo(padre,p1);
          padre=AddHijo(padre,ls);
          RESULT=padre;
      
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para",14, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // defecto ::= DEFECTO DOSPUNTOS lsen 
            {
              NodoArbol RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            padre=CrearHoja(ConstantesCJS.defecto,"");
            padre=AddHijo(padre,ls);
            RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("defecto",13, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // caso ::= CASO logica DOSPUNTOS lsen 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
        padre=CrearHoja(ConstantesCJS.caso,"");
        padre=AddHijo(padre,l);
        padre=AddHijo(padre,s);
        RESULT=padre;

      
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("caso",12, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lcaso ::= caso 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
              padre=CrearHoja(ConstantesCJS.lcaso,"");
              padre=AddHijo(padre,nodo);
              RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcaso",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lcaso ::= lcaso caso 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
              l=AddHijo(l,nodo);
              RESULT=l;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcaso",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // seleccionar ::= SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso defecto LLAVEDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol lc = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol d = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                padre=CrearHoja(ConstantesCJS.seleccionar,"");
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,lc);
                padre=AddHijo(padre,d);
                RESULT=padre;

            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("seleccionar",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // seleccionar ::= SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso LLAVEDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol lc = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                padre=CrearHoja(ConstantesCJS.seleccionar,"");
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,lc);
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.defecto,""));
                RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("seleccionar",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // si ::= SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER SINO LLAVEIZQ lsen LLAVEDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol s1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
            padre=CrearHoja(ConstantesCJS.si,"");
            padre=AddHijo(padre,l);
            padre=AddHijo(padre,s);
            padre=AddHijo(padre,s1);
            RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("si",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // si ::= SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
          padre=CrearHoja(ConstantesCJS.si,"");
          padre=AddHijo(padre,l);
          padre=AddHijo(padre,s);
          RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("si",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sent ::= error PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.error,"");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sent ::= valorchtml 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT = nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sent ::= documento PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sent ::= llamdaFunciones PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sent ::= retorno 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sent ::= mensaje 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sent ::= imprimir 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sent ::= detener 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sent ::= mientras 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sent ::= para 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sent ::= seleccionar 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sent ::= si 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sent ::= asignarvec 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent ::= declararvec 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sent ::= asignarvar PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent ::= declararvar PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lsen ::= sent 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
          padre=CrearHoja(ConstantesCJS.sen,"");
          padre=AddHijo(padre,nodo);
          RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lsen",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lsen ::= lsen sent 
            {
              NodoArbol RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol ls = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol s = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            ls=AddHijo(ls,s);
            RESULT=ls;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lsen",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funcionesVector ::= EID LLAVEIZQ logica LLAVEDER 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                    padre=CrearHoja(ConstantesCJS.valorvec,"");
                    padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                    padre=AddHijo(padre,l);
                    RESULT=padre;
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcionesVector ::= EID PUNTO ATEXTO PARIZQ PARDER 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		
                    RESULT=CrearHoja(ConstantesCJS.atextov,eid);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funcionesVector ::= EID PUNTO CONTEO 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                    RESULT=CrearHoja(ConstantesCJS.conteov,eid);
                
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignarvec ::= EID DOSPUNTOS LLAVEIZQ valores LLAVEDER PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol v = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
              padre=CrearHoja(ConstantesCJS.asignarvar,"");
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
              padre=AddHijo(padre,v);
              RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvec",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // asignarvec ::= EID LLAVEIZQ logica LLAVEDER DOSPUNTOS logica PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l1 = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
                padre=CrearHoja(ConstantesCJS.asignarvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,l1);
                RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvec",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // valores ::= logica 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
              padre=CrearHoja(ConstantesCJS.valores,"");
              padre=AddHijo(padre,l);
              RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valores",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // valores ::= valores COMA logica 
            {
              NodoArbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol v = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
              v=AddHijo(v,l);
              RESULT=v;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valores",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declararvec ::= DIMV EID LLAVEIZQ logica LLAVEDER DOSPUNTOS LLAVEIZQ valores LLAVEDER PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-8)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol v = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                padre=CrearHoja(ConstantesCJS.declararvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                padre=AddHijo(padre,v);
                RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-9)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declararvec ::= DIMV EID DOSPUNTOS LLAVEIZQ valores LLAVEDER PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol v = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                padre=CrearHoja(ConstantesCJS.declararvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,v);
                RESULT=padre;  

            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declararvec ::= DIMV EID LLAVEIZQ logica LLAVEDER PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		
                padre=CrearHoja(ConstantesCJS.declararvec,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // asignarvar ::= EID DOSPUNTOS logica 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
              padre=CrearHoja(ConstantesCJS.asignarvar,"");
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
              padre=AddHijo(padre,l);
              RESULT=padre;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvar",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declararvar ::= DIMV EID 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
              padre=CrearHoja(ConstantesCJS.declararvar,"");
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
              padre=AddHijo(padre,CrearHoja(ConstantesCJS.logica,""));
              RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvar",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declararvar ::= DIMV EID DOSPUNTOS logica 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
                padre=CrearHoja(ConstantesCJS.declararvar,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
                padre=AddHijo(padre,l);
                RESULT=padre;
            
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvar",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros ::= EID 
            {
              NodoArbol RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            padre=CrearHoja(ConstantesCJS.parametros,"");
            padre=AddHijo(padre,CrearHoja(ConstantesCJS.eid,eid));
            RESULT=padre;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("parametros",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros ::= parametros COMA EID 
            {
              NodoArbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).right;
		NodoArbol p = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)).value;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		String eid = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            p=AddHijo(p,CrearHoja(ConstantesCJS.eid,eid));
            RESULT=p;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("parametros",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funciones ::= FUNCION EID PARIZQ parametros PARDER LLAVEIZQ lsen LLAVEDER 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).right;
		NodoArbol pa = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol sen = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
            padre=CrearHoja(ConstantesCJS.funcion,text);
            padre=AddHijo(padre,pa);
            padre=AddHijo(padre,sen);
            RESULT=padre;

          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funciones",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // funciones ::= FUNCION EID PARIZQ PARDER LLAVEIZQ lsen LLAVEDER 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)).value;
		int senleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int senright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol sen = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		
            padre=CrearHoja(ConstantesCJS.funcion,text);
            padre=AddHijo(padre,CrearHoja(ConstantesCJS.parametros,""));
            padre=AddHijo(padre,sen);
            RESULT=padre;

          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funciones",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= error PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCJS.error,"");
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= valorchtml 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT = nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo ::= documento PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= mensaje 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= imprimir 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= funciones 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= llamdaFunciones PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= asignarvec 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= declararvec 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= asignarvar PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= declararvar PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT=nodo;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcuerpo ::= cuerpo 
            {
              NodoArbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            padre=CrearHoja(ConstantesCJS.cuerpo,"");
            padre=AddHijo(padre,c);
            RESULT=padre;
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lcuerpo ::= lcuerpo cuerpo 
            {
              NodoArbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol l = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            l=AddHijo(l,c);
            RESULT=l;            
          
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lcuerpo 
            {
              NodoArbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.peek()).value;
		
            System.out.println("Gramatica corecta");
            raiz=c;
            RESULT=raiz;
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		NodoArbol start_val = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT = start_val;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCJS$parser.done_parsing();
          return CUP$parserCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

