
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Feb 17 01:15:20 CST 2018
//----------------------------------------------------

package Analizador.CJS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Feb 17 01:15:20 CST 2018
  */
public class parserCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCJS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\031\011\000" +
    "\002\031\012\000\002\032\005\000\002\032\003\000\002" +
    "\005\006\000\002\005\004\000\002\006\005\000\002\007" +
    "\010\000\002\007\011\000\002\011\005\000\002\011\003" +
    "\000\002\010\011\000\002\012\005\000\002\012\007\000" +
    "\002\012\006\000\002\033\004\000\002\033\003\000\002" +
    "\034\004\000\002\034\004\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\013\011\000\002\013" +
    "\015\000\002\014\011\000\002\014\012\000\002\015\004" +
    "\000\002\015\003\000\002\016\006\000\002\017\005\000" +
    "\002\020\015\000\002\021\003\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\011\000\002\024" +
    "\004\000\002\027\005\000\002\025\006\000\002\026\006" +
    "\000\002\030\005\000\002\030\006\000\002\035\005\000" +
    "\002\035\005\000\002\035\004\000\002\035\005\000\002" +
    "\035\003\000\002\036\005\000\002\036\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\004\000\002\040" +
    "\004\000\002\040\005\000\002\040\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\042\005\000\002\043\005\000\002\043\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\045\006\000\002\046\010\000\002\047\003\000\002" +
    "\047\003\000\002\050\010\000\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\010\004\010\020\015\062\011\001\002\000" +
    "\004\051\352\001\002\000\004\002\351\001\002\000\012" +
    "\002\ufffc\004\ufffc\020\ufffc\062\ufffc\001\002\000\012\002" +
    "\000\004\010\020\015\062\011\001\002\000\004\062\336" +
    "\001\002\000\004\053\111\001\002\000\004\051\335\001" +
    "\002\000\012\002\ufffa\004\ufffa\020\ufffa\062\ufffa\001\002" +
    "\000\012\002\ufffe\004\ufffe\020\ufffe\062\ufffe\001\002\000" +
    "\004\062\016\001\002\000\004\053\017\001\002\000\006" +
    "\054\020\062\022\001\002\000\004\055\332\001\002\000" +
    "\006\052\023\054\024\001\002\000\006\052\ufff6\054\ufff6" +
    "\001\002\000\004\062\331\001\002\000\004\055\025\001" +
    "\002\000\030\004\010\007\046\011\034\014\042\015\054" +
    "\016\053\017\037\021\045\022\060\023\040\062\043\001" +
    "\002\000\004\051\330\001\002\000\004\051\327\001\002" +
    "\000\036\004\uffe2\007\uffe2\011\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\056\uffe2\062\uffe2\001\002\000\004\051\326\001\002\000" +
    "\036\004\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\056" +
    "\uffe3\062\uffe3\001\002\000\004\051\325\001\002\000\004" +
    "\053\304\001\002\000\036\004\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\056\uffdf\062\uffdf\001\002\000\036\004" +
    "\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\056\uffe1\062" +
    "\uffe1\001\002\000\004\053\301\001\002\000\004\057\255" +
    "\001\002\000\036\004\uffde\007\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde" +
    "\023\uffde\056\uffde\062\uffde\001\002\000\004\053\232\001" +
    "\002\000\012\050\223\053\111\055\222\057\221\001\002" +
    "\000\036\004\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\056\uffe5\062\uffe5\001\002\000\026\023\040\047\065\053" +
    "\067\060\077\061\072\062\076\063\071\064\063\065\101" +
    "\066\102\001\002\000\004\053\205\001\002\000\036\004" +
    "\uffe6\007\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\056\uffe6\062" +
    "\uffe6\001\002\000\036\004\uffdd\007\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\056\uffdd\062\uffdd\001\002\000\032\004\010" +
    "\007\046\011\034\014\042\015\054\016\053\017\037\021" +
    "\045\022\060\023\040\056\204\062\043\001\002\000\036" +
    "\004\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\056\uffe0" +
    "\062\uffe0\001\002\000\004\051\203\001\002\000\004\053" +
    "\174\001\002\000\036\004\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\056\uffe4\062\uffe4\001\002\000\004\051\173" +
    "\001\002\000\036\004\uffe9\007\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\056\uffe9\062\uffe9\001\002\000\004\053\061\001" +
    "\002\000\026\023\040\047\065\053\067\060\077\061\072" +
    "\062\076\063\071\064\063\065\101\066\102\001\002\000" +
    "\056\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\056\uffa6\001\002\000\056\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\056\uffac\001\002\000\056\027\uffa5\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050" +
    "\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\056\uffa5\001\002" +
    "\000\026\023\040\047\065\053\067\060\077\061\072\062" +
    "\076\063\071\064\063\065\101\066\102\001\002\000\056" +
    "\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\056\uffa4\001\002\000\026\023\040\047\065" +
    "\053\067\060\077\061\072\062\076\063\071\064\063\065" +
    "\101\066\102\001\002\000\056\027\uffa7\030\uffa7\031\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\056\uffa7\001" +
    "\002\000\056\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\056\uffab\001\002\000\056\027" +
    "\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\056\uffad\001\002\000\056\027\156\030\152\031" +
    "\150\032\155\033\154\034\153\035\151\036\160\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\056\uffbf" +
    "\001\002\000\056\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf\001\002\000\036" +
    "\037\137\040\140\041\141\042\142\043\136\044\143\045" +
    "\uffc1\046\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\056\uffc1\001\002\000\062\027\uffa8\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\111\054\uffa8\055\112\056\uffa8" +
    "\057\110\001\002\000\056\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\056\uffae\001\002" +
    "\000\010\045\104\046\105\054\103\001\002\000\056\027" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\056\uffa9\001\002\000\056\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa" +
    "\001\002\000\036\004\uffc8\007\uffc8\011\uffc8\012\uffc8\013" +
    "\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\056\uffc8\062\uffc8\001\002\000\026\023\040\047" +
    "\065\053\067\060\077\061\072\062\076\063\071\064\063" +
    "\065\101\066\102\001\002\000\026\023\040\047\065\053" +
    "\067\060\077\061\072\062\076\063\071\064\063\065\101" +
    "\066\102\001\002\000\022\045\104\046\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\056\uffc5\001\002\000\022" +
    "\045\uffc4\046\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\056\uffc4\001\002\000\010\005\123\006\125\026\126" +
    "\001\002\000\030\023\040\047\065\053\067\054\115\060" +
    "\077\061\072\062\076\063\071\064\063\065\101\066\102" +
    "\001\002\000\026\023\040\047\065\053\067\060\077\061" +
    "\072\062\076\063\071\064\063\065\101\066\102\001\002" +
    "\000\010\045\104\046\105\056\114\001\002\000\056\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb" +
    "\054\uffeb\056\uffeb\001\002\000\056\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046" +
    "\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\056\uffc7" +
    "\001\002\000\006\052\120\054\121\001\002\000\014\045" +
    "\104\046\105\052\uffef\054\uffef\056\uffef\001\002\000\026" +
    "\023\040\047\065\053\067\060\077\061\072\062\076\063" +
    "\071\064\063\065\101\066\102\001\002\000\056\027\uffc6" +
    "\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\056\uffc6\001\002\000\014\045\104\046\105\052\ufff0" +
    "\054\ufff0\056\ufff0\001\002\000\004\053\134\001\002\000" +
    "\056\027\uff98\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\054\uff98\056\uff98\001\002\000\056\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\056\uffed\001\002\000\004\053\127\001\002\000\026\023" +
    "\040\047\065\053\067\060\077\061\072\062\076\063\071" +
    "\064\063\065\101\066\102\001\002\000\010\045\104\046" +
    "\105\052\131\001\002\000\026\023\040\047\065\053\067" +
    "\060\077\061\072\062\076\063\071\064\063\065\101\066" +
    "\102\001\002\000\010\045\104\046\105\053\133\001\002" +
    "\000\060\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034" +
    "\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\056\uff99\057\uff99\001\002\000\004" +
    "\054\135\001\002\000\056\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\056\uffec\001\002" +
    "\000\024\023\uffbb\053\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\064\uffbb\065\uffbb\066\uffbb\001\002\000\024\023\uffbe" +
    "\053\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065" +
    "\uffbe\066\uffbe\001\002\000\024\023\uffbd\053\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\001" +
    "\002\000\024\023\uffbc\053\uffbc\060\uffbc\061\uffbc\062\uffbc" +
    "\063\uffbc\064\uffbc\065\uffbc\066\uffbc\001\002\000\024\023" +
    "\uffba\053\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba" +
    "\065\uffba\066\uffba\001\002\000\024\023\uffb9\053\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9" +
    "\001\002\000\024\023\040\053\146\060\077\061\072\062" +
    "\076\063\071\064\063\065\101\066\102\001\002\000\056" +
    "\027\156\030\152\031\150\032\155\033\154\034\153\035" +
    "\151\036\160\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\056\uffc0\001\002\000\024\023\040\053\146" +
    "\060\077\061\072\062\076\063\071\064\063\065\101\066" +
    "\102\001\002\000\024\027\156\030\152\031\150\032\155" +
    "\033\154\034\153\035\151\036\160\054\157\001\002\000" +
    "\024\023\040\053\146\060\077\061\072\062\076\063\071" +
    "\064\063\065\101\066\102\001\002\000\056\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\056\uffb2\001\002\000\024\023\040\053\146\060\077\061" +
    "\072\062\076\063\071\064\063\065\101\066\102\001\002" +
    "\000\024\023\040\053\146\060\077\061\072\062\076\063" +
    "\071\064\063\065\101\066\102\001\002\000\024\023\040" +
    "\053\146\060\077\061\072\062\076\063\071\064\063\065" +
    "\101\066\102\001\002\000\024\023\040\053\146\060\077" +
    "\061\072\062\076\063\071\064\063\065\101\066\102\001" +
    "\002\000\024\023\040\053\146\060\077\061\072\062\076" +
    "\063\071\064\063\065\101\066\102\001\002\000\056\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0" +
    "\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\056\uffb0\001\002\000\056\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\056\uffb1" +
    "\001\002\000\056\027\uffb8\030\uffb8\031\150\032\155\033" +
    "\154\034\153\035\151\036\160\037\uffb8\040\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\056\uffb8\001\002\000\056" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\153\035" +
    "\151\036\160\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\052\uffb6\053" +
    "\uffb6\054\uffb6\056\uffb6\001\002\000\056\027\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\153\035\151\036\160\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\056" +
    "\uffb4\001\002\000\056\027\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\034\153\035\151\036\160\037\uffb3\040\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3" +
    "\051\uffb3\052\uffb3\053\uffb3\054\uffb3\056\uffb3\001\002\000" +
    "\056\027\uffb7\030\uffb7\031\150\032\155\033\154\034\153" +
    "\035\151\036\160\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\056\uffb7\001\002\000\056\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\153\035\151\036\160" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\056\uffb5\001\002\000\044\027\156\030\152\031\150\032" +
    "\155\033\154\034\153\035\151\036\160\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\054" +
    "\157\001\002\000\010\045\104\046\105\054\171\001\002" +
    "\000\022\045\uffc2\046\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\056\uffc2\001\002\000\022\045\uffc3\046\uffc3" +
    "\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\056\uffc3\001" +
    "\002\000\036\004\uffe7\007\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\056\uffe7\062\uffe7\001\002\000\026\023\040\047\065" +
    "\053\067\060\077\061\072\062\076\063\071\064\063\065" +
    "\101\066\102\001\002\000\010\045\104\046\105\054\176" +
    "\001\002\000\004\055\177\001\002\000\030\004\010\007" +
    "\046\011\034\014\042\015\054\016\053\017\037\021\045" +
    "\022\060\023\040\062\043\001\002\000\032\004\010\007" +
    "\046\011\034\014\042\015\054\016\053\017\037\021\045" +
    "\022\060\023\040\056\201\062\043\001\002\000\036\004" +
    "\uffcc\007\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\056\uffcc\062" +
    "\uffcc\001\002\000\036\004\uffea\007\uffea\011\uffea\012\uffea" +
    "\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022" +
    "\uffea\023\uffea\056\uffea\062\uffea\001\002\000\036\004\uffcb" +
    "\007\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\021\uffcb\022\uffcb\023\uffcb\056\uffcb\062\uffcb" +
    "\001\002\000\014\002\ufff8\004\ufff8\020\ufff8\054\ufff8\062" +
    "\ufff8\001\002\000\026\023\040\047\065\053\067\060\077" +
    "\061\072\062\076\063\071\064\063\065\101\066\102\001" +
    "\002\000\010\045\104\046\105\054\207\001\002\000\004" +
    "\055\210\001\002\000\030\004\010\007\046\011\034\014" +
    "\042\015\054\016\053\017\037\021\045\022\060\023\040" +
    "\062\043\001\002\000\032\004\010\007\046\011\034\014" +
    "\042\015\054\016\053\017\037\021\045\022\060\023\040" +
    "\056\212\062\043\001\002\000\040\004\uffd9\007\uffd9\010" +
    "\213\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\021\uffd9\022\uffd9\023\uffd9\056\uffd9\062\uffd9\001" +
    "\002\000\004\055\214\001\002\000\030\004\010\007\046" +
    "\011\034\014\042\015\054\016\053\017\037\021\045\022" +
    "\060\023\040\062\043\001\002\000\032\004\010\007\046" +
    "\011\034\014\042\015\054\016\053\017\037\021\045\022" +
    "\060\023\040\056\216\062\043\001\002\000\036\004\uffd8" +
    "\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016" +
    "\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8\056\uffd8\062\uffd8" +
    "\001\002\000\010\045\104\046\105\051\220\001\002\000" +
    "\036\004\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca\056" +
    "\uffca\062\uffca\001\002\000\004\026\126\001\002\000\026" +
    "\023\040\047\065\053\067\060\077\061\072\062\076\063" +
    "\071\064\063\065\101\066\102\001\002\000\026\023\040" +
    "\047\065\053\067\060\077\061\072\062\076\063\071\064" +
    "\063\065\101\066\102\001\002\000\010\045\104\046\105" +
    "\051\ufff3\001\002\000\010\045\104\046\105\056\226\001" +
    "\002\000\004\050\227\001\002\000\026\023\040\047\065" +
    "\053\067\060\077\061\072\062\076\063\071\064\063\065" +
    "\101\066\102\001\002\000\010\045\104\046\105\051\231" +
    "\001\002\000\036\004\uffee\007\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\021\uffee\022\uffee" +
    "\023\uffee\056\uffee\062\uffee\001\002\000\006\004\233\062" +
    "\237\001\002\000\004\062\252\001\002\000\004\051\uffcf" +
    "\001\002\000\004\051\240\001\002\000\004\051\uffd0\001" +
    "\002\000\004\050\223\001\002\000\026\023\040\047\065" +
    "\053\067\060\077\061\072\062\076\063\071\064\063\065" +
    "\101\066\102\001\002\000\010\045\104\046\105\051\242" +
    "\001\002\000\006\035\243\036\244\001\002\000\004\054" +
    "\uffce\001\002\000\004\054\uffcd\001\002\000\004\054\246" +
    "\001\002\000\004\055\247\001\002\000\030\004\010\007" +
    "\046\011\034\014\042\015\054\016\053\017\037\021\045" +
    "\022\060\023\040\062\043\001\002\000\032\004\010\007" +
    "\046\011\034\014\042\015\054\016\053\017\037\021\045" +
    "\022\060\023\040\056\251\062\043\001\002\000\036\004" +
    "\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1" +
    "\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1\056\uffd1\062" +
    "\uffd1\001\002\000\006\050\253\051\ufff4\001\002\000\026" +
    "\023\040\047\065\053\067\060\077\061\072\062\076\063" +
    "\071\064\063\065\101\066\102\001\002\000\010\045\104" +
    "\046\105\051\ufff5\001\002\000\010\024\263\025\256\026" +
    "\126\001\002\000\004\053\276\001\002\000\060\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\056\uffa3\057\274\001\002\000\060\027\uff9e\030\uff9e" +
    "\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037" +
    "\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\056" +
    "\uff9e\057\uff9e\001\002\000\060\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\056\uff9f\057" +
    "\uff9f\001\002\000\060\027\uffa0\030\uffa0\031\uffa0\032\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0" +
    "\051\uffa0\052\uffa0\053\uffa0\054\uffa0\056\uffa0\057\uffa0\001" +
    "\002\000\004\053\265\001\002\000\060\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\056" +
    "\uffa1\057\uffa1\001\002\000\026\023\040\047\065\053\067" +
    "\060\077\061\072\062\076\063\071\064\063\065\101\066" +
    "\102\001\002\000\010\045\104\046\105\052\267\001\002" +
    "\000\006\020\015\062\011\001\002\000\004\054\273\001" +
    "\002\000\004\054\uff9b\001\002\000\004\054\uff9a\001\002" +
    "\000\060\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c" +
    "\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052" +
    "\uff9c\053\uff9c\054\uff9c\056\uff9c\057\uff9c\001\002\000\010" +
    "\024\263\025\256\026\126\001\002\000\060\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2" +
    "\056\uffa2\057\uffa2\001\002\000\026\023\040\047\065\053" +
    "\067\060\077\061\072\062\076\063\071\064\063\065\101" +
    "\066\102\001\002\000\010\045\104\046\105\054\300\001" +
    "\002\000\060\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d" +
    "\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\056\uff9d\057\uff9d\001\002\000" +
    "\026\023\040\047\065\053\067\060\077\061\072\062\076" +
    "\063\071\064\063\065\101\066\102\001\002\000\010\045" +
    "\104\046\105\054\303\001\002\000\036\004\uffc9\007\uffc9" +
    "\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\056\uffc9\062\uffc9\001\002" +
    "\000\026\023\040\047\065\053\067\060\077\061\072\062" +
    "\076\063\071\064\063\065\101\066\102\001\002\000\010" +
    "\045\104\046\105\054\306\001\002\000\004\055\307\001" +
    "\002\000\004\012\312\001\002\000\010\012\312\013\316" +
    "\056\317\001\002\000\010\012\uffd4\013\uffd4\056\uffd4\001" +
    "\002\000\026\023\040\047\065\053\067\060\077\061\072" +
    "\062\076\063\071\064\063\065\101\066\102\001\002\000" +
    "\010\045\104\046\105\050\314\001\002\000\030\004\010" +
    "\007\046\011\034\014\042\015\054\016\053\017\037\021" +
    "\045\022\060\023\040\062\043\001\002\000\036\004\010" +
    "\007\046\011\034\012\uffd3\013\uffd3\014\042\015\054\016" +
    "\053\017\037\021\045\022\060\023\040\056\uffd3\062\043" +
    "\001\002\000\004\050\323\001\002\000\036\004\uffd7\007" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\021\uffd7\022\uffd7\023\uffd7\056\uffd7\062\uffd7\001" +
    "\002\000\010\012\uffd5\013\uffd5\056\uffd5\001\002\000\004" +
    "\056\322\001\002\000\036\004\uffd6\007\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\056\uffd6\062\uffd6\001\002\000\030\004" +
    "\010\007\046\011\034\014\042\015\054\016\053\017\037" +
    "\021\045\022\060\023\040\062\043\001\002\000\032\004" +
    "\010\007\046\011\034\014\042\015\054\016\053\017\037" +
    "\021\045\022\060\023\040\056\uffd2\062\043\001\002\000" +
    "\036\004\uffda\007\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda\056" +
    "\uffda\062\uffda\001\002\000\036\004\uffdb\007\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\056\uffdb\062\uffdb\001\002\000\036" +
    "\004\uffe8\007\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8\056\uffe8" +
    "\062\uffe8\001\002\000\036\004\uffdc\007\uffdc\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\056\uffdc\062\uffdc\001\002\000\006\052" +
    "\ufff7\054\ufff7\001\002\000\030\004\010\007\046\011\034" +
    "\014\042\015\054\016\053\017\037\021\045\022\060\023" +
    "\040\062\043\001\002\000\032\004\010\007\046\011\034" +
    "\014\042\015\054\016\053\017\037\021\045\022\060\023" +
    "\040\056\334\062\043\001\002\000\014\002\ufff9\004\ufff9" +
    "\020\ufff9\054\ufff9\062\ufff9\001\002\000\012\002\ufffb\004" +
    "\ufffb\020\ufffb\062\ufffb\001\002\000\010\050\340\051\ufff4" +
    "\055\337\001\002\000\026\023\040\047\065\053\067\060" +
    "\077\061\072\062\076\063\071\064\063\065\101\066\102" +
    "\001\002\000\030\023\040\047\065\053\067\055\341\060" +
    "\077\061\072\062\076\063\071\064\063\065\101\066\102" +
    "\001\002\000\026\023\040\047\065\053\067\060\077\061" +
    "\072\062\076\063\071\064\063\065\101\066\102\001\002" +
    "\000\006\052\120\056\343\001\002\000\004\051\344\001" +
    "\002\000\042\002\ufff1\004\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\056\ufff1\062\ufff1\001\002\000\010" +
    "\045\104\046\105\056\346\001\002\000\004\051\347\001" +
    "\002\000\042\002\ufff2\004\ufff2\007\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\056\ufff2\062\ufff2\001\002\000\012" +
    "\002\uffff\004\uffff\020\uffff\062\uffff\001\002\000\004\002" +
    "\001\001\002\000\012\002\ufffd\004\ufffd\020\ufffd\062\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\020\002\004\003\006\004\013\005\003\007" +
    "\005\030\011\031\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\347\005\003\007" +
    "\005\030\011\031\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\026" +
    "\006\055\007\046\010\043\013\054\014\031\020\027\023" +
    "\035\024\051\025\034\026\040\027\047\030\025\033\050" +
    "\034\056\042\030\051\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\067\030\061\035\216\036\074" +
    "\040\072\041\073\042\063\051\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\026" +
    "\006\055\007\046\010\043\013\054\014\031\020\027\023" +
    "\035\024\051\025\034\026\040\027\047\030\025\034\201" +
    "\042\030\051\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\067\030" +
    "\061\035\077\036\074\040\072\041\073\042\063\051\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\067\030\061\035\171\036\074\040\072" +
    "\041\073\042\063\051\065\001\001\000\002\001\001\000" +
    "\022\012\067\030\061\035\167\036\074\040\166\041\073" +
    "\042\063\051\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\067\030\061\035\106\036" +
    "\074\040\072\041\073\042\063\051\065\001\001\000\022" +
    "\012\067\030\061\035\105\036\074\040\072\041\073\042" +
    "\063\051\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\123\001\001\000\024\011\115\012\067\030" +
    "\061\035\116\036\074\040\072\041\073\042\063\051\065" +
    "\001\001\000\022\012\067\030\061\035\112\036\074\040" +
    "\072\041\073\042\063\051\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\067\030\061\035\121\036\074" +
    "\040\072\041\073\042\063\051\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\067\030" +
    "\061\035\127\036\074\040\072\041\073\042\063\051\065" +
    "\001\001\000\002\001\001\000\022\012\067\030\061\035" +
    "\131\036\074\040\072\041\073\042\063\051\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\067\030\061\040\144\041\073\042\063" +
    "\051\065\001\001\000\002\001\001\000\016\012\067\030" +
    "\061\040\146\041\073\042\063\051\065\001\001\000\002" +
    "\001\001\000\016\012\067\030\061\040\165\041\073\042" +
    "\063\051\065\001\001\000\002\001\001\000\016\012\067" +
    "\030\061\040\164\041\073\042\063\051\065\001\001\000" +
    "\016\012\067\030\061\040\163\041\073\042\063\051\065" +
    "\001\001\000\016\012\067\030\061\040\162\041\073\042" +
    "\063\051\065\001\001\000\016\012\067\030\061\040\161" +
    "\041\073\042\063\051\065\001\001\000\016\012\067\030" +
    "\061\040\160\041\073\042\063\051\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\067\030\061\035\174\036\074\040\072\041\073\042" +
    "\063\051\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\026\006\055\007\046\010\043\013\054\014" +
    "\031\020\027\023\035\024\051\025\034\026\040\027\047" +
    "\030\025\033\177\034\056\042\030\051\032\001\001\000" +
    "\042\005\026\006\055\007\046\010\043\013\054\014\031" +
    "\020\027\023\035\024\051\025\034\026\040\027\047\030" +
    "\025\034\201\042\030\051\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\067\030\061\035\205\036\074\040\072\041\073" +
    "\042\063\051\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\005\026\006\055\007\046\010\043\013\054" +
    "\014\031\020\027\023\035\024\051\025\034\026\040\027" +
    "\047\030\025\033\210\034\056\042\030\051\032\001\001" +
    "\000\042\005\026\006\055\007\046\010\043\013\054\014" +
    "\031\020\027\023\035\024\051\025\034\026\040\027\047" +
    "\030\025\034\201\042\030\051\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\005\026\006\055\007\046" +
    "\010\043\013\054\014\031\020\027\023\035\024\051\025" +
    "\034\026\040\027\047\030\025\033\214\034\056\042\030" +
    "\051\032\001\001\000\042\005\026\006\055\007\046\010" +
    "\043\013\054\014\031\020\027\023\035\024\051\025\034" +
    "\026\040\027\047\030\025\034\201\042\030\051\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\123\001\001\000\022\012\067\030\061\035" +
    "\224\036\074\040\072\041\073\042\063\051\065\001\001" +
    "\000\022\012\067\030\061\035\223\036\074\040\072\041" +
    "\073\042\063\051\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\067\030\061\035" +
    "\227\036\074\040\072\041\073\042\063\051\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\235\006" +
    "\233\021\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\067\030\061\035\240\036\074\040\072\041\073" +
    "\042\063\051\065\001\001\000\002\001\001\000\004\022" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\026\006\055\007" +
    "\046\010\043\013\054\014\031\020\027\023\035\024\051" +
    "\025\034\026\040\027\047\030\025\033\247\034\056\042" +
    "\030\051\032\001\001\000\042\005\026\006\055\007\046" +
    "\010\043\013\054\014\031\020\027\023\035\024\051\025" +
    "\034\026\040\027\047\030\025\034\201\042\030\051\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\067\030\061\035\253\036\074\040\072\041\073\042\063" +
    "\051\065\001\001\000\002\001\001\000\014\043\256\044" +
    "\263\045\261\046\260\050\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\067\030\061\035\265\036\074\040\072\041\073\042" +
    "\063\051\065\001\001\000\002\001\001\000\010\030\270" +
    "\031\271\047\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\044\274" +
    "\045\261\046\260\050\257\001\001\000\002\001\001\000" +
    "\022\012\067\030\061\035\276\036\074\040\072\041\073" +
    "\042\063\051\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\012\067\030\061\035\301\036\074\040\072" +
    "\041\073\042\063\051\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\067\030\061\035\304\036\074" +
    "\040\072\041\073\042\063\051\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\307\016\310\001\001" +
    "\000\006\016\317\017\320\001\001\000\002\001\001\000" +
    "\022\012\067\030\061\035\312\036\074\040\072\041\073" +
    "\042\063\051\065\001\001\000\002\001\001\000\044\005" +
    "\026\006\055\007\046\010\043\013\054\014\031\020\027" +
    "\023\035\024\051\025\034\026\040\027\047\030\025\033" +
    "\314\034\056\042\030\051\032\001\001\000\042\005\026" +
    "\006\055\007\046\010\043\013\054\014\031\020\027\023" +
    "\035\024\051\025\034\026\040\027\047\030\025\034\201" +
    "\042\030\051\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\026\006\055\007\046\010\043\013\054\014" +
    "\031\020\027\023\035\024\051\025\034\026\040\027\047" +
    "\030\025\033\323\034\056\042\030\051\032\001\001\000" +
    "\042\005\026\006\055\007\046\010\043\013\054\014\031" +
    "\020\027\023\035\024\051\025\034\026\040\027\047\030" +
    "\025\034\201\042\030\051\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\026\006\055\007\046\010\043" +
    "\013\054\014\031\020\027\023\035\024\051\025\034\026" +
    "\040\027\047\030\025\033\332\034\056\042\030\051\032" +
    "\001\001\000\042\005\026\006\055\007\046\010\043\013" +
    "\054\014\031\020\027\023\035\024\051\025\034\026\040" +
    "\027\047\030\025\034\201\042\030\051\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\067\030\061\035\344\036\074\040\072\041\073\042" +
    "\063\051\065\001\001\000\022\012\067\030\061\035\253" +
    "\036\074\040\072\041\073\042\063\051\065\001\001\000" +
    "\024\011\341\012\067\030\061\035\116\036\074\040\072" +
    "\041\073\042\063\051\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());
         errorSin=errorSin+"Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "+s.value + " no reconocido."+"\n";
         System.err.println("Error de Sintaxis---a");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());   
         System.err.println("Error de Sintaxis----b");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCJS$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }


  private final parserCJS parser;

  /** Constructor */
  CUP$parserCJS$actions(parserCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCJS$do_action(
    int                        CUP$parserCJS$act_num,
    java_cup.runtime.lr_parser CUP$parserCJS$parser,
    java.util.Stack            CUP$parserCJS$stack,
    int                        CUP$parserCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCJS$result;

      /* select the action based on the action number */
      switch (CUP$parserCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // valorchtml ::= EID PUNTO setelem 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valorchtml",39, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // setelem ::= SETELEMENTO PARIZQ logica COMA logica PARIZQ 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("setelem",38, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // obs0 ::= funciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obs0",37, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // obs0 ::= llamdaFunciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obs0",37, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // observador ::= OBSERVADOR PARIZQ logica COMA obs0 PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("observador",36, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // obtener ::= OBTENER PARIZQ logica PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obtener",35, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // evento ::= setelem 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // evento ::= observador 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // evento ::= obtener 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // listaEventos ::= evento 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("listaEventos",33, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // listaEventos ::= listaEventos PUNTO evento 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("listaEventos",33, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // eventos ::= DOCUMETO PUNTO listaEventos 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("eventos",32, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= valorchtml 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= eventos 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= llamdaFunciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor ::= funcionesVector 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valor ::= EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor ::= EDATE 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor ::= EDATETIME 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor ::= ENUMERO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor ::= ECADENA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valor ::= EFALSO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= EVERDARERO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp ::= valor 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= PARIZQ exp PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp ::= exp DECREMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exp ::= exp AUMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // exp ::= exp POT exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp ::= exp MOD exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= exp DIVI exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= exp POR exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= exp MENOS exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= exp MAS exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // op ::= MAYOTIGUAL 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // op ::= MAYOR 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op ::= MENORIGUAL 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op ::= MENOR 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op ::= DIFERENTE 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op ::= IGUALIGUAL 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relacional ::= exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("relacional",28, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relacional ::= relacional op exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("relacional",28, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logica ::= relacional 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logica ::= PARIZQ logica PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logica ::= NOT logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // logica ::= logica AND logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // logica ::= logica OR logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // llamdaFunciones ::= EID PARIZQ lvalores PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("llamdaFunciones",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamdaFunciones ::= EID PARIZQ PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("llamdaFunciones",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // mensaje ::= MENSAJE PARIZQ logica PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("mensaje",20, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // imprimir ::= IMPRIMIR PARIZQ logica PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("imprimir",19, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // retorno ::= RETORNAR logica PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("retorno",21, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // detener ::= DETENER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("detener",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // mientras ::= MIENTRAS PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("mientras",17, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // para1 ::= DECREMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para1",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // para1 ::= AUMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para1",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // para0 ::= asignarvar 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para0",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // para0 ::= declararvar 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para0",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // para ::= PARA PARIZQ para0 PUNTOCOMA logica PUNTOCOMA para1 PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para",14, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // defecto ::= DEFECTO DOSPUNTOS lsen 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("defecto",13, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // caso ::= CASO logica DOSPUNTOS lsen 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("caso",12, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // lcaso ::= caso 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcaso",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lcaso ::= lcaso caso 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcaso",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // seleccionar ::= SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso defecto LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("seleccionar",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // seleccionar ::= SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("seleccionar",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // si ::= SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER SINO LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("si",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // si ::= SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("si",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sent ::= valorchtml PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sent ::= eventos PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sent ::= llamdaFunciones PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent ::= retorno 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sent ::= mensaje 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent ::= imprimir 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sent ::= detener 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sent ::= mientras 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sent ::= para 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sent ::= seleccionar 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sent ::= si 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sent ::= asignarvec 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sent ::= declararvec 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sent ::= asignarvar PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sent ::= declararvar PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lsen ::= sent 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lsen",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lsen ::= lsen sent 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lsen",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funcionesVector ::= EID LLAVEIZQ logica LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funcionesVector ::= EID PUNTO ATEXTO PARIZQ PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funcionesVector ::= EID PUNTO CONTEO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asignarvec ::= EID LLAVEIZQ logica LLAVEDER DOSPUNTOS logica PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvec",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lvalores ::= logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lvalores",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lvalores ::= lvalores COMA logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lvalores",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declararvec ::= DIMV EID DOSPUNTOS LLAVEIZQ lvalores LLAVEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declararvec ::= DIMV EID LLAVEIZQ logica LLAVEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignarvar ::= EID DOSPUNTOS logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvar",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declararvar ::= DIMV EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvar",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declararvar ::= DIMV EID DOSPUNTOS logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvar",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lparametros ::= EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lparametros",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lparametros ::= lparametros COMA EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lparametros",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funciones ::= FUNCION EID PARIZQ lparametros PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funciones",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funciones ::= FUNCION EID PARIZQ PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funciones",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= funciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= llamdaFunciones PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= declararvec 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= declararvar PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcuerpo ::= cuerpo 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lcuerpo ::= lcuerpo cuerpo 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lcuerpo 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT = start_val;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCJS$parser.done_parsing();
          return CUP$parserCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

