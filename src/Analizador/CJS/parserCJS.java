
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 20 00:16:04 CST 2018
//----------------------------------------------------

package Analizador.CJS;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 20 00:16:04 CST 2018
  */
public class parserCJS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCJS() {super();}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\004\000\002\004\004\000\002" +
    "\031\011\000\002\031\012\000\002\032\005\000\002\032" +
    "\003\000\002\005\006\000\002\005\004\000\002\006\005" +
    "\000\002\007\010\000\002\007\011\000\002\007\014\000" +
    "\002\011\005\000\002\011\003\000\002\010\011\000\002" +
    "\010\010\000\002\012\005\000\002\012\007\000\002\012" +
    "\006\000\002\033\004\000\002\033\003\000\002\034\004" +
    "\000\002\034\004\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\013\011\000" +
    "\002\013\015\000\002\014\011\000\002\014\012\000\002" +
    "\015\004\000\002\015\003\000\002\016\006\000\002\017" +
    "\005\000\002\020\015\000\002\021\003\000\002\021\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\011\000" +
    "\002\024\004\000\002\027\005\000\002\025\007\000\002" +
    "\026\007\000\002\030\005\000\002\030\006\000\002\035" +
    "\005\000\002\035\005\000\002\035\004\000\002\035\005" +
    "\000\002\035\003\000\002\036\005\000\002\036\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\040\005\000\002\040\005\000\002\040\004\000" +
    "\002\040\004\000\002\040\005\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\042\005\000\002\043\005\000\002" +
    "\043\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\045\006\000\002\046\010\000\002\047\003" +
    "\000\002\047\003\000\002\050\010\000\002\051\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\016\004\014\017\021\020\022\022\020\023" +
    "\024\062\015\001\002\000\004\051\377\001\002\000\004" +
    "\051\376\001\002\000\004\051\375\001\002\000\020\002" +
    "\ufff8\004\ufff8\017\ufff8\020\ufff8\022\ufff8\023\ufff8\062\ufff8" +
    "\001\002\000\004\002\374\001\002\000\020\002\ufff9\004" +
    "\ufff9\017\ufff9\020\ufff9\022\ufff9\023\ufff9\062\ufff9\001\002" +
    "\000\020\002\ufffc\004\ufffc\017\ufffc\020\ufffc\022\ufffc\023" +
    "\ufffc\062\ufffc\001\002\000\020\002\000\004\014\017\021" +
    "\020\022\022\020\023\024\062\015\001\002\000\004\062" +
    "\354\001\002\000\006\053\070\057\251\001\002\000\004" +
    "\051\353\001\002\000\020\002\ufffa\004\ufffa\017\ufffa\020" +
    "\ufffa\022\ufffa\023\ufffa\062\ufffa\001\002\000\004\053\347" +
    "\001\002\000\004\053\343\001\002\000\004\062\161\001" +
    "\002\000\020\002\ufffe\004\ufffe\017\ufffe\020\ufffe\022\ufffe" +
    "\023\ufffe\062\ufffe\001\002\000\004\057\025\001\002\000" +
    "\010\024\033\025\026\026\034\001\002\000\004\053\156" +
    "\001\002\000\056\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033" +
    "\uff9c\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c" +
    "\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051" +
    "\uff9c\052\uff9c\054\uff9c\056\uff9c\057\105\001\002\000\056" +
    "\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97\052\uff97\054" +
    "\uff97\056\uff97\057\uff97\001\002\000\056\027\uff98\030\uff98" +
    "\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\046\uff98\050\uff98\051\uff98\052\uff98\054\uff98\056\uff98\057" +
    "\uff98\001\002\000\056\027\uff99\030\uff99\031\uff99\032\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\050\uff99" +
    "\051\uff99\052\uff99\054\uff99\056\uff99\057\uff99\001\002\000" +
    "\004\053\146\001\002\000\004\053\036\001\002\000\056" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a" +
    "\044\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a\052\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\001\002\000\026\023\024\047\042" +
    "\053\045\060\054\061\047\062\053\063\046\064\040\065" +
    "\055\066\057\001\002\000\054\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f" +
    "\050\uff9f\051\uff9f\052\uff9f\054\uff9f\056\uff9f\001\002\000" +
    "\054\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\054\uffa5\056\uffa5\001\002\000\054\027\uff9e\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\054\uff9e\056\uff9e\001\002" +
    "\000\026\023\024\047\042\053\045\060\054\061\047\062" +
    "\053\063\046\064\040\065\055\066\057\001\002\000\054" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\035" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d\054" +
    "\uff9d\056\uff9d\001\002\000\054\027\uffa0\030\uffa0\031\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\054\uffa0\056\uffa0\001\002\000" +
    "\026\023\024\047\042\053\045\060\054\061\047\062\053" +
    "\063\046\064\040\065\055\066\057\001\002\000\054\027" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4" +
    "\056\uffa4\001\002\000\054\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6" +
    "\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050" +
    "\uffa6\051\uffa6\052\uffa6\054\uffa6\056\uffa6\001\002\000\054" +
    "\027\131\030\125\031\123\032\130\033\127\034\126\035" +
    "\124\036\133\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\uffb8\052\uffb8\054" +
    "\uffb8\056\uffb8\001\002\000\054\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\054\uffa8\056\uffa8\001\002\000" +
    "\034\037\112\040\113\041\114\042\115\043\111\044\116" +
    "\045\uffba\046\uffba\050\uffba\051\uffba\052\uffba\054\uffba\056" +
    "\uffba\001\002\000\062\027\uffa1\030\uffa1\031\uffa1\032\uffa1" +
    "\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050\uffa1" +
    "\051\uffa1\052\uffa1\053\070\054\uffa1\055\071\056\uffa1\057" +
    "\067\001\002\000\054\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\054\uffa7\056\uffa7\001\002\000\054\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\054\uffa2" +
    "\056\uffa2\001\002\000\010\045\061\046\062\052\060\001" +
    "\002\000\054\027\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\054\uffa3\056\uffa3\001\002\000\026\023\024\047" +
    "\042\053\045\060\054\061\047\062\053\063\046\064\040" +
    "\065\055\066\057\001\002\000\026\023\024\047\042\053" +
    "\045\060\054\061\047\062\053\063\046\064\040\065\055" +
    "\066\057\001\002\000\026\023\024\047\042\053\045\060" +
    "\054\061\047\062\053\063\046\064\040\065\055\066\057" +
    "\001\002\000\020\045\061\046\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\054\uffbe\056\uffbe\001\002\000\020\045\uffbd\046\uffbd" +
    "\050\uffbd\051\uffbd\052\uffbd\054\uffbd\056\uffbd\001\002\000" +
    "\010\045\061\046\062\054\066\001\002\000\056\027\uff92" +
    "\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92\036" +
    "\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92" +
    "\045\uff92\046\uff92\050\uff92\051\uff92\052\uff92\054\uff92\056" +
    "\uff92\057\uff92\001\002\000\014\005\102\006\104\024\033" +
    "\025\026\026\034\001\002\000\030\023\024\047\042\053" +
    "\045\054\074\060\054\061\047\062\053\063\046\064\040" +
    "\065\055\066\057\001\002\000\026\023\024\047\042\053" +
    "\045\060\054\061\047\062\053\063\046\064\040\065\055" +
    "\066\057\001\002\000\010\045\061\046\062\056\073\001" +
    "\002\000\054\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\051\uffe5" +
    "\052\uffe5\054\uffe5\056\uffe5\001\002\000\054\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\056\uffc0" +
    "\001\002\000\006\052\077\054\100\001\002\000\014\045" +
    "\061\046\062\052\uffea\054\uffea\056\uffea\001\002\000\026" +
    "\023\024\047\042\053\045\060\054\061\047\062\053\063" +
    "\046\064\040\065\055\066\057\001\002\000\054\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\050\uffbf\051\uffbf\052\uffbf\054\uffbf\056" +
    "\uffbf\001\002\000\014\045\061\046\062\052\uffeb\054\uffeb" +
    "\056\uffeb\001\002\000\004\053\107\001\002\000\056\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\050\uff91\051\uff91\052\uff91\054\uff91" +
    "\056\uff91\057\105\001\002\000\054\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\054\uffe7\056\uffe7\001\002" +
    "\000\010\024\033\025\026\026\034\001\002\000\056\027" +
    "\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b" +
    "\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044" +
    "\uff9b\045\uff9b\046\uff9b\050\uff9b\051\uff9b\052\uff9b\054\uff9b" +
    "\056\uff9b\057\uff9b\001\002\000\004\054\110\001\002\000" +
    "\054\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\054\uffe6\056\uffe6\001\002\000\024\023\uffb4\053\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\001\002\000\024\023\uffb7\053\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\001\002\000\024" +
    "\023\uffb6\053\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\001\002\000\024\023\uffb5\053\uffb5" +
    "\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066" +
    "\uffb5\001\002\000\024\023\uffb3\053\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000" +
    "\024\023\uffb2\053\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\001\002\000\024\023\024\053" +
    "\121\060\054\061\047\062\053\063\046\064\040\065\055" +
    "\066\057\001\002\000\054\027\131\030\125\031\123\032" +
    "\130\033\127\034\126\035\124\036\133\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\054\uffb9\056\uffb9\001\002\000\024" +
    "\023\024\053\121\060\054\061\047\062\053\063\046\064" +
    "\040\065\055\066\057\001\002\000\024\027\131\030\125" +
    "\031\123\032\130\033\127\034\126\035\124\036\133\054" +
    "\132\001\002\000\024\023\024\053\121\060\054\061\047" +
    "\062\053\063\046\064\040\065\055\066\057\001\002\000" +
    "\054\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab" +
    "\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\050\uffab\051\uffab\052\uffab" +
    "\054\uffab\056\uffab\001\002\000\024\023\024\053\121\060" +
    "\054\061\047\062\053\063\046\064\040\065\055\066\057" +
    "\001\002\000\024\023\024\053\121\060\054\061\047\062" +
    "\053\063\046\064\040\065\055\066\057\001\002\000\024" +
    "\023\024\053\121\060\054\061\047\062\053\063\046\064" +
    "\040\065\055\066\057\001\002\000\024\023\024\053\121" +
    "\060\054\061\047\062\053\063\046\064\040\065\055\066" +
    "\057\001\002\000\024\023\024\053\121\060\054\061\047" +
    "\062\053\063\046\064\040\065\055\066\057\001\002\000" +
    "\054\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9" +
    "\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9" +
    "\054\uffa9\056\uffa9\001\002\000\054\027\uffaa\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\054\uffaa\056\uffaa\001\002" +
    "\000\054\027\uffb1\030\uffb1\031\123\032\130\033\127\034" +
    "\126\035\124\036\133\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\050\uffb1\051\uffb1\052" +
    "\uffb1\054\uffb1\056\uffb1\001\002\000\054\027\uffaf\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\126\035\124\036\133\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\050\uffaf\051\uffaf\052\uffaf\054\uffaf\056\uffaf\001" +
    "\002\000\054\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\126\035\124\036\133\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051\uffad" +
    "\052\uffad\054\uffad\056\uffad\001\002\000\054\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\126\035\124\036\133" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\050\uffac\051\uffac\052\uffac\054\uffac\056\uffac" +
    "\001\002\000\054\027\uffb0\030\uffb0\031\123\032\130\033" +
    "\127\034\126\035\124\036\133\037\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\054\uffb0\056\uffb0\001\002\000\054\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\034\126\035\124\036" +
    "\133\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\050\uffae\051\uffae\052\uffae\054\uffae\056" +
    "\uffae\001\002\000\044\027\131\030\125\031\123\032\130" +
    "\033\127\034\126\035\124\036\133\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\054\132" +
    "\001\002\000\010\045\061\046\062\054\144\001\002\000" +
    "\020\045\uffbb\046\uffbb\050\uffbb\051\uffbb\052\uffbb\054\uffbb" +
    "\056\uffbb\001\002\000\020\045\uffbc\046\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\054\uffbc\056\uffbc\001\002\000\026\023\024" +
    "\047\042\053\045\060\054\061\047\062\053\063\046\064" +
    "\040\065\055\066\057\001\002\000\010\045\061\046\062" +
    "\052\150\001\002\000\006\020\022\062\154\001\002\000" +
    "\004\054\155\001\002\000\004\054\uff94\001\002\000\004" +
    "\054\uff93\001\002\000\004\053\070\001\002\000\056\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\050\uff95\051\uff95\052\uff95\054\uff95" +
    "\056\uff95\057\uff95\001\002\000\026\023\024\047\042\053" +
    "\045\060\054\061\047\062\053\063\046\064\040\065\055" +
    "\066\057\001\002\000\010\045\061\046\062\054\160\001" +
    "\002\000\056\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\050\uff96\051\uff96" +
    "\052\uff96\054\uff96\056\uff96\057\uff96\001\002\000\004\053" +
    "\162\001\002\000\006\054\163\062\165\001\002\000\004" +
    "\055\340\001\002\000\006\052\166\054\167\001\002\000" +
    "\006\052\ufff2\054\ufff2\001\002\000\004\062\337\001\002" +
    "\000\004\055\170\001\002\000\032\003\210\004\014\007" +
    "\207\011\200\014\202\015\216\016\215\017\021\021\205" +
    "\022\020\023\024\062\204\001\002\000\004\051\336\001" +
    "\002\000\004\051\335\001\002\000\040\003\uffdc\004\uffdc" +
    "\007\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\056\uffdc\062\uffdc" +
    "\001\002\000\004\051\334\001\002\000\040\003\uffdd\004" +
    "\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\056\uffdd\062" +
    "\uffdd\001\002\000\004\051\333\001\002\000\040\003\uffd9" +
    "\004\uffd9\007\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\056\uffd9" +
    "\062\uffd9\001\002\000\004\053\312\001\002\000\040\003" +
    "\uffdb\004\uffdb\007\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\056" +
    "\uffdb\062\uffdb\001\002\000\004\053\266\001\002\000\040" +
    "\003\uffd8\004\uffd8\007\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\017\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\056\uffd8\062\uffd8\001\002\000\012\050\253\053\070\055" +
    "\252\057\251\001\002\000\026\023\024\047\042\053\045" +
    "\060\054\061\047\062\053\063\046\064\040\065\055\066" +
    "\057\001\002\000\040\003\uffdf\004\uffdf\007\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\056\uffdf\062\uffdf\001\002\000\004" +
    "\053\235\001\002\000\004\051\234\001\002\000\034\003" +
    "\210\004\014\007\207\011\200\014\202\015\216\016\215" +
    "\017\021\021\205\022\020\023\024\056\233\062\204\001" +
    "\002\000\040\003\uffe0\004\uffe0\007\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\056\uffe0\062\uffe0\001\002\000\040\003\uffd7" +
    "\004\uffd7\007\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\023\uffd7\056\uffd7" +
    "\062\uffd7\001\002\000\040\003\uffda\004\uffda\007\uffda\011" +
    "\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\021\uffda\022\uffda\023\uffda\056\uffda\062\uffda\001\002\000" +
    "\004\051\232\001\002\000\004\053\223\001\002\000\040" +
    "\003\uffde\004\uffde\007\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023\uffde" +
    "\056\uffde\062\uffde\001\002\000\040\003\uffe3\004\uffe3\007" +
    "\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\021\uffe3\022\uffe3\023\uffe3\056\uffe3\062\uffe3\001" +
    "\002\000\004\051\222\001\002\000\040\003\uffe1\004\uffe1" +
    "\007\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\056\uffe1\062\uffe1" +
    "\001\002\000\026\023\024\047\042\053\045\060\054\061" +
    "\047\062\053\063\046\064\040\065\055\066\057\001\002" +
    "\000\010\045\061\046\062\054\225\001\002\000\004\055" +
    "\226\001\002\000\032\003\210\004\014\007\207\011\200" +
    "\014\202\015\216\016\215\017\021\021\205\022\020\023" +
    "\024\062\204\001\002\000\034\003\210\004\014\007\207" +
    "\011\200\014\202\015\216\016\215\017\021\021\205\022" +
    "\020\023\024\056\230\062\204\001\002\000\040\003\uffc5" +
    "\004\uffc5\007\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\056\uffc5" +
    "\062\uffc5\001\002\000\040\003\uffe4\004\uffe4\007\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\056\uffe4\062\uffe4\001\002\000" +
    "\040\003\uffc4\004\uffc4\007\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\056\uffc4\062\uffc4\001\002\000\022\002\ufff4\004\ufff4" +
    "\017\ufff4\020\ufff4\022\ufff4\023\ufff4\054\ufff4\062\ufff4\001" +
    "\002\000\040\003\uffd3\004\uffd3\007\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\056\uffd3\062\uffd3\001\002\000\026\023\024" +
    "\047\042\053\045\060\054\061\047\062\053\063\046\064" +
    "\040\065\055\066\057\001\002\000\010\045\061\046\062" +
    "\054\237\001\002\000\004\055\240\001\002\000\032\003" +
    "\210\004\014\007\207\011\200\014\202\015\216\016\215" +
    "\017\021\021\205\022\020\023\024\062\204\001\002\000" +
    "\034\003\210\004\014\007\207\011\200\014\202\015\216" +
    "\016\215\017\021\021\205\022\020\023\024\056\242\062" +
    "\204\001\002\000\042\003\uffd2\004\uffd2\007\uffd2\010\243" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\056\uffd2\062\uffd2\001\002" +
    "\000\004\055\244\001\002\000\032\003\210\004\014\007" +
    "\207\011\200\014\202\015\216\016\215\017\021\021\205" +
    "\022\020\023\024\062\204\001\002\000\034\003\210\004" +
    "\014\007\207\011\200\014\202\015\216\016\215\017\021" +
    "\021\205\022\020\023\024\056\246\062\204\001\002\000" +
    "\040\003\uffd1\004\uffd1\007\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\056\uffd1\062\uffd1\001\002\000\010\045\061\046\062" +
    "\051\250\001\002\000\040\003\uffc3\004\uffc3\007\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\056\uffc3\062\uffc3\001\002\000" +
    "\010\024\033\025\026\026\034\001\002\000\026\023\024" +
    "\047\042\053\045\060\054\061\047\062\053\063\046\064" +
    "\040\065\055\066\057\001\002\000\030\023\024\047\042" +
    "\053\045\055\254\060\054\061\047\062\053\063\046\064" +
    "\040\065\055\066\057\001\002\000\026\023\024\047\042" +
    "\053\045\060\054\061\047\062\053\063\046\064\040\065" +
    "\055\066\057\001\002\000\010\045\061\046\062\051\uffef" +
    "\001\002\000\006\052\077\056\257\001\002\000\004\051" +
    "\260\001\002\000\040\003\uffe8\004\uffe8\007\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\056\uffe8\062\uffe8\001\002\000\010" +
    "\045\061\046\062\056\262\001\002\000\004\050\263\001" +
    "\002\000\026\023\024\047\042\053\045\060\054\061\047" +
    "\062\053\063\046\064\040\065\055\066\057\001\002\000" +
    "\010\045\061\046\062\051\265\001\002\000\040\003\uffe9" +
    "\004\uffe9\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\021\uffe9\022\uffe9\023\uffe9\056\uffe9" +
    "\062\uffe9\001\002\000\006\004\267\062\273\001\002\000" +
    "\004\062\307\001\002\000\004\051\uffc8\001\002\000\004" +
    "\051\275\001\002\000\004\051\uffc9\001\002\000\004\050" +
    "\274\001\002\000\026\023\024\047\042\053\045\060\054" +
    "\061\047\062\053\063\046\064\040\065\055\066\057\001" +
    "\002\000\026\023\024\047\042\053\045\060\054\061\047" +
    "\062\053\063\046\064\040\065\055\066\057\001\002\000" +
    "\010\045\061\046\062\051\277\001\002\000\006\035\300" +
    "\036\301\001\002\000\004\054\uffc7\001\002\000\004\054" +
    "\uffc6\001\002\000\004\054\303\001\002\000\004\055\304" +
    "\001\002\000\032\003\210\004\014\007\207\011\200\014" +
    "\202\015\216\016\215\017\021\021\205\022\020\023\024" +
    "\062\204\001\002\000\034\003\210\004\014\007\207\011" +
    "\200\014\202\015\216\016\215\017\021\021\205\022\020" +
    "\023\024\056\306\062\204\001\002\000\040\003\uffca\004" +
    "\uffca\007\uffca\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca\056\uffca\062" +
    "\uffca\001\002\000\006\050\310\051\ufff0\001\002\000\026" +
    "\023\024\047\042\053\045\060\054\061\047\062\053\063" +
    "\046\064\040\065\055\066\057\001\002\000\010\045\061" +
    "\046\062\051\ufff1\001\002\000\026\023\024\047\042\053" +
    "\045\060\054\061\047\062\053\063\046\064\040\065\055" +
    "\066\057\001\002\000\010\045\061\046\062\054\314\001" +
    "\002\000\004\055\315\001\002\000\004\012\320\001\002" +
    "\000\010\012\320\013\325\056\324\001\002\000\010\012" +
    "\uffcd\013\uffcd\056\uffcd\001\002\000\026\023\024\047\042" +
    "\053\045\060\054\061\047\062\053\063\046\064\040\065" +
    "\055\066\057\001\002\000\010\045\061\046\062\050\322" +
    "\001\002\000\032\003\210\004\014\007\207\011\200\014" +
    "\202\015\216\016\215\017\021\021\205\022\020\023\024" +
    "\062\204\001\002\000\040\003\210\004\014\007\207\011" +
    "\200\012\uffcc\013\uffcc\014\202\015\216\016\215\017\021" +
    "\021\205\022\020\023\024\056\uffcc\062\204\001\002\000" +
    "\040\003\uffd0\004\uffd0\007\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\056\uffd0\062\uffd0\001\002\000\004\050\331\001\002" +
    "\000\010\012\uffce\013\uffce\056\uffce\001\002\000\004\056" +
    "\330\001\002\000\040\003\uffcf\004\uffcf\007\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\056\uffcf\062\uffcf\001\002\000\032" +
    "\003\210\004\014\007\207\011\200\014\202\015\216\016" +
    "\215\017\021\021\205\022\020\023\024\062\204\001\002" +
    "\000\034\003\210\004\014\007\207\011\200\014\202\015" +
    "\216\016\215\017\021\021\205\022\020\023\024\056\uffcb" +
    "\062\204\001\002\000\040\003\uffd4\004\uffd4\007\uffd4\011" +
    "\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\021\uffd4\022\uffd4\023\uffd4\056\uffd4\062\uffd4\001\002\000" +
    "\040\003\uffd5\004\uffd5\007\uffd5\011\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\056\uffd5\062\uffd5\001\002\000\040\003\uffd6\004\uffd6" +
    "\007\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\056\uffd6\062\uffd6" +
    "\001\002\000\040\003\uffe2\004\uffe2\007\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\056\uffe2\062\uffe2\001\002\000\006\052" +
    "\ufff3\054\ufff3\001\002\000\032\003\210\004\014\007\207" +
    "\011\200\014\202\015\216\016\215\017\021\021\205\022" +
    "\020\023\024\062\204\001\002\000\034\003\210\004\014" +
    "\007\207\011\200\014\202\015\216\016\215\017\021\021" +
    "\205\022\020\023\024\056\342\062\204\001\002\000\022" +
    "\002\ufff5\004\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\054" +
    "\ufff5\062\ufff5\001\002\000\026\023\024\047\042\053\045" +
    "\060\054\061\047\062\053\063\046\064\040\065\055\066" +
    "\057\001\002\000\010\045\061\046\062\054\345\001\002" +
    "\000\004\051\346\001\002\000\044\002\uffc2\003\uffc2\004" +
    "\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\056" +
    "\uffc2\062\uffc2\001\002\000\026\023\024\047\042\053\045" +
    "\060\054\061\047\062\053\063\046\064\040\065\055\066" +
    "\057\001\002\000\010\045\061\046\062\054\351\001\002" +
    "\000\004\051\352\001\002\000\044\002\uffc1\003\uffc1\004" +
    "\uffc1\007\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\056" +
    "\uffc1\062\uffc1\001\002\000\020\002\ufffb\004\ufffb\017\ufffb" +
    "\020\ufffb\022\ufffb\023\ufffb\062\ufffb\001\002\000\010\050" +
    "\356\051\ufff0\055\355\001\002\000\026\023\024\047\042" +
    "\053\045\060\054\061\047\062\053\063\046\064\040\065" +
    "\055\066\057\001\002\000\030\023\024\047\042\053\045" +
    "\055\357\060\054\061\047\062\053\063\046\064\040\065" +
    "\055\066\057\001\002\000\026\023\024\047\042\053\045" +
    "\060\054\061\047\062\053\063\046\064\040\065\055\066" +
    "\057\001\002\000\006\052\077\056\361\001\002\000\004" +
    "\051\362\001\002\000\044\002\uffed\003\uffed\004\uffed\007" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\056\uffed\062" +
    "\uffed\001\002\000\010\045\061\046\062\056\364\001\002" +
    "\000\006\050\365\051\366\001\002\000\004\055\367\001" +
    "\002\000\044\002\uffee\003\uffee\004\uffee\007\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\056\uffee\062\uffee\001\002" +
    "\000\026\023\024\047\042\053\045\060\054\061\047\062" +
    "\053\063\046\064\040\065\055\066\057\001\002\000\006" +
    "\052\077\056\371\001\002\000\004\051\372\001\002\000" +
    "\044\002\uffec\003\uffec\004\uffec\007\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\023\uffec\056\uffec\062\uffec\001\002\000\020" +
    "\002\uffff\004\uffff\017\uffff\020\uffff\022\uffff\023\uffff\062" +
    "\uffff\001\002\000\004\002\001\001\002\000\020\002\ufffd" +
    "\004\ufffd\017\ufffd\020\ufffd\022\ufffd\023\ufffd\062\ufffd\001" +
    "\002\000\020\002\ufff6\004\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\023\ufff6\062\ufff6\001\002\000\020\002\ufff7\004\ufff7\017" +
    "\ufff7\020\ufff7\022\ufff7\023\ufff7\062\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\030\002\007\003\012\004\022\005\005\007" +
    "\011\025\010\026\006\030\015\031\016\042\004\051\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\372\005\005\007\011\025" +
    "\010\026\006\030\015\031\016\042\004\051\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\043" +
    "\026\044\034\045\031\046\030\050\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\043\030\036\035\055\036" +
    "\051\040\047\041\050\042\040\051\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\043\030\036\035\144\036\051\040\047\041\050\042\040" +
    "\051\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\012\043\030\036\035\142\036\051\040\141\041\050" +
    "\042\040\051\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\012\043" +
    "\030\036\035\064\036\051\040\047\041\050\042\040\051" +
    "\042\001\001\000\022\012\043\030\036\035\063\036\051" +
    "\040\047\041\050\042\040\051\042\001\001\000\022\012" +
    "\043\030\036\035\062\036\051\040\047\041\050\042\040" +
    "\051\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\043\102\044\034" +
    "\045\031\046\030\050\027\001\001\000\024\011\074\012" +
    "\043\030\036\035\075\036\051\040\047\041\050\042\040" +
    "\051\042\001\001\000\022\012\043\030\036\035\071\036" +
    "\051\040\047\041\050\042\040\051\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\012\043\030\036\035\100" +
    "\036\051\040\047\041\050\042\040\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\105\045\031\046" +
    "\030\050\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\043\030\036\040\117\041\050\042" +
    "\040\051\042\001\001\000\002\001\001\000\016\012\043" +
    "\030\036\040\121\041\050\042\040\051\042\001\001\000" +
    "\002\001\001\000\016\012\043\030\036\040\140\041\050" +
    "\042\040\051\042\001\001\000\002\001\001\000\016\012" +
    "\043\030\036\040\137\041\050\042\040\051\042\001\001" +
    "\000\016\012\043\030\036\040\136\041\050\042\040\051" +
    "\042\001\001\000\016\012\043\030\036\040\135\041\050" +
    "\042\040\051\042\001\001\000\016\012\043\030\036\040" +
    "\134\041\050\042\040\051\042\001\001\000\016\012\043" +
    "\030\036\040\133\041\050\042\040\051\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\043\030" +
    "\036\035\146\036\051\040\047\041\050\042\040\051\042" +
    "\001\001\000\002\001\001\000\010\030\151\031\152\047" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\012" +
    "\043\030\036\035\156\036\051\040\047\041\050\042\040" +
    "\051\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\170\006\220\007\211\010\205" +
    "\013\216\014\174\020\172\023\200\024\213\025\176\026" +
    "\202\027\212\030\171\033\210\034\217\042\173\051\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\043\030\036\035\246\036\051\040\047\041\050\042" +
    "\040\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\005\170\006\220\007\211\010" +
    "\205\013\216\014\174\020\172\023\200\024\213\025\176" +
    "\026\202\027\212\030\171\034\230\042\173\051\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\043\030\036\035\223\036\051\040\047\041\050\042" +
    "\040\051\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\170\006\220\007\211\010\205\013\216\014" +
    "\174\020\172\023\200\024\213\025\176\026\202\027\212" +
    "\030\171\033\226\034\217\042\173\051\175\001\001\000" +
    "\042\005\170\006\220\007\211\010\205\013\216\014\174" +
    "\020\172\023\200\024\213\025\176\026\202\027\212\030" +
    "\171\034\230\042\173\051\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\043\030\036\035\235\036\051" +
    "\040\047\041\050\042\040\051\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\005\170\006\220\007\211" +
    "\010\205\013\216\014\174\020\172\023\200\024\213\025" +
    "\176\026\202\027\212\030\171\033\240\034\217\042\173" +
    "\051\175\001\001\000\042\005\170\006\220\007\211\010" +
    "\205\013\216\014\174\020\172\023\200\024\213\025\176" +
    "\026\202\027\212\030\171\034\230\042\173\051\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\170" +
    "\006\220\007\211\010\205\013\216\014\174\020\172\023" +
    "\200\024\213\025\176\026\202\027\212\030\171\033\244" +
    "\034\217\042\173\051\175\001\001\000\042\005\170\006" +
    "\220\007\211\010\205\013\216\014\174\020\172\023\200" +
    "\024\213\025\176\026\202\027\212\030\171\034\230\042" +
    "\173\051\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\043\102\044\034\045\031\046" +
    "\030\050\027\001\001\000\022\012\043\030\036\035\260" +
    "\036\051\040\047\041\050\042\040\051\042\001\001\000" +
    "\022\012\043\030\036\035\254\036\051\040\047\041\050" +
    "\042\040\051\042\001\001\000\024\011\255\012\043\030" +
    "\036\035\075\036\051\040\047\041\050\042\040\051\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\012\043\030\036\035\263\036\051\040\047\041" +
    "\050\042\040\051\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\271\006\267\021\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\012\043\030\036\035" +
    "\254\036\051\040\047\041\050\042\040\051\042\001\001" +
    "\000\022\012\043\030\036\035\275\036\051\040\047\041" +
    "\050\042\040\051\042\001\001\000\002\001\001\000\004" +
    "\022\301\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\005\170\006\220" +
    "\007\211\010\205\013\216\014\174\020\172\023\200\024" +
    "\213\025\176\026\202\027\212\030\171\033\304\034\217" +
    "\042\173\051\175\001\001\000\042\005\170\006\220\007" +
    "\211\010\205\013\216\014\174\020\172\023\200\024\213" +
    "\025\176\026\202\027\212\030\171\034\230\042\173\051" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\012\043\030\036\035\310\036\051\040\047\041\050\042" +
    "\040\051\042\001\001\000\002\001\001\000\022\012\043" +
    "\030\036\035\312\036\051\040\047\041\050\042\040\051" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\315\016\316\001\001\000\006\016\325\017\326\001" +
    "\001\000\002\001\001\000\022\012\043\030\036\035\320" +
    "\036\051\040\047\041\050\042\040\051\042\001\001\000" +
    "\002\001\001\000\044\005\170\006\220\007\211\010\205" +
    "\013\216\014\174\020\172\023\200\024\213\025\176\026" +
    "\202\027\212\030\171\033\322\034\217\042\173\051\175" +
    "\001\001\000\042\005\170\006\220\007\211\010\205\013" +
    "\216\014\174\020\172\023\200\024\213\025\176\026\202" +
    "\027\212\030\171\034\230\042\173\051\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\170\006\220\007" +
    "\211\010\205\013\216\014\174\020\172\023\200\024\213" +
    "\025\176\026\202\027\212\030\171\033\331\034\217\042" +
    "\173\051\175\001\001\000\042\005\170\006\220\007\211" +
    "\010\205\013\216\014\174\020\172\023\200\024\213\025" +
    "\176\026\202\027\212\030\171\034\230\042\173\051\175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\170" +
    "\006\220\007\211\010\205\013\216\014\174\020\172\023" +
    "\200\024\213\025\176\026\202\027\212\030\171\033\340" +
    "\034\217\042\173\051\175\001\001\000\042\005\170\006" +
    "\220\007\211\010\205\013\216\014\174\020\172\023\200" +
    "\024\213\025\176\026\202\027\212\030\171\034\230\042" +
    "\173\051\175\001\001\000\002\001\001\000\022\012\043" +
    "\030\036\035\343\036\051\040\047\041\050\042\040\051" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\012\043\030\036\035\347\036\051\040" +
    "\047\041\050\042\040\051\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\012\043\030\036\035\362\036\051" +
    "\040\047\041\050\042\040\051\042\001\001\000\022\012" +
    "\043\030\036\035\310\036\051\040\047\041\050\042\040" +
    "\051\042\001\001\000\024\011\357\012\043\030\036\035" +
    "\075\036\051\040\047\041\050\042\040\051\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\011\367\012\043\030\036\035\075\036" +
    "\051\040\047\041\050\042\040\051\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
        
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCJS$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }


  private final parserCJS parser;

  /** Constructor */
  CUP$parserCJS$actions(parserCJS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCJS$do_action(
    int                        CUP$parserCJS$act_num,
    java_cup.runtime.lr_parser CUP$parserCJS$parser,
    java.util.Stack            CUP$parserCJS$stack,
    int                        CUP$parserCJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCJS$result;

      /* select the action based on the action number */
      switch (CUP$parserCJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // valorchtml ::= EID PUNTO listaEventos 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valorchtml",39, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // setelem ::= SETELEMENTO PARIZQ logica COMA logica PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("setelem",38, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // obs0 ::= funciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obs0",37, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // obs0 ::= llamdaFunciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obs0",37, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // observador ::= OBSERVADOR PARIZQ logica COMA obs0 PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("observador",36, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // obtener ::= OBTENER PARIZQ logica PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("obtener",35, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // evento ::= setelem 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // evento ::= observador 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // evento ::= obtener 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("evento",34, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // listaEventos ::= evento 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("listaEventos",33, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // listaEventos ::= listaEventos PUNTO evento 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("listaEventos",33, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // eventos ::= DOCUMETO PUNTO listaEventos 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("eventos",32, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= valorchtml 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= eventos 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= llamdaFunciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= funcionesVector 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valor ::= EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valor ::= EDATE 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // valor ::= EDATETIME 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= ENUMERO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // valor ::= ECADENA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // valor ::= EFALSO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // valor ::= EVERDARERO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("valor",31, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exp ::= valor 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp ::= PARIZQ exp PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp ::= exp DECREMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp ::= exp AUMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp ::= exp POT exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp ::= exp MOD exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp ::= exp DIVI exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // exp ::= exp POR exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exp ::= exp MENOS exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exp ::= exp MAS exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("exp",30, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op ::= MAYOTIGUAL 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op ::= MAYOR 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op ::= MENORIGUAL 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op ::= MENOR 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op ::= DIFERENTE 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op ::= IGUALIGUAL 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("op",29, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relacional ::= exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("relacional",28, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relacional ::= relacional op exp 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("relacional",28, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // logica ::= relacional 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // logica ::= PARIZQ logica PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // logica ::= NOT logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // logica ::= logica AND logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // logica ::= logica OR logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("logica",27, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // llamdaFunciones ::= EID PARIZQ lvalores PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("llamdaFunciones",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // llamdaFunciones ::= EID PARIZQ PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("llamdaFunciones",22, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // mensaje ::= MENSAJE PARIZQ logica PARDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("mensaje",20, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // imprimir ::= IMPRIMIR PARIZQ logica PARDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("imprimir",19, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // retorno ::= RETORNAR logica PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("retorno",21, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // detener ::= DETENER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("detener",18, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // mientras ::= MIENTRAS PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("mientras",17, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // para1 ::= DECREMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para1",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // para1 ::= AUMENTO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para1",16, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // para0 ::= asignarvar 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para0",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // para0 ::= declararvar 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para0",15, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // para ::= PARA PARIZQ para0 PUNTOCOMA logica PUNTOCOMA para1 PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("para",14, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // defecto ::= DEFECTO DOSPUNTOS lsen 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("defecto",13, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // caso ::= CASO logica DOSPUNTOS lsen 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("caso",12, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lcaso ::= caso 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcaso",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lcaso ::= lcaso caso 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcaso",11, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // seleccionar ::= SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso defecto LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("seleccionar",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // seleccionar ::= SELECCIONA PARIZQ logica PARDER LLAVEIZQ lcaso LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("seleccionar",10, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // si ::= SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER SINO LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("si",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-10)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // si ::= SI PARIZQ logica PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("si",9, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sent ::= error PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sent ::= valorchtml PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sent ::= eventos PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sent ::= llamdaFunciones PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sent ::= retorno 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sent ::= mensaje 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sent ::= imprimir 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sent ::= detener 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sent ::= mientras 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sent ::= para 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sent ::= seleccionar 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sent ::= si 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sent ::= asignarvec 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sent ::= declararvec 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // sent ::= asignarvar PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sent ::= declararvar PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("sent",26, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lsen ::= sent 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lsen",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // lsen ::= lsen sent 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lsen",25, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcionesVector ::= EID LLAVEIZQ logica LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funcionesVector ::= EID PUNTO ATEXTO PARIZQ PARDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-4)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcionesVector ::= EID PUNTO CONTEO 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funcionesVector",8, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // asignarvec ::= EID DOSPUNTOS LLAVEIZQ lvalores LLAVEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvec",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignarvec ::= EID LLAVEIZQ logica LLAVEDER DOSPUNTOS logica PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvec",6, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lvalores ::= logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lvalores",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lvalores ::= lvalores COMA logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lvalores",7, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declararvec ::= DIMV EID LLAVEIZQ logica LLAVEDER DOSPUNTOS LLAVEIZQ lvalores LLAVEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-9)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declararvec ::= DIMV EID DOSPUNTOS LLAVEIZQ lvalores LLAVEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declararvec ::= DIMV EID LLAVEIZQ logica LLAVEDER PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvec",5, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-5)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignarvar ::= EID DOSPUNTOS logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("asignarvar",4, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declararvar ::= DIMV EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvar",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declararvar ::= DIMV EID DOSPUNTOS logica 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("declararvar",3, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-3)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lparametros ::= EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lparametros",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lparametros ::= lparametros COMA EID 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lparametros",24, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-2)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funciones ::= FUNCION EID PARIZQ lparametros PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funciones",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-7)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funciones ::= FUNCION EID PARIZQ PARDER LLAVEIZQ lsen LLAVEDER 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("funciones",23, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-6)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo ::= eventos PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cuerpo ::= valorchtml PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo ::= mensaje 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo ::= imprimir 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo ::= funciones 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo ::= llamdaFunciones PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cuerpo ::= declararvec 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cuerpo ::= declararvar PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("cuerpo",2, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcuerpo ::= cuerpo 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lcuerpo ::= lcuerpo cuerpo 
            {
              String RESULT =null;

              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("lcuerpo",1, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= lcuerpo 
            {
              String RESULT =null;
		
            System.out.println("Gramatica corecta");
        
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          return CUP$parserCJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)).value;
		RESULT = start_val;
              CUP$parserCJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCJS$stack.elementAt(CUP$parserCJS$top-1)), ((java_cup.runtime.Symbol)CUP$parserCJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCJS$parser.done_parsing();
          return CUP$parserCJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

