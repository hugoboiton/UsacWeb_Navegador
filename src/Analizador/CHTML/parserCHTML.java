
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 13 18:13:48 CST 2018
//----------------------------------------------------

package Analizador.CHTML;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 13 18:13:48 CST 2018
  */
public class parserCHTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCHTML() {super();}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\012\000\002\003" +
    "\011\000\002\003\010\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\011\000\002\007\014\000\002\007\011\000\002" +
    "\010\014\000\002\010\011\000\002\011\011\000\002\011" +
    "\010\000\002\012\004\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\025\012\000\002\025\011\000\002\025\011" +
    "\000\002\025\010\000\002\026\012\000\002\026\011\000" +
    "\002\026\011\000\002\026\010\000\002\027\011\000\002" +
    "\027\012\000\002\027\010\000\002\027\011\000\002\030" +
    "\012\000\002\030\011\000\002\030\010\000\002\030\011" +
    "\000\002\031\012\000\002\031\011\000\002\031\010\000" +
    "\002\031\011\000\002\032\012\000\002\032\011\000\002" +
    "\033\004\000\002\033\003\000\002\034\011\000\002\035" +
    "\004\000\002\035\003\000\002\036\011\000\002\036\010" +
    "\000\002\036\011\000\002\036\010\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\012\000\002\040\011\000\002\040" +
    "\011\000\002\040\010\000\002\041\012\000\002\041\011" +
    "\000\002\041\011\000\002\041\010\000\002\042\012\000" +
    "\002\042\011\000\002\042\011\000\002\042\010\000\002" +
    "\043\004\000\002\043\003\000\002\044\012\000\002\045" +
    "\005\000\002\046\012\000\002\046\011\000\002\046\011" +
    "\000\002\046\010\000\002\047\006\000\002\047\005\000" +
    "\002\014\006\000\002\015\006\000\002\016\004\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\006\000\002\021\006\000" +
    "\002\023\006\000\002\022\006\000\002\024\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\004\065\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\066\010\001\002\000\004\065\011\001\002\000" +
    "\004\006\u012c\001\002\000\004\065\014\001\002\000\004" +
    "\065\u0129\001\002\000\004\016\015\001\002\000\004\066" +
    "\016\001\002\000\004\065\034\001\002\000\004\065\uffef" +
    "\001\002\000\004\065\uffea\001\002\000\004\065\uffe8\001" +
    "\002\000\004\065\uffe7\001\002\000\004\065\uffec\001\002" +
    "\000\004\065\uffee\001\002\000\004\065\uffeb\001\002\000" +
    "\004\065\u0126\001\002\000\004\065\ufff0\001\002\000\004" +
    "\065\uffe5\001\002\000\004\065\uffe6\001\002\000\004\065" +
    "\uffe9\001\002\000\004\065\uffed\001\002\000\032\017\040" +
    "\020\045\022\050\024\035\026\042\030\037\032\044\034" +
    "\047\036\046\046\036\053\043\055\041\001\002\000\022" +
    "\056\062\057\051\060\061\061\063\062\066\063\052\064" +
    "\055\066\u0116\001\002\000\022\056\062\057\051\060\061" +
    "\061\063\062\066\063\052\064\055\066\371\001\002\000" +
    "\022\056\062\057\051\060\061\061\063\062\066\063\052" +
    "\064\055\066\350\001\002\000\004\066\346\001\002\000" +
    "\022\056\062\057\051\060\061\061\063\062\066\063\052" +
    "\064\055\066\344\001\002\000\022\056\062\057\051\060" +
    "\061\061\063\062\066\063\052\064\055\066\323\001\002" +
    "\000\022\056\062\057\051\060\061\061\063\062\066\063" +
    "\052\064\055\066\302\001\002\000\022\056\062\057\051" +
    "\060\061\061\063\062\066\063\052\064\055\066\261\001" +
    "\002\000\022\056\062\057\051\060\061\061\063\062\066" +
    "\063\052\064\055\066\237\001\002\000\022\056\062\057" +
    "\051\060\061\061\063\062\066\063\052\064\055\066\161" +
    "\001\002\000\022\056\062\057\051\060\061\061\063\062" +
    "\066\063\052\064\055\066\140\001\002\000\022\056\062" +
    "\057\051\060\061\061\063\062\066\063\052\064\055\066" +
    "\060\001\002\000\004\070\134\001\002\000\004\070\131" +
    "\001\002\000\022\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062" +
    "\uffa6\063\uffa6\064\uffa6\066\uffa6\001\002\000\022\056\uffa0" +
    "\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0\064\uffa0\066" +
    "\uffa0\001\002\000\004\070\126\001\002\000\022\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\066" +
    "\uffa4\001\002\000\022\056\062\057\051\060\061\061\063" +
    "\062\066\063\052\064\055\066\115\001\002\000\006\065" +
    "\106\071\107\001\002\000\004\070\103\001\002\000\004" +
    "\070\100\001\002\000\004\070\075\001\002\000\022\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7" +
    "\066\uffa7\001\002\000\022\056\uffa2\057\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\064\uffa2\066\uffa2\001\002\000\004" +
    "\070\072\001\002\000\022\056\uffa1\057\uffa1\060\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\066\uffa1\001\002\000\022" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\066\uffa5\001\002\000\022\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\066\uffa3\001\002\000" +
    "\004\071\073\001\002\000\004\067\074\001\002\000\022" +
    "\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064" +
    "\uff9d\066\uff9d\001\002\000\004\071\076\001\002\000\004" +
    "\067\077\001\002\000\022\056\uff9e\057\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\064\uff9e\066\uff9e\001\002\000\004" +
    "\071\101\001\002\000\004\067\102\001\002\000\022\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\066\uffa9\001\002\000\004\071\104\001\002\000\004\067" +
    "\105\001\002\000\022\056\uff9f\057\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\064\uff9f\066\uff9f\001\002\000\004\023" +
    "\113\001\002\000\004\065\110\001\002\000\004\023\111" +
    "\001\002\000\004\066\112\001\002\000\004\065\uffdc\001" +
    "\002\000\004\066\114\001\002\000\004\065\uffda\001\002" +
    "\000\006\065\117\071\120\001\002\000\022\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\066\uffa8" +
    "\001\002\000\004\023\124\001\002\000\004\065\121\001" +
    "\002\000\004\023\122\001\002\000\004\066\123\001\002" +
    "\000\004\065\uffdb\001\002\000\004\066\125\001\002\000" +
    "\004\065\uffd9\001\002\000\004\071\127\001\002\000\004" +
    "\067\130\001\002\000\022\056\uff9b\057\uff9b\060\uff9b\061" +
    "\uff9b\062\uff9b\063\uff9b\064\uff9b\066\uff9b\001\002\000\004" +
    "\071\132\001\002\000\004\067\133\001\002\000\022\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\066\uff9c\001\002\000\004\071\135\001\002\000\004\067" +
    "\136\001\002\000\022\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\066\uffaa\001\002\000\022\056" +
    "\062\057\051\060\061\061\063\062\066\063\052\064\055" +
    "\066\150\001\002\000\006\065\141\072\142\001\002\000" +
    "\004\035\146\001\002\000\004\065\143\001\002\000\004" +
    "\035\144\001\002\000\004\066\145\001\002\000\004\065" +
    "\uffbf\001\002\000\004\066\147\001\002\000\004\065\uffbd" +
    "\001\002\000\006\065\151\072\152\001\002\000\004\035" +
    "\156\001\002\000\004\065\153\001\002\000\004\035\154" +
    "\001\002\000\004\066\155\001\002\000\004\065\uffc0\001" +
    "\002\000\004\066\157\001\002\000\004\065\uffbe\001\002" +
    "\000\022\056\062\057\051\060\061\061\063\062\066\063" +
    "\052\064\055\066\231\001\002\000\004\065\162\001\002" +
    "\000\004\040\170\001\002\000\004\065\uffcd\001\002\000" +
    "\004\065\165\001\002\000\006\037\167\040\170\001\002" +
    "\000\004\065\uffce\001\002\000\004\066\230\001\002\000" +
    "\004\066\171\001\002\000\004\065\174\001\002\000\004" +
    "\065\225\001\002\000\004\065\uffca\001\002\000\006\042" +
    "\175\044\176\001\002\000\004\066\214\001\002\000\004" +
    "\066\177\001\002\000\004\065\205\001\002\000\004\065" +
    "\uffc5\001\002\000\004\065\uffc1\001\002\000\004\065\uffc4" +
    "\001\002\000\004\065\uffc3\001\002\000\004\065\211\001" +
    "\002\000\016\022\050\024\035\030\037\032\044\034\047" +
    "\045\207\001\002\000\004\065\uffc2\001\002\000\004\066" +
    "\210\001\002\000\004\065\uffc8\001\002\000\004\045\212" +
    "\001\002\000\004\066\213\001\002\000\004\065\uffc9\001" +
    "\002\000\004\065\216\001\002\000\004\065\221\001\002" +
    "\000\016\022\050\024\035\030\037\032\044\034\047\043" +
    "\217\001\002\000\004\066\220\001\002\000\004\065\uffc6" +
    "\001\002\000\004\043\222\001\002\000\004\066\223\001" +
    "\002\000\004\065\uffc7\001\002\000\004\065\uffcb\001\002" +
    "\000\010\041\226\042\175\044\176\001\002\000\004\066" +
    "\227\001\002\000\004\065\uffcc\001\002\000\004\065\uffcf" +
    "\001\002\000\004\065\162\001\002\000\004\065\233\001" +
    "\002\000\006\037\234\040\170\001\002\000\004\066\235" +
    "\001\002\000\004\065\uffd0\001\002\000\022\056\062\057" +
    "\051\060\061\061\063\062\066\063\052\064\055\066\250" +
    "\001\002\000\004\065\241\001\002\000\004\065\245\001" +
    "\002\000\032\020\045\021\242\022\050\024\035\026\042" +
    "\030\037\032\044\034\047\036\046\046\036\053\043\055" +
    "\041\001\002\000\004\066\243\001\002\000\004\065\uffe1" +
    "\001\002\000\004\065\ufff1\001\002\000\032\020\045\021" +
    "\246\022\050\024\035\026\042\030\037\032\044\034\047" +
    "\036\046\046\036\053\043\055\041\001\002\000\004\066" +
    "\247\001\002\000\004\065\uffe3\001\002\000\004\065\252" +
    "\001\002\000\004\065\255\001\002\000\032\020\045\021" +
    "\253\022\050\024\035\026\042\030\037\032\044\034\047" +
    "\036\046\046\036\053\043\055\041\001\002\000\004\066" +
    "\254\001\002\000\004\065\uffe2\001\002\000\032\020\045" +
    "\021\256\022\050\024\035\026\042\030\037\032\044\034" +
    "\047\036\046\046\036\053\043\055\041\001\002\000\004" +
    "\066\257\001\002\000\004\065\uffe4\001\002\000\022\056" +
    "\062\057\051\060\061\061\063\062\066\063\052\064\055" +
    "\066\271\001\002\000\006\065\262\072\263\001\002\000" +
    "\004\033\267\001\002\000\004\065\264\001\002\000\004" +
    "\033\265\001\002\000\004\066\266\001\002\000\004\065" +
    "\uffbb\001\002\000\004\066\270\001\002\000\004\065\uffb9" +
    "\001\002\000\006\065\272\072\273\001\002\000\004\033" +
    "\277\001\002\000\004\065\274\001\002\000\004\033\275" +
    "\001\002\000\004\066\276\001\002\000\004\065\uffbc\001" +
    "\002\000\004\066\300\001\002\000\004\065\uffba\001\002" +
    "\000\022\056\062\057\051\060\061\061\063\062\066\063" +
    "\052\064\055\066\312\001\002\000\006\065\303\072\304" +
    "\001\002\000\004\054\310\001\002\000\004\065\305\001" +
    "\002\000\004\054\306\001\002\000\004\066\307\001\002" +
    "\000\004\065\uffaf\001\002\000\004\066\311\001\002\000" +
    "\004\065\uffad\001\002\000\006\065\313\072\314\001\002" +
    "\000\004\054\320\001\002\000\004\065\315\001\002\000" +
    "\004\054\316\001\002\000\004\066\317\001\002\000\004" +
    "\065\uffb0\001\002\000\004\066\321\001\002\000\004\065" +
    "\uffae\001\002\000\022\056\062\057\051\060\061\061\063" +
    "\062\066\063\052\064\055\066\333\001\002\000\006\065" +
    "\324\072\325\001\002\000\004\027\331\001\002\000\004" +
    "\065\326\001\002\000\004\027\327\001\002\000\004\066" +
    "\330\001\002\000\004\065\uffd3\001\002\000\004\066\332" +
    "\001\002\000\004\065\uffd2\001\002\000\006\065\334\072" +
    "\335\001\002\000\004\027\341\001\002\000\004\065\336" +
    "\001\002\000\004\027\337\001\002\000\004\066\340\001" +
    "\002\000\004\065\uffd4\001\002\000\004\066\342\001\002" +
    "\000\004\065\uffd1\001\002\000\022\056\062\057\051\060" +
    "\061\061\063\062\066\063\052\064\055\066\345\001\002" +
    "\000\004\065\uffab\001\002\000\004\065\uffac\001\002\000" +
    "\004\065\ufff2\001\002\000\022\056\062\057\051\060\061" +
    "\061\063\062\066\063\052\064\055\066\360\001\002\000" +
    "\006\065\351\072\352\001\002\000\004\031\356\001\002" +
    "\000\004\065\353\001\002\000\004\031\354\001\002\000" +
    "\004\066\355\001\002\000\004\065\uffdf\001\002\000\004" +
    "\066\357\001\002\000\004\065\uffdd\001\002\000\006\065" +
    "\361\072\362\001\002\000\004\031\366\001\002\000\004" +
    "\065\363\001\002\000\004\031\364\001\002\000\004\066" +
    "\365\001\002\000\004\065\uffe0\001\002\000\004\066\367" +
    "\001\002\000\004\065\uffde\001\002\000\022\056\062\057" +
    "\051\060\061\061\063\062\066\063\052\064\055\066\u010d" +
    "\001\002\000\004\065\373\001\002\000\004\065\uffb3\001" +
    "\002\000\006\047\u010b\050\377\001\002\000\004\065\376" +
    "\001\002\000\004\065\uffb4\001\002\000\006\047\u0100\050" +
    "\377\001\002\000\004\052\u0102\001\002\000\004\066\u0101" +
    "\001\002\000\004\065\uffb7\001\002\000\004\070\u0109\001" +
    "\002\000\004\066\u0104\001\002\000\004\072\u0105\001\002" +
    "\000\004\065\u0106\001\002\000\004\051\u0107\001\002\000" +
    "\004\066\u0108\001\002\000\004\065\uffb2\001\002\000\004" +
    "\071\u010a\001\002\000\004\066\uffb1\001\002\000\004\066" +
    "\u010c\001\002\000\004\065\uffb5\001\002\000\004\065\u010e" +
    "\001\002\000\006\047\u0113\050\377\001\002\000\004\065" +
    "\u0110\001\002\000\006\047\u0111\050\377\001\002\000\004" +
    "\066\u0112\001\002\000\004\065\uffb8\001\002\000\004\066" +
    "\u0114\001\002\000\004\065\uffb6\001\002\000\022\056\062" +
    "\057\051\060\061\061\063\062\066\063\052\064\055\066" +
    "\u011e\001\002\000\006\065\u0117\072\u0118\001\002\000\004" +
    "\025\u011c\001\002\000\004\065\u0119\001\002\000\004\025" +
    "\u011a\001\002\000\004\066\u011b\001\002\000\004\065\uffd7" +
    "\001\002\000\004\066\u011d\001\002\000\004\065\uffd6\001" +
    "\002\000\006\065\u011f\072\u0120\001\002\000\004\025\u0124" +
    "\001\002\000\004\065\u0121\001\002\000\004\025\u0122\001" +
    "\002\000\004\066\u0123\001\002\000\004\065\uffd8\001\002" +
    "\000\004\066\u0125\001\002\000\004\065\uffd5\001\002\000" +
    "\032\017\u0127\020\045\022\050\024\035\026\042\030\037" +
    "\032\044\034\047\036\046\046\036\053\043\055\041\001" +
    "\002\000\004\066\u0128\001\002\000\004\065\ufff3\001\002" +
    "\000\004\005\u012a\001\002\000\004\066\u012b\001\002\000" +
    "\004\002\000\001\002\000\004\066\u012d\001\002\000\004" +
    "\065\u0132\001\002\000\004\065\u0159\001\002\000\004\065" +
    "\ufffb\001\002\000\004\065\ufffa\001\002\000\004\065\ufffc" +
    "\001\002\000\012\007\u0134\010\u0136\012\u0137\014\u0135\001" +
    "\002\000\004\065\ufff9\001\002\000\004\066\u0157\001\002" +
    "\000\004\066\u0152\001\002\000\006\057\u0145\066\u0146\001" +
    "\002\000\006\057\u0138\066\u0139\001\002\000\004\070\u013e" +
    "\001\002\000\004\071\u013a\001\002\000\004\065\u013b\001" +
    "\002\000\004\013\u013c\001\002\000\004\066\u013d\001\002" +
    "\000\004\065\ufff6\001\002\000\004\071\u013f\001\002\000" +
    "\004\067\u0140\001\002\000\004\066\u0141\001\002\000\004" +
    "\065\u0142\001\002\000\004\013\u0143\001\002\000\004\066" +
    "\u0144\001\002\000\004\065\ufff7\001\002\000\004\070\u014b" +
    "\001\002\000\004\071\u0147\001\002\000\004\065\u0148\001" +
    "\002\000\004\011\u0149\001\002\000\004\066\u014a\001\002" +
    "\000\004\065\ufff4\001\002\000\004\071\u014c\001\002\000" +
    "\004\067\u014d\001\002\000\004\066\u014e\001\002\000\004" +
    "\065\u014f\001\002\000\004\011\u0150\001\002\000\004\066" +
    "\u0151\001\002\000\004\065\ufff5\001\002\000\004\072\u0153" +
    "\001\002\000\004\065\u0154\001\002\000\004\015\u0155\001" +
    "\002\000\004\066\u0156\001\002\000\004\065\ufff8\001\002" +
    "\000\004\065\ufffe\001\002\000\004\065\ufffd\001\002\000" +
    "\012\007\u015a\010\u0136\012\u0137\014\u0135\001\002\000\004" +
    "\066\u015b\001\002\000\004\065\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\004\011\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\012\025\013\026\025\016\026\023\027\032\030" +
    "\022\031\024\032\017\040\031\041\020\042\021\046\030" +
    "\047\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\243\025\016\026" +
    "\023\027\032\030\022\031\024\032\017\040\031\041\020" +
    "\042\021\046\030\047\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\053\015\066\016" +
    "\u0114\017\063\020\052\021\067\022\055\023\070\024\064" +
    "\001\001\000\024\014\053\015\066\016\367\017\063\020" +
    "\052\021\067\022\055\023\070\024\064\001\001\000\024" +
    "\014\053\015\066\016\346\017\063\020\052\021\067\022" +
    "\055\023\070\024\064\001\001\000\002\001\001\000\024" +
    "\014\053\015\066\016\342\017\063\020\052\021\067\022" +
    "\055\023\070\024\064\001\001\000\024\014\053\015\066" +
    "\016\321\017\063\020\052\021\067\022\055\023\070\024" +
    "\064\001\001\000\024\014\053\015\066\016\300\017\063" +
    "\020\052\021\067\022\055\023\070\024\064\001\001\000" +
    "\024\014\053\015\066\016\257\017\063\020\052\021\067" +
    "\022\055\023\070\024\064\001\001\000\024\014\053\015" +
    "\066\016\235\017\063\020\052\021\067\022\055\023\070" +
    "\024\064\001\001\000\024\014\053\015\066\016\157\017" +
    "\063\020\052\021\067\022\055\023\070\024\064\001\001" +
    "\000\024\014\053\015\066\016\136\017\063\020\052\021" +
    "\067\022\055\023\070\024\064\001\001\000\024\014\053" +
    "\015\066\016\056\017\063\020\052\021\067\022\055\023" +
    "\070\024\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\053\015\066\017\115\020\052" +
    "\021\067\022\055\023\070\024\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\053\015\066\017\115\020\052" +
    "\021\067\022\055\023\070\024\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\053" +
    "\015\066\017\115\020\052\021\067\022\055\023\070\024" +
    "\064\001\001\000\006\033\163\034\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\171\036\172\001\001\000\004\036" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\026\177\027\205\030" +
    "\200\037\203\040\201\041\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\026\177\027\205\030\200" +
    "\037\214\040\201\041\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\231\034\162\001\001\000" +
    "\004\034\165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\053\015\066\017\115\020" +
    "\052\021\067\022\055\023\070\024\064\001\001\000\034" +
    "\012\237\013\026\025\016\026\023\027\032\030\022\031" +
    "\024\032\017\040\031\041\020\042\021\046\030\047\027" +
    "\001\001\000\032\013\243\025\016\026\023\027\032\030" +
    "\022\031\024\032\017\040\031\041\020\042\021\046\030" +
    "\047\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\250\013\026\025" +
    "\016\026\023\027\032\030\022\031\024\032\017\040\031" +
    "\041\020\042\021\046\030\047\027\001\001\000\032\013" +
    "\243\025\016\026\023\027\032\030\022\031\024\032\017" +
    "\040\031\041\020\042\021\046\030\047\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\053\015\066\017\115\020\052\021\067\022\055\023\070" +
    "\024\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\014\053\015\066\017\115\020\052" +
    "\021\067\022\055\023\070\024\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\014\053" +
    "\015\066\017\115\020\052\021\067\022\055\023\070\024" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\053\015\066\017\115\020\052\021" +
    "\067\022\055\023\070\024\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\014\053\015" +
    "\066\017\115\020\052\021\067\022\055\023\070\024\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\053\015\066\017\115\020\052\021\067" +
    "\022\055\023\070\024\064\001\001\000\006\043\373\044" +
    "\371\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u0102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\u010e\044\371\001\001" +
    "\000\002\001\001\000\004\044\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\014\053\015\066\017\115\020" +
    "\052\021\067\022\055\023\070\024\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\u012d\005\u0130\006\u012e\007\u012f\010\u0132\001\001" +
    "\000\012\005\u0157\006\u012e\007\u012f\010\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());
         errorSin=errorSin+"Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "+s.value + " no reconocido."+"\n";
         System.err.println("Error de Sintaxis---a");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());   
         System.err.println("Error de Sintaxis----b");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCHTML$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }


  private final parserCHTML parser;

  /** Constructor */
  CUP$parserCHTML$actions(parserCHTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCHTML$do_action(
    int                        CUP$parserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserCHTML$parser,
    java.util.Stack            CUP$parserCHTML$stack,
    int                        CUP$parserCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCHTML$result;

      /* select the action based on the action number */
      switch (CUP$parserCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // alineado ::= ALINEADO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alineado",18, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ancho ::= ANCHO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ancho",16, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // alto ::= ALTO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alto",17, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // grupo ::= GRUPO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("grupo",15, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // id ::= ID IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("id",14, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opciones ::= ruta 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opciones ::= click 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opciones ::= alineado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opciones ::= alto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opciones ::= ancho 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opciones ::= grupo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opciones ::= id 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lopciones ::= opciones 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lopciones ::= lopciones opciones 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // click ::= CLICK IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("click",11, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ruta ::= RUTA IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ruta",10, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // saltofin ::= ABRIR SALTOFIN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // saltofin ::= ABRIR SALTOFIN lopciones CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // spinner ::= ABRIR SPINNER CERRAR ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // spinner ::= ABRIR SPINNER lopciones CERRAR ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // spinner ::= ABRIR SPINNER CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // spinner ::= ABRIR SPINNER lopciones CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= VALOR IGUAL ECADENA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("valor",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opcion ::= ABRIR OPCION valor CERRAR ETEXTO ABRIR FINOPCION CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lopcion ::= opcion 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lopcion ::= lopcion opcion 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // caja ::= ABRIR CAJA CERRAR ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // caja ::= ABRIR CAJA lopciones CERRAR ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // caja ::= ABRIR CAJA CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // caja ::= ABRIR CAJA lopciones CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cajatexto ::= ABRIR CAJATEXTO CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cajatexto ::= ABRIR CAJATEXTO CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // textoa ::= ABRIR TEXTOA CERRAR ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // textoa ::= ABRIR TEXTOA lopciones CERRAR ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // textoa ::= ABRIR TEXTOA CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // textoa ::= ABRIR TEXTOA lopciones CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpotabla ::= boton 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpotabla ::= imagen 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpotabla ::= cajatexto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpotabla ::= textoa 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpotabla ::= texto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ct ::= ABRIR CB CERRAR ABRIR FINCB CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ct ::= ABRIR CB CERRAR cuerpotabla ABRIR FINCB CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ct ::= ABRIR CT CERRAR ABRIR FINCT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ct ::= ABRIR CT CERRAR cuerpotabla ABRIR FINCT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lct ::= ct 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",27, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lct ::= lct ct 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",27, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // celda ::= ABRIR FILT CERRAR lct ABRIR FINFILT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celda",26, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // celdas ::= celda 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",25, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // celdas ::= celdas celda 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",25, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tabla ::= ABRIR TABLA CERRAR celdas ABRIR FINTABLA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tabla ::= ABRIR TABLA lopciones CERRAR celdas ABRIR FINTABLA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // enlace ::= ABRIR ENLACE lopciones CERRAR ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // enlace ::= ABRIR ENLACE CERRAR ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // enlace ::= ABRIR ENLACE CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // enlace ::= ABRIR ENLACE lopciones CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // boton ::= ABRIR BOTON lopciones CERRAR ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // boton ::= ABRIR BOTON CERRAR ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boton ::= ABRIR BOTON CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boton ::= ABRIR BOTON lopciones CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // imagen ::= ABRIR IMAGEN lopciones CERRAR ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // imagen ::= ABRIR IMAGEN CERRAR ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // imagen ::= ABRIR IMAGEN lopciones CERRAR ECADENA ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // imagen ::= ABRIR IMAGEN CERRAR ECADENA ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // texto ::= ABRIR TEXTO CERRAR ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // texto ::= ABRIR TEXTO lopciones CERRAR ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // texto ::= ABRIR TEXTO CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // texto ::= ABRIR TEXTO lopciones CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // panel ::= ABRIR PANEL CERRAR ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // panel ::= ABRIR PANEL lopciones CERRAR ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // panel ::= ABRIR PANEL CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // panel ::= ABRIR PANEL lopciones CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compcuerpo ::= saltofin 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compcuerpo ::= spinner 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compcuerpo ::= caja 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compcuerpo ::= cajatexto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compcuerpo ::= textoa 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compcuerpo ::= tabla 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compcuerpo ::= enlace 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compcuerpo ::= boton 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compcuerpo ::= imagen 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // compcuerpo ::= texto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compcuerpo ::= panel 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lcompcuerpo ::= compcuerpo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lcompcuerpo ::= lcompcuerpo compcuerpo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= ABRIR CUERPO CERRAR ABRIR FINCUERPO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= ABRIR CUERPO CERRAR lcompcuerpo ABRIR FINCUERPO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cjs ::= ABRIR CJS CERRAR ECADENA ABRIR FINCJS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cjs ::= ABRIR CJS RUTA IGUAL ECADENA PUNTOCOMA CERRAR ABRIR FINCJS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ccss ::= ABRIR CCSS CERRAR ECADENA ABRIR FINCCSS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ccss ::= ABRIR CCSS RUTA IGUAL ECADENA PUNTOCOMA CERRAR ABRIR FINCCSS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // titulo ::= ABRIR TITULO CERRAR ETEXTO ABRIR FINTITULO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("titulo",4, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // compencabezado ::= cjs 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // compencabezado ::= ccss 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // compencabezado ::= titulo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lcompencabezado ::= compencabezado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lcompencabezado ::= lcompencabezado compencabezado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= ABRIR ENCABEZADO CERRAR ABRIR FINENCABEZADO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= ABRIR ENCABEZADO CERRAR lcompencabezado ABRIR FINENCABEZADO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ABRIR CHTML CERRAR encabezado cuerpo ABRIR FINCHTML CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT = start_val;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCHTML$parser.done_parsing();
          return CUP$parserCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

