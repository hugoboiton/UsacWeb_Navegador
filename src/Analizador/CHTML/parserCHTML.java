
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 19 00:54:04 CST 2018
//----------------------------------------------------

package Analizador.CHTML;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 19 00:54:04 CST 2018
  */
public class parserCHTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCHTML() {super();}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\012\000\002\002" +
    "\010\000\002\003\011\000\002\003\010\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\011\000\002" +
    "\006\010\000\002\007\011\000\002\007\011\000\002\010" +
    "\011\000\002\010\011\000\002\011\012\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\026\012\000\002\026\011\000\002\026\011\000\002" +
    "\026\010\000\002\027\012\000\002\027\011\000\002\027" +
    "\011\000\002\027\010\000\002\030\011\000\002\030\012" +
    "\000\002\030\010\000\002\030\011\000\002\031\012\000" +
    "\002\031\011\000\002\031\010\000\002\031\011\000\002" +
    "\032\012\000\002\032\011\000\002\032\010\000\002\032" +
    "\011\000\002\033\012\000\002\033\011\000\002\034\004" +
    "\000\002\034\003\000\002\035\011\000\002\036\004\000" +
    "\002\036\003\000\002\037\011\000\002\037\010\000\002" +
    "\037\011\000\002\037\010\000\002\041\004\000\002\041" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\042\012\000\002\042\011\000\002" +
    "\042\011\000\002\042\010\000\002\043\012\000\002\043" +
    "\011\000\002\043\011\000\002\043\010\000\002\044\012" +
    "\000\002\044\011\000\002\044\011\000\002\044\010\000" +
    "\002\045\004\000\002\045\003\000\002\046\012\000\002" +
    "\046\011\000\002\046\011\000\002\046\010\000\002\047" +
    "\006\000\002\050\012\000\002\050\011\000\002\050\011" +
    "\000\002\050\010\000\002\051\006\000\002\051\005\000" +
    "\002\014\006\000\002\015\006\000\002\016\004\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\020\006\000\002\021\006\000\002\023\006\000\002" +
    "\022\006\000\002\024\006\000\002\025\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\066\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\067\010\001\002\000\004\066\011\001\002\000" +
    "\006\005\u0150\006\u014f\001\002\000\004\066\014\001\002" +
    "\000\004\066\u014c\001\002\000\004\016\015\001\002\000" +
    "\026\003\037\056\022\057\026\060\027\061\025\062\031" +
    "\063\034\064\032\065\035\067\020\001\002\000\026\003" +
    "\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98" +
    "\064\uff98\065\uff98\067\uff98\001\002\000\026\003\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97" +
    "\065\uff97\067\uff97\001\002\000\006\003\103\066\u0146\001" +
    "\002\000\026\003\uff93\056\uff93\057\uff93\060\uff93\061\uff93" +
    "\062\uff93\063\uff93\064\uff93\065\uff93\067\uff93\001\002\000" +
    "\004\071\u0142\001\002\000\026\003\uff96\056\uff96\057\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\067" +
    "\uff96\001\002\000\026\003\037\056\022\057\026\060\027" +
    "\061\025\062\031\063\034\064\032\065\035\067\070\001" +
    "\002\000\004\071\065\001\002\000\004\071\062\001\002" +
    "\000\004\071\057\001\002\000\026\003\uff95\056\uff95\057" +
    "\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95" +
    "\067\uff95\001\002\000\004\071\054\001\002\000\004\071" +
    "\051\001\002\000\026\003\uff99\056\uff99\057\uff99\060\uff99" +
    "\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\067\uff99\001" +
    "\002\000\004\071\046\001\002\000\004\071\043\001\002" +
    "\000\026\003\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062" +
    "\uff94\063\uff94\064\uff94\065\uff94\067\uff94\001\002\000\004" +
    "\070\042\001\002\000\026\003\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\067\uff9a" +
    "\001\002\000\026\003\uff92\056\uff92\057\uff92\060\uff92\061" +
    "\uff92\062\uff92\063\uff92\064\uff92\065\uff92\067\uff92\001\002" +
    "\000\026\003\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\067\uff91\001\002\000\004" +
    "\072\044\001\002\000\004\070\045\001\002\000\026\003" +
    "\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c\063\uff8c" +
    "\064\uff8c\065\uff8c\067\uff8c\001\002\000\004\072\047\001" +
    "\002\000\004\070\050\001\002\000\026\003\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\067\uff8e\001\002\000\004\072\052\001\002\000\004" +
    "\070\053\001\002\000\026\003\uff8d\056\uff8d\057\uff8d\060" +
    "\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\067\uff8d" +
    "\001\002\000\004\072\055\001\002\000\004\070\056\001" +
    "\002\000\026\003\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\067\uff8f\001\002\000" +
    "\004\072\060\001\002\000\004\070\061\001\002\000\026" +
    "\003\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\067\uff8b\001\002\000\004\072\063" +
    "\001\002\000\004\070\064\001\002\000\026\003\uff9d\056" +
    "\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d" +
    "\065\uff9d\067\uff9d\001\002\000\004\072\066\001\002\000" +
    "\004\070\067\001\002\000\026\003\uff90\056\uff90\057\uff90" +
    "\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90\065\uff90\067" +
    "\uff90\001\002\000\006\003\103\066\110\001\002\000\026" +
    "\003\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\067\uff9b\001\002\000\006\003\uffea" +
    "\066\uffea\001\002\000\006\003\uffe3\066\uffe3\001\002\000" +
    "\006\003\uffe5\066\uffe5\001\002\000\006\003\uffe2\066\uffe2" +
    "\001\002\000\006\003\uffe7\066\uffe7\001\002\000\006\003" +
    "\uffe9\066\uffe9\001\002\000\006\003\uffe6\066\uffe6\001\002" +
    "\000\006\003\103\066\u013f\001\002\000\006\003\uffeb\066" +
    "\uffeb\001\002\000\004\066\u013e\001\002\000\006\003\uffe0" +
    "\066\uffe0\001\002\000\006\003\uffe1\066\uffe1\001\002\000" +
    "\006\003\uffe4\066\uffe4\001\002\000\006\003\uffe8\066\uffe8" +
    "\001\002\000\032\017\113\020\121\022\124\024\111\026" +
    "\116\030\114\032\120\034\123\036\122\046\112\053\117" +
    "\055\115\001\002\000\026\003\037\056\022\057\026\060" +
    "\027\061\025\062\031\063\034\064\032\065\035\067\u012d" +
    "\001\002\000\026\003\037\056\022\057\026\060\027\061" +
    "\025\062\031\063\034\064\032\065\035\067\u0104\001\002" +
    "\000\004\067\u0103\001\002\000\026\003\037\056\022\057" +
    "\026\060\027\061\025\062\031\063\034\064\032\065\035" +
    "\067\362\001\002\000\026\003\037\056\022\057\026\060" +
    "\027\061\025\062\031\063\034\064\032\065\035\067\357" +
    "\001\002\000\026\003\037\056\022\057\026\060\027\061" +
    "\025\062\031\063\034\064\032\065\035\067\336\001\002" +
    "\000\026\003\037\056\022\057\026\060\027\061\025\062" +
    "\031\063\034\064\032\065\035\067\315\001\002\000\026" +
    "\003\037\056\022\057\026\060\027\061\025\062\031\063" +
    "\034\064\032\065\035\067\274\001\002\000\026\003\037" +
    "\056\022\057\026\060\027\061\025\062\031\063\034\064" +
    "\032\065\035\067\252\001\002\000\026\003\037\056\022" +
    "\057\026\060\027\061\025\062\031\063\034\064\032\065" +
    "\035\067\167\001\002\000\026\003\037\056\022\057\026" +
    "\060\027\061\025\062\031\063\034\064\032\065\035\067" +
    "\146\001\002\000\026\003\037\056\022\057\026\060\027" +
    "\061\025\062\031\063\034\064\032\065\035\067\125\001" +
    "\002\000\006\066\137\073\140\001\002\000\026\003\037" +
    "\056\022\057\026\060\027\061\025\062\031\063\034\064" +
    "\032\065\035\067\127\001\002\000\006\066\130\073\131" +
    "\001\002\000\004\023\135\001\002\000\004\066\132\001" +
    "\002\000\004\023\133\001\002\000\004\067\134\001\002" +
    "\000\010\003\uffd5\066\uffd5\073\uffd5\001\002\000\004\067" +
    "\136\001\002\000\010\003\uffd3\066\uffd3\073\uffd3\001\002" +
    "\000\004\023\144\001\002\000\004\066\141\001\002\000" +
    "\004\023\142\001\002\000\004\067\143\001\002\000\010" +
    "\003\uffd6\066\uffd6\073\uffd6\001\002\000\004\067\145\001" +
    "\002\000\010\003\uffd4\066\uffd4\073\uffd4\001\002\000\006" +
    "\066\160\073\161\001\002\000\026\003\037\056\022\057" +
    "\026\060\027\061\025\062\031\063\034\064\032\065\035" +
    "\067\150\001\002\000\006\066\151\073\152\001\002\000" +
    "\004\035\156\001\002\000\004\066\153\001\002\000\004" +
    "\035\154\001\002\000\004\067\155\001\002\000\010\003" +
    "\uffb6\066\uffb6\073\uffb6\001\002\000\004\067\157\001\002" +
    "\000\010\003\uffb4\066\uffb4\073\uffb4\001\002\000\004\035" +
    "\165\001\002\000\004\066\162\001\002\000\004\035\163" +
    "\001\002\000\004\067\164\001\002\000\010\003\uffb5\066" +
    "\uffb5\073\uffb5\001\002\000\004\067\166\001\002\000\010" +
    "\003\uffb3\066\uffb3\073\uffb3\001\002\000\004\066\172\001" +
    "\002\000\026\003\037\056\022\057\026\060\027\061\025" +
    "\062\031\063\034\064\032\065\035\067\171\001\002\000" +
    "\004\066\172\001\002\000\004\040\200\001\002\000\004" +
    "\066\uffc7\001\002\000\004\066\175\001\002\000\006\037" +
    "\177\040\200\001\002\000\004\066\uffc8\001\002\000\004" +
    "\067\245\001\002\000\004\067\201\001\002\000\004\066" +
    "\204\001\002\000\004\066\242\001\002\000\004\066\uffc4" +
    "\001\002\000\006\042\205\044\206\001\002\000\004\067" +
    "\231\001\002\000\004\067\207\001\002\000\010\003\215" +
    "\066\221\073\211\001\002\000\010\003\uffbb\066\uffbb\073" +
    "\uffbb\001\002\000\010\003\uffb8\066\uffb8\073\uffb8\001\002" +
    "\000\010\003\uffbe\066\uffbe\073\uffbe\001\002\000\010\003" +
    "\uffb9\066\uffb9\073\uffb9\001\002\000\010\003\uffbd\066\uffbd" +
    "\073\uffbd\001\002\000\004\066\230\001\002\000\010\003" +
    "\uffbc\066\uffbc\073\uffbc\001\002\000\010\003\uffba\066\uffba" +
    "\073\uffba\001\002\000\010\003\215\066\225\073\211\001" +
    "\002\000\016\022\124\024\111\030\114\032\120\034\123" +
    "\045\222\001\002\000\004\067\223\001\002\000\004\066" +
    "\uffc2\001\002\000\010\003\uffbf\066\uffbf\073\uffbf\001\002" +
    "\000\016\022\124\024\111\030\114\032\120\034\123\045" +
    "\226\001\002\000\004\067\227\001\002\000\004\066\uffc3" +
    "\001\002\000\010\003\uffb7\066\uffb7\073\uffb7\001\002\000" +
    "\010\003\215\066\233\073\211\001\002\000\010\003\215" +
    "\066\236\073\211\001\002\000\016\022\124\024\111\030" +
    "\114\032\120\034\123\043\234\001\002\000\004\067\235" +
    "\001\002\000\004\066\uffc0\001\002\000\016\022\124\024" +
    "\111\030\114\032\120\034\123\043\237\001\002\000\004" +
    "\067\240\001\002\000\004\066\uffc1\001\002\000\004\066" +
    "\uffc5\001\002\000\010\041\243\042\205\044\206\001\002" +
    "\000\004\067\244\001\002\000\004\066\uffc6\001\002\000" +
    "\006\003\uffca\066\uffca\001\002\000\004\066\247\001\002" +
    "\000\006\037\250\040\200\001\002\000\004\067\251\001" +
    "\002\000\006\003\uffc9\066\uffc9\001\002\000\006\003\103" +
    "\066\266\001\002\000\026\003\037\056\022\057\026\060" +
    "\027\061\025\062\031\063\034\064\032\065\035\067\254" +
    "\001\002\000\006\003\103\066\256\001\002\000\006\003" +
    "\103\066\262\001\002\000\032\020\121\021\257\022\124" +
    "\024\111\026\116\030\114\032\120\034\123\036\122\046" +
    "\112\053\117\055\115\001\002\000\004\067\260\001\002" +
    "\000\006\003\uffdc\066\uffdc\001\002\000\006\003\uffec\066" +
    "\uffec\001\002\000\032\020\121\021\263\022\124\024\111" +
    "\026\116\030\114\032\120\034\123\036\122\046\112\053" +
    "\117\055\115\001\002\000\004\067\264\001\002\000\006" +
    "\003\uffde\066\uffde\001\002\000\006\003\103\066\271\001" +
    "\002\000\032\020\121\021\267\022\124\024\111\026\116" +
    "\030\114\032\120\034\123\036\122\046\112\053\117\055" +
    "\115\001\002\000\004\067\270\001\002\000\006\003\uffdb" +
    "\066\uffdb\001\002\000\032\020\121\021\272\022\124\024" +
    "\111\026\116\030\114\032\120\034\123\036\122\046\112" +
    "\053\117\055\115\001\002\000\004\067\273\001\002\000" +
    "\006\003\uffdd\066\uffdd\001\002\000\006\066\306\073\307" +
    "\001\002\000\026\003\037\056\022\057\026\060\027\061" +
    "\025\062\031\063\034\064\032\065\035\067\276\001\002" +
    "\000\006\066\277\073\300\001\002\000\004\033\304\001" +
    "\002\000\004\066\301\001\002\000\004\033\302\001\002" +
    "\000\004\067\303\001\002\000\010\003\uffb2\066\uffb2\073" +
    "\uffb2\001\002\000\004\067\305\001\002\000\010\003\uffb0" +
    "\066\uffb0\073\uffb0\001\002\000\004\033\313\001\002\000" +
    "\004\066\310\001\002\000\004\033\311\001\002\000\004" +
    "\067\312\001\002\000\010\003\uffb1\066\uffb1\073\uffb1\001" +
    "\002\000\004\067\314\001\002\000\010\003\uffaf\066\uffaf" +
    "\073\uffaf\001\002\000\006\066\327\073\330\001\002\000" +
    "\026\003\037\056\022\057\026\060\027\061\025\062\031" +
    "\063\034\064\032\065\035\067\317\001\002\000\006\066" +
    "\320\073\321\001\002\000\004\054\325\001\002\000\004" +
    "\066\322\001\002\000\004\054\323\001\002\000\004\067" +
    "\324\001\002\000\006\003\uffa3\066\uffa3\001\002\000\004" +
    "\067\326\001\002\000\006\003\uffa1\066\uffa1\001\002\000" +
    "\004\054\334\001\002\000\004\066\331\001\002\000\004" +
    "\054\332\001\002\000\004\067\333\001\002\000\006\003" +
    "\uffa2\066\uffa2\001\002\000\004\067\335\001\002\000\006" +
    "\003\uffa0\066\uffa0\001\002\000\006\066\350\073\351\001" +
    "\002\000\026\003\037\056\022\057\026\060\027\061\025" +
    "\062\031\063\034\064\032\065\035\067\340\001\002\000" +
    "\006\066\341\073\342\001\002\000\004\027\346\001\002" +
    "\000\004\066\343\001\002\000\004\027\344\001\002\000" +
    "\004\067\345\001\002\000\006\003\uffce\066\uffce\001\002" +
    "\000\004\067\347\001\002\000\006\003\uffcb\066\uffcb\001" +
    "\002\000\004\027\355\001\002\000\004\066\352\001\002" +
    "\000\004\027\353\001\002\000\004\067\354\001\002\000" +
    "\006\003\uffcd\066\uffcd\001\002\000\004\067\356\001\002" +
    "\000\006\003\uffcc\066\uffcc\001\002\000\006\003\uff9e\066" +
    "\uff9e\001\002\000\026\003\037\056\022\057\026\060\027" +
    "\061\025\062\031\063\034\064\032\065\035\067\361\001" +
    "\002\000\006\003\uff9f\066\uff9f\001\002\000\006\066\374" +
    "\073\375\001\002\000\026\003\037\056\022\057\026\060" +
    "\027\061\025\062\031\063\034\064\032\065\035\067\364" +
    "\001\002\000\006\066\365\073\366\001\002\000\004\031" +
    "\372\001\002\000\004\066\367\001\002\000\004\031\370" +
    "\001\002\000\004\067\371\001\002\000\010\003\uffda\066" +
    "\uffda\073\uffda\001\002\000\004\067\373\001\002\000\010" +
    "\003\uffd8\066\uffd8\073\uffd8\001\002\000\004\031\u0101\001" +
    "\002\000\004\066\376\001\002\000\004\031\377\001\002" +
    "\000\004\067\u0100\001\002\000\010\003\uffd9\066\uffd9\073" +
    "\uffd9\001\002\000\004\067\u0102\001\002\000\010\003\uffd7" +
    "\066\uffd7\073\uffd7\001\002\000\004\066\uffef\001\002\000" +
    "\004\066\u0126\001\002\000\026\003\037\056\022\057\026" +
    "\060\027\061\025\062\031\063\034\064\032\065\035\067" +
    "\u0106\001\002\000\004\066\u0108\001\002\000\004\066\uffa9" +
    "\001\002\000\006\047\u0124\050\u010c\001\002\000\004\066" +
    "\u010b\001\002\000\004\066\uffaa\001\002\000\006\047\u010d" +
    "\050\u010c\001\002\000\006\052\u010f\067\u0111\001\002\000" +
    "\004\067\u010e\001\002\000\006\003\uffae\066\uffae\001\002" +
    "\000\004\071\u0121\001\002\000\004\067\u0119\001\002\000" +
    "\006\066\u0112\073\u0113\001\002\000\004\051\u0117\001\002" +
    "\000\004\066\u0114\001\002\000\004\051\u0115\001\002\000" +
    "\004\067\u0116\001\002\000\004\066\uffa6\001\002\000\004" +
    "\067\u0118\001\002\000\004\066\uffa5\001\002\000\006\066" +
    "\u011a\073\u011b\001\002\000\004\051\u011f\001\002\000\004" +
    "\066\u011c\001\002\000\004\051\u011d\001\002\000\004\067" +
    "\u011e\001\002\000\004\066\uffa8\001\002\000\004\067\u0120" +
    "\001\002\000\004\066\uffa7\001\002\000\004\072\u0122\001" +
    "\002\000\004\070\u0123\001\002\000\004\067\uffa4\001\002" +
    "\000\004\067\u0125\001\002\000\006\003\uffac\066\uffac\001" +
    "\002\000\006\047\u012b\050\u010c\001\002\000\004\066\u0128" +
    "\001\002\000\006\047\u0129\050\u010c\001\002\000\004\067" +
    "\u012a\001\002\000\006\003\uffad\066\uffad\001\002\000\004" +
    "\067\u012c\001\002\000\006\003\uffab\066\uffab\001\002\000" +
    "\006\066\u0137\073\u0138\001\002\000\026\003\037\056\022" +
    "\057\026\060\027\061\025\062\031\063\034\064\032\065" +
    "\035\067\u012f\001\002\000\006\066\u0130\073\u0131\001\002" +
    "\000\004\025\u0135\001\002\000\004\066\u0132\001\002\000" +
    "\004\025\u0133\001\002\000\004\067\u0134\001\002\000\010" +
    "\003\uffd2\066\uffd2\073\uffd2\001\002\000\004\067\u0136\001" +
    "\002\000\010\003\uffcf\066\uffcf\073\uffcf\001\002\000\004" +
    "\025\u013c\001\002\000\004\066\u0139\001\002\000\004\025" +
    "\u013a\001\002\000\004\067\u013b\001\002\000\010\003\uffd1" +
    "\066\uffd1\073\uffd1\001\002\000\004\067\u013d\001\002\000" +
    "\010\003\uffd0\066\uffd0\073\uffd0\001\002\000\006\003\uffdf" +
    "\066\uffdf\001\002\000\032\017\u0140\020\121\022\124\024" +
    "\111\026\116\030\114\032\120\034\123\036\122\046\112" +
    "\053\117\055\115\001\002\000\004\067\u0141\001\002\000" +
    "\004\066\ufff0\001\002\000\004\072\u0143\001\002\000\004" +
    "\070\u0144\001\002\000\026\003\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\067\uff9c" +
    "\001\002\000\006\003\103\066\u0149\001\002\000\032\017" +
    "\u0147\020\121\022\124\024\111\026\116\030\114\032\120" +
    "\034\123\036\122\046\112\053\117\055\115\001\002\000" +
    "\004\067\u0148\001\002\000\004\066\uffed\001\002\000\032" +
    "\017\u014a\020\121\022\124\024\111\026\116\030\114\032" +
    "\120\034\123\036\122\046\112\053\117\055\115\001\002" +
    "\000\004\067\u014b\001\002\000\004\066\uffee\001\002\000" +
    "\004\005\u014d\001\002\000\004\067\u014e\001\002\000\004" +
    "\002\000\001\002\000\004\067\u0152\001\002\000\004\067" +
    "\u0151\001\002\000\004\002\uffff\001\002\000\006\003\u0155" +
    "\066\u0158\001\002\000\004\066\u017d\001\002\000\004\066" +
    "\ufff9\001\002\000\004\066\u017b\001\002\000\004\066\ufffb" +
    "\001\002\000\004\066\ufff8\001\002\000\012\007\u015a\010" +
    "\u015c\012\u015d\014\u015b\001\002\000\004\066\ufff7\001\002" +
    "\000\004\067\u017a\001\002\000\004\067\u0172\001\002\000" +
    "\026\003\037\056\022\057\026\060\027\061\025\062\031" +
    "\063\034\064\032\065\035\067\u0168\001\002\000\026\003" +
    "\037\056\022\057\026\060\027\061\025\062\031\063\034" +
    "\064\032\065\035\067\u015e\001\002\000\004\072\u0164\001" +
    "\002\000\026\003\037\056\022\057\026\060\027\061\025" +
    "\062\031\063\034\064\032\065\035\067\u0160\001\002\000" +
    "\004\066\u0161\001\002\000\004\013\u0162\001\002\000\004" +
    "\067\u0163\001\002\000\004\066\ufff4\001\002\000\004\066" +
    "\u0165\001\002\000\004\013\u0166\001\002\000\004\067\u0167" +
    "\001\002\000\004\066\ufff3\001\002\000\004\072\u016e\001" +
    "\002\000\026\003\037\056\022\057\026\060\027\061\025" +
    "\062\031\063\034\064\032\065\035\067\u016a\001\002\000" +
    "\004\066\u016b\001\002\000\004\011\u016c\001\002\000\004" +
    "\067\u016d\001\002\000\004\066\ufff2\001\002\000\004\066" +
    "\u016f\001\002\000\004\011\u0170\001\002\000\004\067\u0171" +
    "\001\002\000\004\066\ufff1\001\002\000\006\066\u0173\073" +
    "\u0174\001\002\000\004\015\u0178\001\002\000\004\066\u0175" +
    "\001\002\000\004\015\u0176\001\002\000\004\067\u0177\001" +
    "\002\000\004\066\ufff6\001\002\000\004\067\u0179\001\002" +
    "\000\004\066\ufff5\001\002\000\004\066\ufffd\001\002\000" +
    "\004\066\ufffa\001\002\000\004\066\ufffc\001\002\000\012" +
    "\007\u017e\010\u015c\012\u015d\014\u015b\001\002\000\004\067" +
    "\u017f\001\002\000\004\066\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017d\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\004\011\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\014\020" +
    "\015\035\016\023\017\037\020\032\021\015\022\016\023" +
    "\022\024\027\025\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\012\u0144\013\101\026\071\027\076\030" +
    "\106\031\075\032\077\033\073\042\105\043\072\044\074" +
    "\050\104\051\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\020\015\035\017\070" +
    "\020\032\021\015\022\016\023\022\024\027\025\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\012\100\013\101\026\071\027\076\030\106\031\075\032" +
    "\077\033\073\042\105\043\072\044\074\050\104\051\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\013\260\026" +
    "\071\027\076\030\106\031\075\032\077\033\073\042\105" +
    "\043\072\044\074\050\104\051\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\020\015\035\016\u012d\017\037\020\032\021\015" +
    "\022\016\023\022\024\027\025\040\001\001\000\026\014" +
    "\020\015\035\016\u0104\017\037\020\032\021\015\022\016" +
    "\023\022\024\027\025\040\001\001\000\002\001\001\000" +
    "\026\014\020\015\035\016\362\017\037\020\032\021\015" +
    "\022\016\023\022\024\027\025\040\001\001\000\026\014" +
    "\020\015\035\016\357\017\037\020\032\021\015\022\016" +
    "\023\022\024\027\025\040\001\001\000\026\014\020\015" +
    "\035\016\336\017\037\020\032\021\015\022\016\023\022" +
    "\024\027\025\040\001\001\000\026\014\020\015\035\016" +
    "\315\017\037\020\032\021\015\022\016\023\022\024\027" +
    "\025\040\001\001\000\026\014\020\015\035\016\274\017" +
    "\037\020\032\021\015\022\016\023\022\024\027\025\040" +
    "\001\001\000\026\014\020\015\035\016\252\017\037\020" +
    "\032\021\015\022\016\023\022\024\027\025\040\001\001" +
    "\000\026\014\020\015\035\016\167\017\037\020\032\021" +
    "\015\022\016\023\022\024\027\025\040\001\001\000\026" +
    "\014\020\015\035\016\146\017\037\020\032\021\015\022" +
    "\016\023\022\024\027\025\040\001\001\000\026\014\020" +
    "\015\035\016\125\017\037\020\032\021\015\022\016\023" +
    "\022\024\027\025\040\001\001\000\002\001\001\000\024" +
    "\014\020\015\035\017\070\020\032\021\015\022\016\023" +
    "\022\024\027\025\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\020\015\035\017" +
    "\070\020\032\021\015\022\016\023\022\024\027\025\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\034" +
    "\245\035\172\001\001\000\024\014\020\015\035\017\070" +
    "\020\032\021\015\022\016\023\022\024\027\025\040\001" +
    "\001\000\006\034\173\035\172\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\201\037\202\001\001\000\004\037\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\027\213\030\216\031\212\040" +
    "\211\041\217\042\215\043\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\027\213\030\216\031\212\040\223\042" +
    "\215\043\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\213\030\216\031\212\040\211\041\231\042\215\043" +
    "\207\001\001\000\016\027\213\030\216\031\212\040\223" +
    "\042\215\043\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\012\264\013\101\026\071\027\076" +
    "\030\106\031\075\032\077\033\073\042\105\043\072\044" +
    "\074\050\104\051\103\001\001\000\024\014\020\015\035" +
    "\017\070\020\032\021\015\022\016\023\022\024\027\025" +
    "\040\001\001\000\034\012\254\013\101\026\071\027\076" +
    "\030\106\031\075\032\077\033\073\042\105\043\072\044" +
    "\074\050\104\051\103\001\001\000\032\013\260\026\071" +
    "\027\076\030\106\031\075\032\077\033\073\042\105\043" +
    "\072\044\074\050\104\051\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\013\260\026\071\027\076\030\106\031\075\032\077\033" +
    "\073\042\105\043\072\044\074\050\104\051\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\020\015\035\017\070\020\032\021" +
    "\015\022\016\023\022\024\027\025\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\020\015\035\017\070\020\032\021\015\022\016\023\022" +
    "\024\027\025\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\020\015\035\017\070" +
    "\020\032\021\015\022\016\023\022\024\027\025\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\014\020\015\035\017\070\020\032\021\015\022" +
    "\016\023\022\024\027\025\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\020\015\035\017\070\020" +
    "\032\021\015\022\016\023\022\024\027\025\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\u0126\046\u0106\001\001\000\024\014\020\015\035" +
    "\017\070\020\032\021\015\022\016\023\022\024\027\025" +
    "\040\001\001\000\006\045\u0108\046\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u010f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u0109\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\020\015\035\017\070\020" +
    "\032\021\015\022\016\023\022\024\027\025\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\013" +
    "\260\026\071\027\076\030\106\031\075\032\077\033\073" +
    "\042\105\043\072\044\074\050\104\051\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\u0152\005" +
    "\u0155\006\u0153\007\u0156\010\u0158\001\001\000\012\005\u017b" +
    "\006\u0153\007\u0156\010\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\020\015\035\016\u0168\017\037\020\032" +
    "\021\015\022\016\023\022\024\027\025\040\001\001\000" +
    "\026\014\020\015\035\016\u015e\017\037\020\032\021\015" +
    "\022\016\023\022\024\027\025\040\001\001\000\002\001" +
    "\001\000\024\014\020\015\035\017\070\020\032\021\015" +
    "\022\016\023\022\024\027\025\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\020\015\035" +
    "\017\070\020\032\021\015\022\016\023\022\024\027\025" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());
         
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
         
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCHTML$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }


  private final parserCHTML parser;

  /** Constructor */
  CUP$parserCHTML$actions(parserCHTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCHTML$do_action(
    int                        CUP$parserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserCHTML$parser,
    java.util.Stack            CUP$parserCHTML$stack,
    int                        CUP$parserCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCHTML$result;

      /* select the action based on the action number */
      switch (CUP$parserCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fondo ::= FONDO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("fondo",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // alineado ::= ALINEADO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alineado",18, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ancho ::= ANCHO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ancho",16, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // alto ::= ALTO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alto",17, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // grupo ::= GRUPO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("grupo",15, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // id ::= ID IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("id",14, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opciones ::= error PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opciones ::= fondo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opciones ::= ruta 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opciones ::= click 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opciones ::= alineado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opciones ::= alto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opciones ::= ancho 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opciones ::= grupo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opciones ::= id 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lopciones ::= opciones 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lopciones ::= lopciones opciones 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // click ::= CLICK IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("click",11, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ruta ::= RUTA IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ruta",10, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // saltofin ::= ABRIR SALTOFIN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",39, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // saltofin ::= ABRIR SALTOFIN lopciones CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",39, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // spinner ::= ABRIR SPINNER CERRAR ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",38, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // spinner ::= ABRIR SPINNER lopciones CERRAR ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",38, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // spinner ::= ABRIR SPINNER CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",38, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // spinner ::= ABRIR SPINNER lopciones CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",38, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // valor ::= VALOR IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("valor",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opcion ::= ABRIR OPCION CERRAR ABRIR FINOPCION CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opcion ::= ABRIR OPCION CERRAR ETEXTO ABRIR FINOPCION CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opcion ::= ABRIR OPCION valor CERRAR ABRIR FINOPCION CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opcion ::= ABRIR OPCION valor CERRAR ETEXTO ABRIR FINOPCION CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lopcion ::= opcion 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lopcion ::= lopcion opcion 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // caja ::= ABRIR CAJA CERRAR ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // caja ::= ABRIR CAJA lopciones CERRAR ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // caja ::= ABRIR CAJA CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // caja ::= ABRIR CAJA lopciones CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cajatexto ::= ABRIR CAJATEXTO CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cajatexto ::= ABRIR CAJATEXTO CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // textoa ::= ABRIR TEXTOA CERRAR ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // textoa ::= ABRIR TEXTOA lopciones CERRAR ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // textoa ::= ABRIR TEXTOA CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // textoa ::= ABRIR TEXTOA lopciones CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // cuerpotabla ::= error ABRIR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cuerpotabla ::= ETEXTO 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpotabla ::= boton 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpotabla ::= imagen 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpotabla ::= cajatexto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpotabla ::= textoa 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpotabla ::= texto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lcuerpotabla ::= cuerpotabla 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcuerpotabla",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lcuerpotabla ::= lcuerpotabla cuerpotabla 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcuerpotabla",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ct ::= ABRIR CB CERRAR ABRIR FINCB CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ct ::= ABRIR CB CERRAR lcuerpotabla ABRIR FINCB CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ct ::= ABRIR CT CERRAR ABRIR FINCT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ct ::= ABRIR CT CERRAR lcuerpotabla ABRIR FINCT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lct ::= ct 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lct ::= lct ct 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // celda ::= ABRIR FILT CERRAR lct ABRIR FINFILT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celda",27, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // celdas ::= celda 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",26, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // celdas ::= celdas celda 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",26, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tabla ::= ABRIR TABLA CERRAR celdas ABRIR FINTABLA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",25, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tabla ::= ABRIR TABLA lopciones CERRAR celdas ABRIR FINTABLA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",25, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // enlace ::= ABRIR ENLACE lopciones CERRAR ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // enlace ::= ABRIR ENLACE CERRAR ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // enlace ::= ABRIR ENLACE CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enlace ::= ABRIR ENLACE lopciones CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boton ::= ABRIR BOTON lopciones CERRAR ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boton ::= ABRIR BOTON CERRAR ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boton ::= ABRIR BOTON CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boton ::= ABRIR BOTON lopciones CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // imagen ::= ABRIR IMAGEN lopciones CERRAR ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // imagen ::= ABRIR IMAGEN CERRAR ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // imagen ::= ABRIR IMAGEN lopciones CERRAR ETEXTO ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // imagen ::= ABRIR IMAGEN CERRAR ETEXTO ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // texto ::= ABRIR TEXTO CERRAR ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // texto ::= ABRIR TEXTO lopciones CERRAR ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // texto ::= ABRIR TEXTO CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // texto ::= ABRIR TEXTO lopciones CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // panel ::= ABRIR PANEL CERRAR ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // panel ::= ABRIR PANEL lopciones CERRAR ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // panel ::= ABRIR PANEL CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // panel ::= ABRIR PANEL lopciones CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // compcuerpo ::= error ABRIR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // compcuerpo ::= saltofin 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // compcuerpo ::= spinner 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // compcuerpo ::= caja 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // compcuerpo ::= cajatexto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // compcuerpo ::= textoa 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compcuerpo ::= tabla 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compcuerpo ::= enlace 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compcuerpo ::= boton 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compcuerpo ::= imagen 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compcuerpo ::= texto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compcuerpo ::= panel 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lcompcuerpo ::= compcuerpo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lcompcuerpo ::= lcompcuerpo compcuerpo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo ::= ABRIR CUERPO CERRAR ABRIR FINCUERPO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= ABRIR CUERPO CERRAR lcompcuerpo ABRIR FINCUERPO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= ABRIR CUERPO lopciones CERRAR ABRIR FINCUERPO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= ABRIR CUERPO lopciones CERRAR lcompcuerpo ABRIR FINCUERPO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cjs ::= ABRIR CJS CERRAR ECADENA ABRIR FINCJS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cjs ::= ABRIR CJS lopciones CERRAR ABRIR FINCJS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ccss ::= ABRIR CCSS CERRAR ECADENA ABRIR FINCCSS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ccss ::= ABRIR CCSS lopciones CERRAR ABRIR FINCCSS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // titulo ::= ABRIR TITULO CERRAR ABRIR FINTITULO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("titulo",4, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // titulo ::= ABRIR TITULO CERRAR ETEXTO ABRIR FINTITULO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("titulo",4, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compencabezado ::= cjs 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compencabezado ::= ccss 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // compencabezado ::= titulo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lcompencabezado ::= error ABRIR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lcompencabezado ::= compencabezado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lcompencabezado ::= lcompencabezado compencabezado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= ABRIR ENCABEZADO CERRAR ABRIR FINENCABEZADO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= ABRIR ENCABEZADO CERRAR lcompencabezado ABRIR FINENCABEZADO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= ABRIR CHTML CERRAR ABRIR FINCHTML CERRAR 
            {
              String RESULT =null;
		
            System.out.println("Gramatica corecta");
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ABRIR CHTML CERRAR encabezado cuerpo ABRIR FINCHTML CERRAR 
            {
              String RESULT =null;
		
            System.out.println("Gramatica corecta");
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT = start_val;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCHTML$parser.done_parsing();
          return CUP$parserCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

