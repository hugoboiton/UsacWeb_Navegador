
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 13 17:37:44 CST 2018
//----------------------------------------------------

package Analizador.CHTML;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 13 17:37:44 CST 2018
  */
public class parserCHTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCHTML() {super();}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\012\000\002\003" +
    "\011\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\011\000" +
    "\002\007\014\000\002\007\011\000\002\010\014\000\002" +
    "\010\011\000\002\011\011\000\002\012\004\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\025\012\000\002\025" +
    "\011\000\002\025\011\000\002\025\010\000\002\026\012" +
    "\000\002\026\011\000\002\026\011\000\002\026\010\000" +
    "\002\027\011\000\002\027\012\000\002\027\010\000\002" +
    "\027\011\000\002\030\012\000\002\030\011\000\002\030" +
    "\010\000\002\030\011\000\002\031\012\000\002\031\011" +
    "\000\002\031\010\000\002\031\011\000\002\032\012\000" +
    "\002\032\011\000\002\033\003\000\002\034\011\000\002" +
    "\036\004\000\002\036\003\000\002\035\011\000\002\037" +
    "\004\000\002\037\003\000\002\040\011\000\002\041\004" +
    "\000\002\041\003\000\002\042\011\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\044\012\000\002\044\011\000\002\044" +
    "\011\000\002\044\010\000\002\045\012\000\002\045\011" +
    "\000\002\045\011\000\002\045\010\000\002\046\012\000" +
    "\002\046\011\000\002\046\011\000\002\046\010\000\002" +
    "\047\004\000\002\047\003\000\002\050\012\000\002\051" +
    "\005\000\002\052\012\000\002\052\011\000\002\052\011" +
    "\000\002\052\010\000\002\053\006\000\002\053\005\000" +
    "\002\014\006\000\002\015\006\000\002\016\004\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\006\000\002\021\006\000" +
    "\002\023\006\000\002\022\006\000\002\024\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\004\065\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\066\010\001\002\000\004\065\011\001\002\000" +
    "\004\006\u011e\001\002\000\004\065\014\001\002\000\004" +
    "\065\u011b\001\002\000\004\016\015\001\002\000\004\066" +
    "\016\001\002\000\004\065\034\001\002\000\004\065\ufff1" +
    "\001\002\000\004\065\uffec\001\002\000\004\065\uffea\001" +
    "\002\000\004\065\uffe9\001\002\000\004\065\uffee\001\002" +
    "\000\004\065\ufff0\001\002\000\004\065\u0118\001\002\000" +
    "\004\065\uffed\001\002\000\004\065\ufff2\001\002\000\004" +
    "\065\uffe7\001\002\000\004\065\uffeb\001\002\000\004\065" +
    "\uffe8\001\002\000\004\065\uffef\001\002\000\030\020\044" +
    "\022\047\024\035\026\041\030\037\032\043\034\046\036" +
    "\045\046\036\053\042\055\040\001\002\000\022\056\060" +
    "\057\050\060\057\061\061\062\065\063\051\064\054\066" +
    "\u0108\001\002\000\022\056\060\057\050\060\057\061\061" +
    "\062\065\063\051\064\054\066\353\001\002\000\022\056" +
    "\060\057\050\060\057\061\061\062\065\063\051\064\054" +
    "\066\332\001\002\000\022\056\060\057\050\060\057\061" +
    "\061\062\065\063\051\064\054\066\327\001\002\000\022" +
    "\056\060\057\050\060\057\061\061\062\065\063\051\064" +
    "\054\066\306\001\002\000\022\056\060\057\050\060\057" +
    "\061\061\062\065\063\051\064\054\066\265\001\002\000" +
    "\022\056\060\057\050\060\057\061\061\062\065\063\051" +
    "\064\054\066\244\001\002\000\022\056\060\057\050\060" +
    "\057\061\061\062\065\063\051\064\054\066\222\001\002" +
    "\000\022\056\060\057\050\060\057\061\061\062\065\063" +
    "\051\064\054\066\160\001\002\000\022\056\060\057\050" +
    "\060\057\061\061\062\065\063\051\064\054\066\137\001" +
    "\002\000\022\056\060\057\050\060\057\061\061\062\065" +
    "\063\051\064\054\066\062\001\002\000\004\070\133\001" +
    "\002\000\004\070\130\001\002\000\022\056\uffa6\057\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\066\uffa6\001" +
    "\002\000\022\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\066\uffa0\001\002\000\004\070\125\001" +
    "\002\000\022\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\066\uffa4\001\002\000\022\056\060\057" +
    "\050\060\057\061\061\062\065\063\051\064\054\066\114" +
    "\001\002\000\004\070\111\001\002\000\004\070\106\001" +
    "\002\000\004\070\103\001\002\000\006\065\074\071\075" +
    "\001\002\000\022\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\066\uffa7\001\002\000\022\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\066" +
    "\uffa2\001\002\000\004\070\071\001\002\000\022\056\uffa1" +
    "\057\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\066" +
    "\uffa1\001\002\000\022\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\066\uffa5\001\002\000\022\056" +
    "\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3" +
    "\066\uffa3\001\002\000\004\071\072\001\002\000\004\067" +
    "\073\001\002\000\022\056\uff9d\057\uff9d\060\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\066\uff9d\001\002\000\004\023" +
    "\101\001\002\000\004\065\076\001\002\000\004\023\077" +
    "\001\002\000\004\066\100\001\002\000\004\065\uffde\001" +
    "\002\000\004\066\102\001\002\000\004\065\uffdc\001\002" +
    "\000\004\071\104\001\002\000\004\067\105\001\002\000" +
    "\022\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\064\uff9e\066\uff9e\001\002\000\004\071\107\001\002\000" +
    "\004\067\110\001\002\000\022\056\uffa9\057\uffa9\060\uffa9" +
    "\061\uffa9\062\uffa9\063\uffa9\064\uffa9\066\uffa9\001\002\000" +
    "\004\071\112\001\002\000\004\067\113\001\002\000\022" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\066\uff9f\001\002\000\006\065\116\071\117\001\002" +
    "\000\022\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\066\uffa8\001\002\000\004\023\123\001\002" +
    "\000\004\065\120\001\002\000\004\023\121\001\002\000" +
    "\004\066\122\001\002\000\004\065\uffdd\001\002\000\004" +
    "\066\124\001\002\000\004\065\uffdb\001\002\000\004\071" +
    "\126\001\002\000\004\067\127\001\002\000\022\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\066" +
    "\uff9b\001\002\000\004\071\131\001\002\000\004\067\132" +
    "\001\002\000\022\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\066\uff9c\001\002\000\004\071\134" +
    "\001\002\000\004\067\135\001\002\000\022\056\uffaa\057" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\066\uffaa" +
    "\001\002\000\022\056\060\057\050\060\057\061\061\062" +
    "\065\063\051\064\054\066\147\001\002\000\006\065\140" +
    "\072\141\001\002\000\004\035\145\001\002\000\004\065" +
    "\142\001\002\000\004\035\143\001\002\000\004\066\144" +
    "\001\002\000\004\065\uffbf\001\002\000\004\066\146\001" +
    "\002\000\004\065\uffbd\001\002\000\006\065\150\072\151" +
    "\001\002\000\004\035\155\001\002\000\004\065\152\001" +
    "\002\000\004\035\153\001\002\000\004\066\154\001\002" +
    "\000\004\065\uffc0\001\002\000\004\066\156\001\002\000" +
    "\004\065\uffbe\001\002\000\022\056\060\057\050\060\057" +
    "\061\061\062\065\063\051\064\054\066\214\001\002\000" +
    "\004\065\161\001\002\000\004\040\167\001\002\000\004" +
    "\065\164\001\002\000\004\065\uffd0\001\002\000\004\037" +
    "\165\001\002\000\004\066\166\001\002\000\004\065\uffd1" +
    "\001\002\000\004\066\170\001\002\000\004\065\172\001" +
    "\002\000\004\065\uffcd\001\002\000\004\042\176\001\002" +
    "\000\004\065\175\001\002\000\004\065\uffce\001\002\000" +
    "\006\041\177\042\176\001\002\000\004\066\201\001\002" +
    "\000\004\066\200\001\002\000\004\065\uffcf\001\002\000" +
    "\004\065\207\001\002\000\004\065\uffc5\001\002\000\004" +
    "\065\uffc1\001\002\000\004\065\uffc4\001\002\000\004\065" +
    "\uffc3\001\002\000\004\065\211\001\002\000\014\022\047" +
    "\024\035\030\037\032\043\034\046\001\002\000\004\065" +
    "\uffc2\001\002\000\004\043\212\001\002\000\004\066\213" +
    "\001\002\000\004\065\uffcc\001\002\000\004\065\161\001" +
    "\002\000\004\065\216\001\002\000\004\037\217\001\002" +
    "\000\004\066\220\001\002\000\004\065\uffd2\001\002\000" +
    "\022\056\060\057\050\060\057\061\061\062\065\063\051" +
    "\064\054\066\233\001\002\000\004\065\224\001\002\000" +
    "\004\065\230\001\002\000\032\020\044\021\225\022\047" +
    "\024\035\026\041\030\037\032\043\034\046\036\045\046" +
    "\036\053\042\055\040\001\002\000\004\066\226\001\002" +
    "\000\004\065\uffe3\001\002\000\004\065\ufff3\001\002\000" +
    "\032\020\044\021\231\022\047\024\035\026\041\030\037" +
    "\032\043\034\046\036\045\046\036\053\042\055\040\001" +
    "\002\000\004\066\232\001\002\000\004\065\uffe5\001\002" +
    "\000\004\065\235\001\002\000\004\065\240\001\002\000" +
    "\032\020\044\021\236\022\047\024\035\026\041\030\037" +
    "\032\043\034\046\036\045\046\036\053\042\055\040\001" +
    "\002\000\004\066\237\001\002\000\004\065\uffe4\001\002" +
    "\000\032\020\044\021\241\022\047\024\035\026\041\030" +
    "\037\032\043\034\046\036\045\046\036\053\042\055\040" +
    "\001\002\000\004\066\242\001\002\000\004\065\uffe6\001" +
    "\002\000\022\056\060\057\050\060\057\061\061\062\065" +
    "\063\051\064\054\066\254\001\002\000\006\065\245\072" +
    "\246\001\002\000\004\033\252\001\002\000\004\065\247" +
    "\001\002\000\004\033\250\001\002\000\004\066\251\001" +
    "\002\000\004\065\uffbb\001\002\000\004\066\253\001\002" +
    "\000\004\065\uffb9\001\002\000\006\065\255\072\256\001" +
    "\002\000\004\033\262\001\002\000\004\065\257\001\002" +
    "\000\004\033\260\001\002\000\004\066\261\001\002\000" +
    "\004\065\uffbc\001\002\000\004\066\263\001\002\000\004" +
    "\065\uffba\001\002\000\022\056\060\057\050\060\057\061" +
    "\061\062\065\063\051\064\054\066\275\001\002\000\006" +
    "\065\266\072\267\001\002\000\004\054\273\001\002\000" +
    "\004\065\270\001\002\000\004\054\271\001\002\000\004" +
    "\066\272\001\002\000\004\065\uffaf\001\002\000\004\066" +
    "\274\001\002\000\004\065\uffad\001\002\000\006\065\276" +
    "\072\277\001\002\000\004\054\303\001\002\000\004\065" +
    "\300\001\002\000\004\054\301\001\002\000\004\066\302" +
    "\001\002\000\004\065\uffb0\001\002\000\004\066\304\001" +
    "\002\000\004\065\uffae\001\002\000\022\056\060\057\050" +
    "\060\057\061\061\062\065\063\051\064\054\066\316\001" +
    "\002\000\006\065\307\072\310\001\002\000\004\027\314" +
    "\001\002\000\004\065\311\001\002\000\004\027\312\001" +
    "\002\000\004\066\313\001\002\000\004\065\uffd5\001\002" +
    "\000\004\066\315\001\002\000\004\065\uffd4\001\002\000" +
    "\006\065\317\072\320\001\002\000\004\027\324\001\002" +
    "\000\004\065\321\001\002\000\004\027\322\001\002\000" +
    "\004\066\323\001\002\000\004\065\uffd6\001\002\000\004" +
    "\066\325\001\002\000\004\065\uffd3\001\002\000\022\056" +
    "\060\057\050\060\057\061\061\062\065\063\051\064\054" +
    "\066\330\001\002\000\004\065\uffab\001\002\000\004\065" +
    "\uffac\001\002\000\022\056\060\057\050\060\057\061\061" +
    "\062\065\063\051\064\054\066\342\001\002\000\006\065" +
    "\333\072\334\001\002\000\004\031\340\001\002\000\004" +
    "\065\335\001\002\000\004\031\336\001\002\000\004\066" +
    "\337\001\002\000\004\065\uffe1\001\002\000\004\066\341" +
    "\001\002\000\004\065\uffdf\001\002\000\006\065\343\072" +
    "\344\001\002\000\004\031\350\001\002\000\004\065\345" +
    "\001\002\000\004\031\346\001\002\000\004\066\347\001" +
    "\002\000\004\065\uffe2\001\002\000\004\066\351\001\002" +
    "\000\004\065\uffe0\001\002\000\022\056\060\057\050\060" +
    "\057\061\061\062\065\063\051\064\054\066\377\001\002" +
    "\000\004\065\355\001\002\000\004\065\uffb3\001\002\000" +
    "\006\047\375\050\361\001\002\000\004\065\360\001\002" +
    "\000\004\065\uffb4\001\002\000\006\047\362\050\361\001" +
    "\002\000\004\052\364\001\002\000\004\066\363\001\002" +
    "\000\004\065\uffb7\001\002\000\004\070\373\001\002\000" +
    "\004\066\366\001\002\000\004\072\367\001\002\000\004" +
    "\065\370\001\002\000\004\051\371\001\002\000\004\066" +
    "\372\001\002\000\004\065\uffb2\001\002\000\004\071\374" +
    "\001\002\000\004\066\uffb1\001\002\000\004\066\376\001" +
    "\002\000\004\065\uffb5\001\002\000\004\065\u0100\001\002" +
    "\000\006\047\u0105\050\361\001\002\000\004\065\u0102\001" +
    "\002\000\006\047\u0103\050\361\001\002\000\004\066\u0104" +
    "\001\002\000\004\065\uffb8\001\002\000\004\066\u0106\001" +
    "\002\000\004\065\uffb6\001\002\000\022\056\060\057\050" +
    "\060\057\061\061\062\065\063\051\064\054\066\u0110\001" +
    "\002\000\006\065\u0109\072\u010a\001\002\000\004\025\u010e" +
    "\001\002\000\004\065\u010b\001\002\000\004\025\u010c\001" +
    "\002\000\004\066\u010d\001\002\000\004\065\uffd9\001\002" +
    "\000\004\066\u010f\001\002\000\004\065\uffd8\001\002\000" +
    "\006\065\u0111\072\u0112\001\002\000\004\025\u0116\001\002" +
    "\000\004\065\u0113\001\002\000\004\025\u0114\001\002\000" +
    "\004\066\u0115\001\002\000\004\065\uffda\001\002\000\004" +
    "\066\u0117\001\002\000\004\065\uffd7\001\002\000\032\017" +
    "\u0119\020\044\022\047\024\035\026\041\030\037\032\043" +
    "\034\046\036\045\046\036\053\042\055\040\001\002\000" +
    "\004\066\u011a\001\002\000\004\065\ufff4\001\002\000\004" +
    "\005\u011c\001\002\000\004\066\u011d\001\002\000\004\002" +
    "\000\001\002\000\004\066\u011f\001\002\000\004\065\u0124" +
    "\001\002\000\004\065\u0149\001\002\000\004\065\ufffc\001" +
    "\002\000\004\065\ufffb\001\002\000\004\065\ufffd\001\002" +
    "\000\010\010\u0127\012\u0128\014\u0126\001\002\000\004\065" +
    "\ufffa\001\002\000\004\066\u0143\001\002\000\006\057\u0136" +
    "\066\u0137\001\002\000\006\057\u0129\066\u012a\001\002\000" +
    "\004\070\u012f\001\002\000\004\071\u012b\001\002\000\004" +
    "\065\u012c\001\002\000\004\013\u012d\001\002\000\004\066" +
    "\u012e\001\002\000\004\065\ufff7\001\002\000\004\071\u0130" +
    "\001\002\000\004\067\u0131\001\002\000\004\066\u0132\001" +
    "\002\000\004\065\u0133\001\002\000\004\013\u0134\001\002" +
    "\000\004\066\u0135\001\002\000\004\065\ufff8\001\002\000" +
    "\004\070\u013c\001\002\000\004\071\u0138\001\002\000\004" +
    "\065\u0139\001\002\000\004\011\u013a\001\002\000\004\066" +
    "\u013b\001\002\000\004\065\ufff5\001\002\000\004\071\u013d" +
    "\001\002\000\004\067\u013e\001\002\000\004\066\u013f\001" +
    "\002\000\004\065\u0140\001\002\000\004\011\u0141\001\002" +
    "\000\004\066\u0142\001\002\000\004\065\ufff6\001\002\000" +
    "\004\072\u0144\001\002\000\004\065\u0145\001\002\000\004" +
    "\015\u0146\001\002\000\004\066\u0147\001\002\000\004\065" +
    "\ufff9\001\002\000\004\065\ufffe\001\002\000\012\007\u014a" +
    "\010\u0127\012\u0128\014\u0126\001\002\000\004\066\u014b\001" +
    "\002\000\004\065\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\004\011\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\012\024\013\026\025\016\026\023\027\032\030" +
    "\022\031\025\032\017\044\030\045\020\046\021\052\031" +
    "\053\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\013\226\025\016\026\023\027\032\030" +
    "\022\031\025\032\017\044\030\045\020\046\021\052\031" +
    "\053\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\052\015\065\016" +
    "\u0106\017\062\020\051\021\066\022\054\023\067\024\063" +
    "\001\001\000\024\014\052\015\065\016\351\017\062\020" +
    "\051\021\066\022\054\023\067\024\063\001\001\000\024" +
    "\014\052\015\065\016\330\017\062\020\051\021\066\022" +
    "\054\023\067\024\063\001\001\000\024\014\052\015\065" +
    "\016\325\017\062\020\051\021\066\022\054\023\067\024" +
    "\063\001\001\000\024\014\052\015\065\016\304\017\062" +
    "\020\051\021\066\022\054\023\067\024\063\001\001\000" +
    "\024\014\052\015\065\016\263\017\062\020\051\021\066" +
    "\022\054\023\067\024\063\001\001\000\024\014\052\015" +
    "\065\016\242\017\062\020\051\021\066\022\054\023\067" +
    "\024\063\001\001\000\024\014\052\015\065\016\220\017" +
    "\062\020\051\021\066\022\054\023\067\024\063\001\001" +
    "\000\024\014\052\015\065\016\156\017\062\020\051\021" +
    "\066\022\054\023\067\024\063\001\001\000\024\014\052" +
    "\015\065\016\135\017\062\020\051\021\066\022\054\023" +
    "\067\024\063\001\001\000\024\014\052\015\065\016\055" +
    "\017\062\020\051\021\066\022\054\023\067\024\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\052\015\065\017\114\020\051\021\066\022\054" +
    "\023\067\024\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\052\015\065\017\114\020\051\021\066\022\054" +
    "\023\067\024\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\052\015\065\017\114" +
    "\020\051\021\066\022\054\023\067\024\063\001\001\000" +
    "\006\033\161\034\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\170" +
    "\036\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\026\201\027\207\030\202\043\205\044\203\045\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\214\034\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\052\015\065\017\114\020\051\021\066" +
    "\022\054\023\067\024\063\001\001\000\034\012\222\013" +
    "\026\025\016\026\023\027\032\030\022\031\025\032\017" +
    "\044\030\045\020\046\021\052\031\053\027\001\001\000" +
    "\032\013\226\025\016\026\023\027\032\030\022\031\025" +
    "\032\017\044\030\045\020\046\021\052\031\053\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\012\233\013\026\025\016\026\023" +
    "\027\032\030\022\031\025\032\017\044\030\045\020\046" +
    "\021\052\031\053\027\001\001\000\032\013\226\025\016" +
    "\026\023\027\032\030\022\031\025\032\017\044\030\045" +
    "\020\046\021\052\031\053\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\052\015\065" +
    "\017\114\020\051\021\066\022\054\023\067\024\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\014\052\015\065\017\114\020\051\021\066\022" +
    "\054\023\067\024\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\014\052\015\065\017" +
    "\114\020\051\021\066\022\054\023\067\024\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\052\015\065\017\114\020\051\021\066\022\054" +
    "\023\067\024\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\014\052\015\065\017\114\020\051\021\066" +
    "\022\054\023\067\024\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\014\052\015\065" +
    "\017\114\020\051\021\066\022\054\023\067\024\063\001" +
    "\001\000\006\047\355\050\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\u0100\050\353\001\001\000\002\001\001\000\004\050" +
    "\356\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\014" +
    "\052\015\065\017\114\020\051\021\066\022\054\023\067" +
    "\024\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\u011f\005\u0122\006\u0120" +
    "\007\u0121\010\u0124\001\001\000\012\005\u0147\006\u0120\007" +
    "\u0121\010\u0124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());
         errorSin=errorSin+"Error en la Línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "+s.value + " no reconocido."+"\n";
         System.err.println("Error de Sintaxis---a");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         agregarerror(s.left,s.right,"sintacitico",s.value.toString());   
         System.err.println("Error de Sintaxis----b");
         System.err.println(s.value.toString());
         System.err.println( "Linea " + s.left );
         System.err.println( "Columna " + s.right );
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCHTML$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor,int linea,int colum)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,linea,colum);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }


  private final parserCHTML parser;

  /** Constructor */
  CUP$parserCHTML$actions(parserCHTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCHTML$do_action(
    int                        CUP$parserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserCHTML$parser,
    java.util.Stack            CUP$parserCHTML$stack,
    int                        CUP$parserCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCHTML$result;

      /* select the action based on the action number */
      switch (CUP$parserCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // alineado ::= ALINEADO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alineado",18, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ancho ::= ANCHO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ancho",16, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // alto ::= ALTO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alto",17, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // grupo ::= GRUPO IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("grupo",15, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // id ::= ID IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("id",14, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // opciones ::= ruta 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // opciones ::= click 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // opciones ::= alineado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // opciones ::= alto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // opciones ::= ancho 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // opciones ::= grupo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // opciones ::= id 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lopciones ::= opciones 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lopciones ::= lopciones opciones 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // click ::= CLICK IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("click",11, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ruta ::= RUTA IGUAL ECADENA PUNTOCOMA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ruta",10, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // saltofin ::= ABRIR SALTOFIN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",41, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // saltofin ::= ABRIR SALTOFIN lopciones CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",41, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // spinner ::= ABRIR SPINNER CERRAR ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",40, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // spinner ::= ABRIR SPINNER lopciones CERRAR ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",40, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // spinner ::= ABRIR SPINNER CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",40, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // spinner ::= ABRIR SPINNER lopciones CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",40, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= VALOR IGUAL ECADENA 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("valor",39, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // opcion ::= ABRIR OPCION valor CERRAR ETEXTO ABRIR FINOPCION CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",38, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lopcion ::= opcion 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lopcion ::= lopcion opcion 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // caja ::= ABRIR CAJA CERRAR ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // caja ::= ABRIR CAJA lopciones CERRAR ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // caja ::= ABRIR CAJA CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // caja ::= ABRIR CAJA lopciones CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cajatexto ::= ABRIR CAJATEXTO CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cajatexto ::= ABRIR CAJATEXTO CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // textoa ::= ABRIR TEXTOA CERRAR ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // textoa ::= ABRIR TEXTOA lopciones CERRAR ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // textoa ::= ABRIR TEXTOA CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // textoa ::= ABRIR TEXTOA lopciones CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cuerpotabla ::= boton 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cuerpotabla ::= imagen 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cuerpotabla ::= cajatexto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cuerpotabla ::= textoa 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cuerpotabla ::= texto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ct ::= ABRIR CT CERRAR cuerpotabla ABRIR FINCT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lct ::= ct 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lct ::= lct ct 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // celda ::= ABRIR FILT CERRAR lct ABRIR FINFILT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celda",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // celdas ::= celda 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // celdas ::= celdas celda 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cb ::= ABRIR CB CERRAR cuerpotabla ABRIR FINCB CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cb",27, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lcb ::= cb 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcb",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // lcb ::= lcb cb 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcb",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tablaencabezado ::= ABRIR FILT CERRAR lcb ABRIR FINFILT CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tablaencabezado",26, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // componentestabla ::= tablaencabezado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("componentestabla",25, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tabla ::= ABRIR TABLA CERRAR componentestabla ABRIR FINTABLA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tabla ::= ABRIR TABLA lopciones CERRAR componentestabla ABRIR FINTABLA CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // enlace ::= ABRIR ENLACE lopciones CERRAR ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // enlace ::= ABRIR ENLACE CERRAR ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // enlace ::= ABRIR ENLACE CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // enlace ::= ABRIR ENLACE lopciones CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // boton ::= ABRIR BOTON lopciones CERRAR ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // boton ::= ABRIR BOTON CERRAR ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // boton ::= ABRIR BOTON CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // boton ::= ABRIR BOTON lopciones CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // imagen ::= ABRIR IMAGEN lopciones CERRAR ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // imagen ::= ABRIR IMAGEN CERRAR ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // imagen ::= ABRIR IMAGEN lopciones CERRAR ECADENA ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // imagen ::= ABRIR IMAGEN CERRAR ECADENA ABRIR FINIMAGEN CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // texto ::= ABRIR TEXTO CERRAR ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // texto ::= ABRIR TEXTO lopciones CERRAR ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // texto ::= ABRIR TEXTO CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // texto ::= ABRIR TEXTO lopciones CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // panel ::= ABRIR PANEL CERRAR ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // panel ::= ABRIR PANEL lopciones CERRAR ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // panel ::= ABRIR PANEL CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // panel ::= ABRIR PANEL lopciones CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compcuerpo ::= saltofin 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compcuerpo ::= spinner 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compcuerpo ::= caja 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compcuerpo ::= cajatexto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compcuerpo ::= textoa 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compcuerpo ::= tabla 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compcuerpo ::= enlace 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // compcuerpo ::= boton 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // compcuerpo ::= imagen 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // compcuerpo ::= texto 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // compcuerpo ::= panel 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lcompcuerpo ::= compcuerpo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lcompcuerpo ::= lcompcuerpo compcuerpo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= ABRIR CUERPO CERRAR lcompcuerpo ABRIR FINCUERPO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cjs ::= ABRIR CJS CERRAR ECADENA ABRIR FINCJS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cjs ::= ABRIR CJS RUTA IGUAL ECADENA PUNTOCOMA CERRAR ABRIR FINCJS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ccss ::= ABRIR CCSS CERRAR ECADENA ABRIR FINCCSS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ccss ::= ABRIR CCSS RUTA IGUAL ECADENA PUNTOCOMA CERRAR ABRIR FINCCSS CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-9)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // titulo ::= ABRIR TITULO CERRAR ETEXTO ABRIR FINTITULO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("titulo",4, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // compencabezado ::= cjs 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // compencabezado ::= ccss 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // compencabezado ::= titulo 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lcompencabezado ::= compencabezado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lcompencabezado ::= lcompencabezado compencabezado 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // encabezado ::= ABRIR ENCABEZADO CERRAR lcompencabezado ABRIR FINENCABEZADO CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ABRIR CHTML CERRAR encabezado cuerpo ABRIR FINCHTML CERRAR 
            {
              String RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT = start_val;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCHTML$parser.done_parsing();
          return CUP$parserCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

