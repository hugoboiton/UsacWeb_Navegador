
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 23 22:13:29 CST 2018
//----------------------------------------------------

package Analizador.CHTML;

import java_cup.runtime.Symbol;
import EstructurasDatos.NodoArbol;
import EstructurasDatos.NodoError;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 23 22:13:29 CST 2018
  */
public class parserCHTML extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserCHTML() {super();}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserCHTML(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\012\000\002\002" +
    "\010\000\002\003\011\000\002\003\010\000\002\004\004" +
    "\000\002\004\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\004\000\002\006\011\000\002" +
    "\006\010\000\002\007\011\000\002\007\011\000\002\010" +
    "\011\000\002\010\011\000\002\011\012\000\002\011\011" +
    "\000\002\011\011\000\002\011\010\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\004\000" +
    "\002\026\012\000\002\026\011\000\002\026\011\000\002" +
    "\026\010\000\002\027\012\000\002\027\011\000\002\027" +
    "\011\000\002\027\010\000\002\030\011\000\002\030\012" +
    "\000\002\030\010\000\002\030\011\000\002\031\012\000" +
    "\002\031\011\000\002\031\010\000\002\031\011\000\002" +
    "\032\012\000\002\032\011\000\002\032\010\000\002\032" +
    "\011\000\002\033\012\000\002\033\011\000\002\034\004" +
    "\000\002\034\003\000\002\035\011\000\002\036\004\000" +
    "\002\036\003\000\002\037\011\000\002\037\010\000\002" +
    "\037\011\000\002\037\010\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\004\000\002\041\012\000" +
    "\002\041\011\000\002\041\011\000\002\041\010\000\002" +
    "\042\012\000\002\042\011\000\002\042\011\000\002\042" +
    "\010\000\002\043\012\000\002\043\011\000\002\043\011" +
    "\000\002\043\010\000\002\044\004\000\002\044\003\000" +
    "\002\045\012\000\002\045\011\000\002\045\011\000\002" +
    "\045\010\000\002\047\012\000\002\047\011\000\002\047" +
    "\011\000\002\047\010\000\002\050\006\000\002\050\005" +
    "\000\002\014\006\000\002\015\006\000\002\016\004\000" +
    "\002\016\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\004\000\002\020\006\000\002\021\006\000" +
    "\002\023\006\000\002\022\006\000\002\024\006\000\002" +
    "\025\006\000\002\046\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017c\000\004\066\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\067\010\001\002\000\004\066\011\001\002\000" +
    "\006\005\u014f\006\u014e\001\002\000\004\066\014\001\002" +
    "\000\004\066\u014b\001\002\000\004\016\015\001\002\000" +
    "\030\003\040\052\042\056\022\057\027\060\030\061\026" +
    "\062\032\063\035\064\034\065\036\067\020\001\002\000" +
    "\030\003\uff9b\052\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b" +
    "\062\uff9b\063\uff9b\064\uff9b\065\uff9b\067\uff9b\001\002\000" +
    "\030\003\uff9a\052\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\067\uff9a\001\002\000" +
    "\006\003\110\066\u0145\001\002\000\030\003\uff96\052\uff96" +
    "\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063\uff96\064" +
    "\uff96\065\uff96\067\uff96\001\002\000\004\071\u0141\001\002" +
    "\000\030\003\uff99\052\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\067\uff99\001\002" +
    "\000\030\003\040\052\042\056\022\057\027\060\030\061" +
    "\026\062\032\063\035\064\034\065\036\067\075\001\002" +
    "\000\030\003\uff94\052\uff94\056\uff94\057\uff94\060\uff94\061" +
    "\uff94\062\uff94\063\uff94\064\uff94\065\uff94\067\uff94\001\002" +
    "\000\004\071\072\001\002\000\004\071\067\001\002\000" +
    "\004\071\064\001\002\000\030\003\uff98\052\uff98\056\uff98" +
    "\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98\065" +
    "\uff98\067\uff98\001\002\000\004\071\061\001\002\000\030" +
    "\003\uff9c\052\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\067\uff9c\001\002\000\004" +
    "\071\056\001\002\000\004\071\053\001\002\000\004\071" +
    "\050\001\002\000\030\003\uff97\052\uff97\056\uff97\057\uff97" +
    "\060\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\067" +
    "\uff97\001\002\000\004\070\047\001\002\000\030\003\uff9d" +
    "\052\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d\063" +
    "\uff9d\064\uff9d\065\uff9d\067\uff9d\001\002\000\004\071\044" +
    "\001\002\000\030\003\uff95\052\uff95\056\uff95\057\uff95\060" +
    "\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\067\uff95" +
    "\001\002\000\004\072\045\001\002\000\004\070\046\001" +
    "\002\000\030\003\uff8c\052\uff8c\056\uff8c\057\uff8c\060\uff8c" +
    "\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\067\uff8c\001" +
    "\002\000\030\003\uff93\052\uff93\056\uff93\057\uff93\060\uff93" +
    "\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\067\uff93\001" +
    "\002\000\004\072\051\001\002\000\004\070\052\001\002" +
    "\000\030\003\uff8e\052\uff8e\056\uff8e\057\uff8e\060\uff8e\061" +
    "\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\067\uff8e\001\002" +
    "\000\004\072\054\001\002\000\004\070\055\001\002\000" +
    "\030\003\uff90\052\uff90\056\uff90\057\uff90\060\uff90\061\uff90" +
    "\062\uff90\063\uff90\064\uff90\065\uff90\067\uff90\001\002\000" +
    "\004\072\057\001\002\000\004\070\060\001\002\000\030" +
    "\003\uff8f\052\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\064\uff8f\065\uff8f\067\uff8f\001\002\000\004" +
    "\072\062\001\002\000\004\070\063\001\002\000\030\003" +
    "\uff91\052\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\uff91\065\uff91\067\uff91\001\002\000\004\072" +
    "\065\001\002\000\004\070\066\001\002\000\030\003\uff8d" +
    "\052\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\065\uff8d\067\uff8d\001\002\000\004\072\070" +
    "\001\002\000\004\070\071\001\002\000\030\003\uffa0\052" +
    "\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0\063\uffa0" +
    "\064\uffa0\065\uffa0\067\uffa0\001\002\000\004\072\073\001" +
    "\002\000\004\070\074\001\002\000\030\003\uff92\052\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\067\uff92\001\002\000\006\003\110\066\115" +
    "\001\002\000\030\003\uff9e\052\uff9e\056\uff9e\057\uff9e\060" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e\067\uff9e" +
    "\001\002\000\006\003\uffea\066\uffea\001\002\000\006\003" +
    "\uffe3\066\uffe3\001\002\000\006\003\uffe5\066\uffe5\001\002" +
    "\000\006\003\uffe2\066\uffe2\001\002\000\006\003\uffe7\066" +
    "\uffe7\001\002\000\006\003\uffe9\066\uffe9\001\002\000\006" +
    "\003\uffe6\066\uffe6\001\002\000\006\003\110\066\u013e\001" +
    "\002\000\006\003\uffeb\066\uffeb\001\002\000\004\066\u013d" +
    "\001\002\000\006\003\uffe0\066\uffe0\001\002\000\006\003" +
    "\uffe1\066\uffe1\001\002\000\006\003\uffe4\066\uffe4\001\002" +
    "\000\006\003\uffe8\066\uffe8\001\002\000\032\017\120\020" +
    "\126\022\131\024\116\026\122\030\121\032\125\034\130" +
    "\036\127\046\117\053\124\055\123\001\002\000\030\003" +
    "\040\052\042\056\022\057\027\060\030\061\026\062\032" +
    "\063\035\064\034\065\036\067\u012c\001\002\000\030\003" +
    "\040\052\042\056\022\057\027\060\030\061\026\062\032" +
    "\063\035\064\034\065\036\067\u0107\001\002\000\004\067" +
    "\u0106\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\365\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\344\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\341\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\320\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\277\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\255\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\174\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\153\001\002\000\030\003\040\052\042\056\022\057\027" +
    "\060\030\061\026\062\032\063\035\064\034\065\036\067" +
    "\132\001\002\000\006\066\144\073\145\001\002\000\030" +
    "\003\040\052\042\056\022\057\027\060\030\061\026\062" +
    "\032\063\035\064\034\065\036\067\134\001\002\000\006" +
    "\066\135\073\136\001\002\000\004\023\142\001\002\000" +
    "\004\066\137\001\002\000\004\023\140\001\002\000\004" +
    "\067\141\001\002\000\006\003\uffd5\066\uffd5\001\002\000" +
    "\004\067\143\001\002\000\006\003\uffd3\066\uffd3\001\002" +
    "\000\004\023\151\001\002\000\004\066\146\001\002\000" +
    "\004\023\147\001\002\000\004\067\150\001\002\000\006" +
    "\003\uffd6\066\uffd6\001\002\000\004\067\152\001\002\000" +
    "\006\003\uffd4\066\uffd4\001\002\000\006\066\165\073\166" +
    "\001\002\000\030\003\040\052\042\056\022\057\027\060" +
    "\030\061\026\062\032\063\035\064\034\065\036\067\155" +
    "\001\002\000\006\066\156\073\157\001\002\000\004\035" +
    "\163\001\002\000\004\066\160\001\002\000\004\035\161" +
    "\001\002\000\004\067\162\001\002\000\006\003\uffb8\066" +
    "\uffb8\001\002\000\004\067\164\001\002\000\006\003\uffb6" +
    "\066\uffb6\001\002\000\004\035\172\001\002\000\004\066" +
    "\167\001\002\000\004\035\170\001\002\000\004\067\171" +
    "\001\002\000\006\003\uffb7\066\uffb7\001\002\000\004\067" +
    "\173\001\002\000\006\003\uffb5\066\uffb5\001\002\000\004" +
    "\066\177\001\002\000\030\003\040\052\042\056\022\057" +
    "\027\060\030\061\026\062\032\063\035\064\034\065\036" +
    "\067\176\001\002\000\004\066\177\001\002\000\004\040" +
    "\205\001\002\000\004\066\uffc7\001\002\000\004\066\202" +
    "\001\002\000\006\037\204\040\205\001\002\000\004\066" +
    "\uffc8\001\002\000\004\067\250\001\002\000\004\067\206" +
    "\001\002\000\004\066\211\001\002\000\004\066\245\001" +
    "\002\000\004\066\uffc4\001\002\000\006\042\212\044\213" +
    "\001\002\000\004\067\234\001\002\000\004\067\214\001" +
    "\002\000\010\003\222\066\225\073\216\001\002\000\004" +
    "\066\uffbd\001\002\000\004\066\uffba\001\002\000\004\066" +
    "\231\001\002\000\004\066\uffbb\001\002\000\004\066\uffbf" +
    "\001\002\000\004\066\230\001\002\000\004\066\uffbe\001" +
    "\002\000\004\066\uffbc\001\002\000\016\022\131\024\116" +
    "\030\121\032\125\034\130\045\226\001\002\000\004\067" +
    "\227\001\002\000\004\066\uffc2\001\002\000\004\066\uffb9" +
    "\001\002\000\004\045\232\001\002\000\004\067\233\001" +
    "\002\000\004\066\uffc3\001\002\000\010\003\222\066\236" +
    "\073\216\001\002\000\004\066\241\001\002\000\016\022" +
    "\131\024\116\030\121\032\125\034\130\043\237\001\002" +
    "\000\004\067\240\001\002\000\004\066\uffc0\001\002\000" +
    "\004\043\242\001\002\000\004\067\243\001\002\000\004" +
    "\066\uffc1\001\002\000\004\066\uffc5\001\002\000\010\041" +
    "\246\042\212\044\213\001\002\000\004\067\247\001\002" +
    "\000\004\066\uffc6\001\002\000\006\003\uffca\066\uffca\001" +
    "\002\000\004\066\252\001\002\000\006\037\253\040\205" +
    "\001\002\000\004\067\254\001\002\000\006\003\uffc9\066" +
    "\uffc9\001\002\000\006\003\110\066\271\001\002\000\030" +
    "\003\040\052\042\056\022\057\027\060\030\061\026\062" +
    "\032\063\035\064\034\065\036\067\257\001\002\000\006" +
    "\003\110\066\261\001\002\000\006\003\110\066\265\001" +
    "\002\000\032\020\126\021\262\022\131\024\116\026\122" +
    "\030\121\032\125\034\130\036\127\046\117\053\124\055" +
    "\123\001\002\000\004\067\263\001\002\000\006\003\uffdc" +
    "\066\uffdc\001\002\000\006\003\uffec\066\uffec\001\002\000" +
    "\032\020\126\021\266\022\131\024\116\026\122\030\121" +
    "\032\125\034\130\036\127\046\117\053\124\055\123\001" +
    "\002\000\004\067\267\001\002\000\006\003\uffde\066\uffde" +
    "\001\002\000\006\003\110\066\274\001\002\000\032\020" +
    "\126\021\272\022\131\024\116\026\122\030\121\032\125" +
    "\034\130\036\127\046\117\053\124\055\123\001\002\000" +
    "\004\067\273\001\002\000\006\003\uffdb\066\uffdb\001\002" +
    "\000\032\020\126\021\275\022\131\024\116\026\122\030" +
    "\121\032\125\034\130\036\127\046\117\053\124\055\123" +
    "\001\002\000\004\067\276\001\002\000\006\003\uffdd\066" +
    "\uffdd\001\002\000\006\066\311\073\312\001\002\000\030" +
    "\003\040\052\042\056\022\057\027\060\030\061\026\062" +
    "\032\063\035\064\034\065\036\067\301\001\002\000\006" +
    "\066\302\073\303\001\002\000\004\033\307\001\002\000" +
    "\004\066\304\001\002\000\004\033\305\001\002\000\004" +
    "\067\306\001\002\000\006\003\uffb4\066\uffb4\001\002\000" +
    "\004\067\310\001\002\000\006\003\uffb2\066\uffb2\001\002" +
    "\000\004\033\316\001\002\000\004\066\313\001\002\000" +
    "\004\033\314\001\002\000\004\067\315\001\002\000\006" +
    "\003\uffb3\066\uffb3\001\002\000\004\067\317\001\002\000" +
    "\006\003\uffb1\066\uffb1\001\002\000\006\066\332\073\333" +
    "\001\002\000\030\003\040\052\042\056\022\057\027\060" +
    "\030\061\026\062\032\063\035\064\034\065\036\067\322" +
    "\001\002\000\006\066\323\073\324\001\002\000\004\054" +
    "\330\001\002\000\004\066\325\001\002\000\004\054\326" +
    "\001\002\000\004\067\327\001\002\000\006\003\uffa6\066" +
    "\uffa6\001\002\000\004\067\331\001\002\000\006\003\uffa4" +
    "\066\uffa4\001\002\000\004\054\337\001\002\000\004\066" +
    "\334\001\002\000\004\054\335\001\002\000\004\067\336" +
    "\001\002\000\006\003\uffa5\066\uffa5\001\002\000\004\067" +
    "\340\001\002\000\006\003\uffa3\066\uffa3\001\002\000\006" +
    "\003\uffa1\066\uffa1\001\002\000\030\003\040\052\042\056" +
    "\022\057\027\060\030\061\026\062\032\063\035\064\034" +
    "\065\036\067\343\001\002\000\006\003\uffa2\066\uffa2\001" +
    "\002\000\006\066\356\073\357\001\002\000\030\003\040" +
    "\052\042\056\022\057\027\060\030\061\026\062\032\063" +
    "\035\064\034\065\036\067\346\001\002\000\006\066\347" +
    "\073\350\001\002\000\004\027\354\001\002\000\004\066" +
    "\351\001\002\000\004\027\352\001\002\000\004\067\353" +
    "\001\002\000\006\003\uffce\066\uffce\001\002\000\004\067" +
    "\355\001\002\000\006\003\uffcb\066\uffcb\001\002\000\004" +
    "\027\363\001\002\000\004\066\360\001\002\000\004\027" +
    "\361\001\002\000\004\067\362\001\002\000\006\003\uffcd" +
    "\066\uffcd\001\002\000\004\067\364\001\002\000\006\003" +
    "\uffcc\066\uffcc\001\002\000\006\066\377\073\u0100\001\002" +
    "\000\030\003\040\052\042\056\022\057\027\060\030\061" +
    "\026\062\032\063\035\064\034\065\036\067\367\001\002" +
    "\000\006\066\370\073\371\001\002\000\004\031\375\001" +
    "\002\000\004\066\372\001\002\000\004\031\373\001\002" +
    "\000\004\067\374\001\002\000\006\003\uffda\066\uffda\001" +
    "\002\000\004\067\376\001\002\000\006\003\uffd8\066\uffd8" +
    "\001\002\000\004\031\u0104\001\002\000\004\066\u0101\001" +
    "\002\000\004\031\u0102\001\002\000\004\067\u0103\001\002" +
    "\000\006\003\uffd9\066\uffd9\001\002\000\004\067\u0105\001" +
    "\002\000\006\003\uffd7\066\uffd7\001\002\000\004\066\uffef" +
    "\001\002\000\004\066\u0125\001\002\000\030\003\040\052" +
    "\042\056\022\057\027\060\030\061\026\062\032\063\035" +
    "\064\034\065\036\067\u0109\001\002\000\004\066\u010b\001" +
    "\002\000\004\066\uffab\001\002\000\006\047\u0123\050\u010f" +
    "\001\002\000\004\066\u010e\001\002\000\004\066\uffac\001" +
    "\002\000\006\047\u0110\050\u010f\001\002\000\030\003\040" +
    "\052\042\056\022\057\027\060\030\061\026\062\032\063" +
    "\035\064\034\065\036\067\u0112\001\002\000\004\067\u0111" +
    "\001\002\000\006\003\uffb0\066\uffb0\001\002\000\006\066" +
    "\u011c\073\u011d\001\002\000\030\003\040\052\042\056\022" +
    "\057\027\060\030\061\026\062\032\063\035\064\034\065" +
    "\036\067\u0114\001\002\000\006\066\u0115\073\u0116\001\002" +
    "\000\004\051\u011a\001\002\000\004\066\u0117\001\002\000" +
    "\004\051\u0118\001\002\000\004\067\u0119\001\002\000\004" +
    "\066\uffaa\001\002\000\004\067\u011b\001\002\000\004\066" +
    "\uffa9\001\002\000\004\051\u0121\001\002\000\004\066\u011e" +
    "\001\002\000\004\051\u011f\001\002\000\004\067\u0120\001" +
    "\002\000\004\066\uffa8\001\002\000\004\067\u0122\001\002" +
    "\000\004\066\uffa7\001\002\000\004\067\u0124\001\002\000" +
    "\006\003\uffae\066\uffae\001\002\000\006\047\u012a\050\u010f" +
    "\001\002\000\004\066\u0127\001\002\000\006\047\u0128\050" +
    "\u010f\001\002\000\004\067\u0129\001\002\000\006\003\uffaf" +
    "\066\uffaf\001\002\000\004\067\u012b\001\002\000\006\003" +
    "\uffad\066\uffad\001\002\000\006\066\u0136\073\u0137\001\002" +
    "\000\030\003\040\052\042\056\022\057\027\060\030\061" +
    "\026\062\032\063\035\064\034\065\036\067\u012e\001\002" +
    "\000\006\066\u012f\073\u0130\001\002\000\004\025\u0134\001" +
    "\002\000\004\066\u0131\001\002\000\004\025\u0132\001\002" +
    "\000\004\067\u0133\001\002\000\006\003\uffd2\066\uffd2\001" +
    "\002\000\004\067\u0135\001\002\000\006\003\uffcf\066\uffcf" +
    "\001\002\000\004\025\u013b\001\002\000\004\066\u0138\001" +
    "\002\000\004\025\u0139\001\002\000\004\067\u013a\001\002" +
    "\000\006\003\uffd1\066\uffd1\001\002\000\004\067\u013c\001" +
    "\002\000\006\003\uffd0\066\uffd0\001\002\000\006\003\uffdf" +
    "\066\uffdf\001\002\000\032\017\u013f\020\126\022\131\024" +
    "\116\026\122\030\121\032\125\034\130\036\127\046\117" +
    "\053\124\055\123\001\002\000\004\067\u0140\001\002\000" +
    "\004\066\ufff0\001\002\000\004\072\u0142\001\002\000\004" +
    "\070\u0143\001\002\000\030\003\uff9f\052\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f" +
    "\067\uff9f\001\002\000\006\003\110\066\u0148\001\002\000" +
    "\032\017\u0146\020\126\022\131\024\116\026\122\030\121" +
    "\032\125\034\130\036\127\046\117\053\124\055\123\001" +
    "\002\000\004\067\u0147\001\002\000\004\066\uffed\001\002" +
    "\000\032\017\u0149\020\126\022\131\024\116\026\122\030" +
    "\121\032\125\034\130\036\127\046\117\053\124\055\123" +
    "\001\002\000\004\067\u014a\001\002\000\004\066\uffee\001" +
    "\002\000\004\005\u014c\001\002\000\004\067\u014d\001\002" +
    "\000\004\002\000\001\002\000\004\067\u0151\001\002\000" +
    "\004\067\u0150\001\002\000\004\002\uffff\001\002\000\006" +
    "\003\u0154\066\u0157\001\002\000\006\003\u0154\066\u017c\001" +
    "\002\000\006\003\ufffa\066\ufffa\001\002\000\004\066\u017a" +
    "\001\002\000\006\003\ufffb\066\ufffb\001\002\000\006\003" +
    "\ufff9\066\ufff9\001\002\000\012\007\u0159\010\u015b\012\u015c" +
    "\014\u015a\001\002\000\006\003\ufff8\066\ufff8\001\002\000" +
    "\004\067\u0179\001\002\000\004\067\u0171\001\002\000\030" +
    "\003\040\052\042\056\022\057\027\060\030\061\026\062" +
    "\032\063\035\064\034\065\036\067\u0167\001\002\000\030" +
    "\003\040\052\042\056\022\057\027\060\030\061\026\062" +
    "\032\063\035\064\034\065\036\067\u015d\001\002\000\004" +
    "\072\u0163\001\002\000\030\003\040\052\042\056\022\057" +
    "\027\060\030\061\026\062\032\063\035\064\034\065\036" +
    "\067\u015f\001\002\000\004\066\u0160\001\002\000\004\013" +
    "\u0161\001\002\000\004\067\u0162\001\002\000\006\003\ufff4" +
    "\066\ufff4\001\002\000\004\066\u0164\001\002\000\004\013" +
    "\u0165\001\002\000\004\067\u0166\001\002\000\006\003\ufff3" +
    "\066\ufff3\001\002\000\004\072\u016d\001\002\000\030\003" +
    "\040\052\042\056\022\057\027\060\030\061\026\062\032" +
    "\063\035\064\034\065\036\067\u0169\001\002\000\004\066" +
    "\u016a\001\002\000\004\011\u016b\001\002\000\004\067\u016c" +
    "\001\002\000\006\003\ufff2\066\ufff2\001\002\000\004\066" +
    "\u016e\001\002\000\004\011\u016f\001\002\000\004\067\u0170" +
    "\001\002\000\006\003\ufff1\066\ufff1\001\002\000\006\066" +
    "\u0172\073\u0173\001\002\000\004\015\u0177\001\002\000\004" +
    "\066\u0174\001\002\000\004\015\u0175\001\002\000\004\067" +
    "\u0176\001\002\000\006\003\ufff6\066\ufff6\001\002\000\004" +
    "\067\u0178\001\002\000\006\003\ufff5\066\ufff5\001\002\000" +
    "\004\066\ufffd\001\002\000\006\003\ufff7\066\ufff7\001\002" +
    "\000\006\003\ufffc\066\ufffc\001\002\000\012\007\u017d\010" +
    "\u015b\012\u015c\014\u015a\001\002\000\004\067\u017e\001\002" +
    "\000\004\066\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017c\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\002\001\001\000\004\011\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\014\020" +
    "\015\036\016\023\017\040\020\032\021\015\022\016\023" +
    "\022\024\030\025\042\046\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\012\u0143\013\106\026\076\027" +
    "\103\030\113\031\102\032\104\033\100\041\112\042\077" +
    "\043\101\047\111\050\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\020\015\036" +
    "\017\075\020\032\021\015\022\016\023\022\024\030\025" +
    "\042\046\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\105" +
    "\013\106\026\076\027\103\030\113\031\102\032\104\033" +
    "\100\041\112\042\077\043\101\047\111\050\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\013\263\026\076\027" +
    "\103\030\113\031\102\032\104\033\100\041\112\042\077" +
    "\043\101\047\111\050\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\020\015\036\016\u012c\017\040\020\032\021\015\022\016" +
    "\023\022\024\030\025\042\046\024\001\001\000\030\014" +
    "\020\015\036\016\u0107\017\040\020\032\021\015\022\016" +
    "\023\022\024\030\025\042\046\024\001\001\000\002\001" +
    "\001\000\030\014\020\015\036\016\365\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\344\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\341\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\320\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\277\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\255\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\174\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\153\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\030\014\020\015\036\016\132\017\040\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\002\001\001\000\026\014\020\015\036\017\075" +
    "\020\032\021\015\022\016\023\022\024\030\025\042\046" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\020\015\036\017\075\020\032\021" +
    "\015\022\016\023\022\024\030\025\042\046\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\250\035" +
    "\177\001\001\000\026\014\020\015\036\017\075\020\032" +
    "\021\015\022\016\023\022\024\030\025\042\046\024\001" +
    "\001\000\006\034\200\035\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\035\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\206\037\207\001\001\000\004\037\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\027\220\030\223\031\217\040" +
    "\216\041\222\042\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\027\220\030\223\031\217\040\234\041" +
    "\222\042\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\012\267\013\106\026" +
    "\076\027\103\030\113\031\102\032\104\033\100\041\112" +
    "\042\077\043\101\047\111\050\110\001\001\000\026\014" +
    "\020\015\036\017\075\020\032\021\015\022\016\023\022" +
    "\024\030\025\042\046\024\001\001\000\034\012\257\013" +
    "\106\026\076\027\103\030\113\031\102\032\104\033\100" +
    "\041\112\042\077\043\101\047\111\050\110\001\001\000" +
    "\032\013\263\026\076\027\103\030\113\031\102\032\104" +
    "\033\100\041\112\042\077\043\101\047\111\050\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\013\263\026\076\027\103\030\113" +
    "\031\102\032\104\033\100\041\112\042\077\043\101\047" +
    "\111\050\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\020\015\036" +
    "\017\075\020\032\021\015\022\016\023\022\024\030\025" +
    "\042\046\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\020\015\036\017\075\020" +
    "\032\021\015\022\016\023\022\024\030\025\042\046\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\014\020\015\036\017\075\020\032\021\015" +
    "\022\016\023\022\024\030\025\042\046\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\020\015\036" +
    "\017\075\020\032\021\015\022\016\023\022\024\030\025" +
    "\042\046\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\020\015\036\017\075\020" +
    "\032\021\015\022\016\023\022\024\030\025\042\046\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\u0125\045\u0109\001\001\000\026\014\020" +
    "\015\036\017\075\020\032\021\015\022\016\023\022\024" +
    "\030\025\042\046\024\001\001\000\006\044\u010b\045\u0109" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u010c\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\014\020\015\036\016\u0112\017\040\020\032\021\015\022" +
    "\016\023\022\024\030\025\042\046\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\014" +
    "\020\015\036\017\075\020\032\021\015\022\016\023\022" +
    "\024\030\025\042\046\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\014\020\015\036\017" +
    "\075\020\032\021\015\022\016\023\022\024\030\025\042" +
    "\046\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\013\263\026\076\027\103\030\113\031\102" +
    "\032\104\033\100\041\112\042\077\043\101\047\111\050" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\u0151\005\u0154\006\u0152\007\u0155\010\u0157\001\001" +
    "\000\012\005\u017a\006\u0152\007\u0155\010\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\014\020\015\036\016\u0167" +
    "\017\040\020\032\021\015\022\016\023\022\024\030\025" +
    "\042\046\024\001\001\000\030\014\020\015\036\016\u015d" +
    "\017\040\020\032\021\015\022\016\023\022\024\030\025" +
    "\042\046\024\001\001\000\002\001\001\000\026\014\020" +
    "\015\036\017\075\020\032\021\015\022\016\023\022\024" +
    "\030\025\042\046\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\020\015\036\017\075\020" +
    "\032\021\015\022\016\023\022\024\030\025\042\046\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserCHTML$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserCHTML$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserCHTML$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String archivo="null";
    public static ArrayList<NodoError> sitactico= new ArrayList<NodoError>();
    public void agregarerror(int linea,int columna,String tipo,String men)
    {
       NodoError er= new NodoError(linea, columna, tipo, men,archivo);
       sitactico.add(er);
    }
    public static String errorSin="";
    public void syntax_error(Symbol s){
         agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());
         
         
    }
    public  ArrayList<NodoError> Sin()
    {
        return sitactico;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         //agregarerror(s.left+1,s.right,"sintacitico",s.value.toString());   
         
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserCHTML$actions {


    // acciones que podemos hacer en le codigo
    NodoArbol raiz;
    NodoArbol padre,izq,der,nodo;
    private NodoArbol CrearHoja(String produccion,String valor)
    {
        NodoArbol nodo= new NodoArbol(produccion,valor,0,0);
        return nodo;
    }
    private NodoArbol AddHijo(NodoArbol raiz,NodoArbol hijo){
            raiz.add(hijo);
            return raiz;
     }
    private NodoArbol cambiarHijo(NodoArbol padre,NodoArbol hijos)
    {
        padre.hijos=hijos.hijos;
        return padre;

    }
    private String QuitarComillas(String cadena)
    {
        cadena=cadena.replace('\"', ' ');
        return cadena.trim();
    }


  private final parserCHTML parser;

  /** Constructor */
  CUP$parserCHTML$actions(parserCHTML parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserCHTML$do_action(
    int                        CUP$parserCHTML$act_num,
    java_cup.runtime.lr_parser CUP$parserCHTML$parser,
    java.util.Stack            CUP$parserCHTML$stack,
    int                        CUP$parserCHTML$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserCHTML$result;

      /* select the action based on the action number */
      switch (CUP$parserCHTML$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // valor ::= VALOR IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja(ConstantesCHTML.valor,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("valor",36, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // fondo ::= FONDO IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.fondo,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("fondo",19, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // alineado ::= ALINEADO IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.alineado,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alineado",18, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ancho ::= ANCHO IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.ancho,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ancho",16, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // alto ::= ALTO IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.alto,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("alto",17, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // grupo ::= GRUPO IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.grupo,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("grupo",15, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // id ::= ID IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.id,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("id",14, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opciones ::= error PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCHTML.error,"");
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // opciones ::= valor 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // opciones ::= fondo 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // opciones ::= ruta 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // opciones ::= click 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // opciones ::= alineado 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // opciones ::= alto 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opciones ::= ancho 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opciones ::= grupo 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opciones ::= id 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opciones",13, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lopciones ::= opciones 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
                padre=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,op);
                RESULT = padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lopciones ::= lopciones opciones 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
                lop =AddHijo(lop,op);
                RESULT = lop;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopciones",12, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // click ::= CLICK IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.click,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("click",11, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ruta ::= RUTA IGUAL ECADENA PUNTOCOMA 
            {
              NodoArbol RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT=CrearHoja( ConstantesCHTML.ruta,QuitarComillas(cade));
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ruta",10, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // saltofin ::= ABRIR SALTOFIN CERRAR 
            {
              NodoArbol RESULT =null;
		
            padre=CrearHoja(ConstantesCHTML.saltofin,"");
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",38, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-2)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // saltofin ::= ABRIR SALTOFIN lopciones CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		
                padre=CrearHoja(ConstantesCHTML.saltofin,"");
                padre=AddHijo(padre,lop);
                RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("saltofin",38, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // spinner ::= ABRIR SPINNER CERRAR ABRIR FINSPINNER CERRAR 
            {
              NodoArbol RESULT =null;
		
            padre=CrearHoja(ConstantesCHTML.spinner,"0");
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // spinner ::= ABRIR SPINNER lopciones CERRAR ABRIR FINSPINNER CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
            padre=CrearHoja(ConstantesCHTML.spinner,"0");
            padre=AddHijo(padre,lop);
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // spinner ::= ABRIR SPINNER CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.spinner,text);
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // spinner ::= ABRIR SPINNER lopciones CERRAR ETEXTO ABRIR FINSPINNER CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.spinner,text);
            padre=AddHijo(padre,lop);
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("spinner",37, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // opcion ::= ABRIR OPCION CERRAR ABRIR FINOPCION CERRAR 
            {
              NodoArbol RESULT =null;
		
            padre=CrearHoja(ConstantesCHTML.opcion,"");
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // opcion ::= ABRIR OPCION CERRAR ETEXTO ABRIR FINOPCION CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.opcion,text);
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // opcion ::= ABRIR OPCION lopciones CERRAR ABRIR FINOPCION CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
            padre=CrearHoja(ConstantesCHTML.opcion,"");
            padre=AddHijo(padre,lop);
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // opcion ::= ABRIR OPCION lopciones CERRAR ETEXTO ABRIR FINOPCION CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.opcion,text);
            padre=AddHijo(padre,lop);
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("opcion",35, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lopcion ::= opcion 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
            padre=CrearHoja(ConstantesCHTML.lopcion,"");
            padre=AddHijo(padre,op);
            RESULT=op;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lopcion ::= lopcion opcion 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
            lop=AddHijo(lop,op);
            RESULT=lop;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lopcion",34, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // caja ::= ABRIR CAJA CERRAR ABRIR FINCAJA CERRAR 
            {
              NodoArbol RESULT =null;
		
        padre=CrearHoja(ConstantesCHTML.caja,"");
        padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
        padre=AddHijo(padre,CrearHoja(ConstantesCHTML.lopcion,""));
        RESULT=padre;
     
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // caja ::= ABRIR CAJA lopciones CERRAR ABRIR FINCAJA CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
        padre=CrearHoja(ConstantesCHTML.caja,"");
        padre=AddHijo(padre,op);
        padre=AddHijo(padre,CrearHoja(ConstantesCHTML.lopcion,""));
        RESULT=padre;
    
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // caja ::= ABRIR CAJA CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
        padre=CrearHoja(ConstantesCHTML.caja,"");
        padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
        padre=AddHijo(padre,lop);
        RESULT=padre;
     
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // caja ::= ABRIR CAJA lopciones CERRAR lopcion ABRIR FINCAJA CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
        padre=CrearHoja(ConstantesCHTML.caja,"");
        padre=AddHijo(padre,op);
        padre=AddHijo(padre,lop);
        RESULT=padre;

     
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("caja",33, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cajatexto ::= ABRIR CAJATEXTO CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		
            padre=CrearHoja(ConstantesCHTML.cajatexto,"");
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
       
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ABRIR FINCAJATEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
            padre=CrearHoja(ConstantesCHTML.cajatexto,"");
            padre=AddHijo(padre,lop);
            RESULT=padre;
      
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cajatexto ::= ABRIR CAJATEXTO CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.cajatexto,text);
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cajatexto ::= ABRIR CAJATEXTO lopciones CERRAR ETEXTO ABRIR FINCAJATEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.cajatexto,text);
            padre=AddHijo(padre,lop);
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cajatexto",32, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // textoa ::= ABRIR TEXTOA CERRAR ABRIR FINTEXTOA CERRAR 
            {
              NodoArbol RESULT =null;
		
            padre=CrearHoja(ConstantesCHTML.textoa,"");
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // textoa ::= ABRIR TEXTOA lopciones CERRAR ABRIR FINTEXTOA CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
            padre=CrearHoja(ConstantesCHTML.textoa,"");
            padre=AddHijo(padre,lop);
            RESULT=padre;
       
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // textoa ::= ABRIR TEXTOA CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.textoa,text);
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // textoa ::= ABRIR TEXTOA lopciones CERRAR ETEXTO ABRIR FINTEXTOA CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            padre=CrearHoja(ConstantesCHTML.textoa,text);
            padre=AddHijo(padre,lop);
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("textoa",31, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpotabla ::= error ABRIR 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCHTML.error,"");
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cuerpotabla ::= ETEXTO 
            {
              NodoArbol RESULT =null;

              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cuerpotabla ::= boton 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cuerpotabla ::= imagen 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cuerpotabla ::= cajatexto 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cuerpotabla ::= textoa 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cuerpotabla ::= texto 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpotabla",30, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ct ::= ABRIR CB CERRAR ABRIR FINCB CERRAR 
            {
              NodoArbol RESULT =null;
		
        padre=CrearHoja(ConstantesCHTML.cb,"");
        padre=AddHijo(padre,CrearHoja(ConstantesCHTML.cuerpotabla,""));
        RESULT=padre;
   
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ct ::= ABRIR CB CERRAR cuerpotabla ABRIR FINCB CERRAR 
            {
              NodoArbol RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol lc = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
        padre=CrearHoja(ConstantesCHTML.cb,"");
        padre=AddHijo(padre,lc);
        RESULT=padre;
    
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ct ::= ABRIR CT CERRAR ABRIR FINCT CERRAR 
            {
              NodoArbol RESULT =null;
		
        padre=CrearHoja(ConstantesCHTML.ct,"");
        padre=AddHijo(padre,CrearHoja(ConstantesCHTML.cuerpotabla,""));
        RESULT=padre;
    
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ct ::= ABRIR CT CERRAR cuerpotabla ABRIR FINCT CERRAR 
            {
              NodoArbol RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol lc = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
        padre=CrearHoja(ConstantesCHTML.ct,"");
        padre=AddHijo(padre,lc);
        RESULT=padre;
    
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ct",29, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // lct ::= ct 
            {
              NodoArbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
        padre=CrearHoja(ConstantesCHTML.celda,"");
        padre=AddHijo(padre,c);
        RESULT=padre;

    
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lct ::= lct ct 
            {
              NodoArbol RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol lc = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
        lc=AddHijo(lc,c);
        RESULT=lc;
    
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lct",28, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // celda ::= ABRIR FILT CERRAR lct ABRIR FINFILT CERRAR 
            {
              NodoArbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		RESULT=c;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celda",27, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // celdas ::= celda 
            {
              NodoArbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
            padre=CrearHoja(ConstantesCHTML.celdas,"");
            padre=AddHijo(padre,c);
            RESULT=padre;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",26, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // celdas ::= celdas celda 
            {
              NodoArbol RESULT =null;
		int celeft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol ce = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
            ce=AddHijo(ce,c);
            RESULT=ce;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("celdas",26, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tabla ::= ABRIR TABLA CERRAR celdas ABRIR FINTABLA CERRAR 
            {
              NodoArbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.tabla,"");
                padre=AddHijo(padre,CrearHoja(ConstantesCHTML.opciones,""));
                padre=AddHijo(padre,c);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",25, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tabla ::= ABRIR TABLA lopciones CERRAR celdas ABRIR FINTABLA CERRAR 
            {
              NodoArbol RESULT =null;
		int lopleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int lopright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol lop = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol c = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.tabla,"");
                padre=AddHijo(padre,lop);
                padre=AddHijo(padre,c);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("tabla",25, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // enlace ::= ABRIR ENLACE lopciones CERRAR ABRIR FINENLACE CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                padre=CrearHoja(ConstantesCHTML.enlace,"");
                padre=AddHijo(padre,op);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // enlace ::= ABRIR ENLACE CERRAR ABRIR FINENLACE CERRAR 
            {
              NodoArbol RESULT =null;
		
                padre=CrearHoja(ConstantesCHTML.enlace,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // enlace ::= ABRIR ENLACE CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.enlace,text);
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enlace ::= ABRIR ENLACE lopciones CERRAR ETEXTO ABRIR FINENLACE CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.enlace,text);
                padre=AddHijo(padre,op);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("enlace",24, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // boton ::= ABRIR BOTON lopciones CERRAR ABRIR FINBOTON CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                padre=CrearHoja(ConstantesCHTML.boton,"");
                padre=AddHijo(padre,op);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // boton ::= ABRIR BOTON CERRAR ABRIR FINBOTON CERRAR 
            {
              NodoArbol RESULT =null;
		
                padre=CrearHoja(ConstantesCHTML.boton,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boton ::= ABRIR BOTON CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.boton,text);
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boton ::= ABRIR BOTON lopciones CERRAR ETEXTO ABRIR FINBOTON CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.boton,text);
                padre=AddHijo(padre,op);
                RESULT=padre;

            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("boton",23, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // imagen ::= ABRIR IMAGEN lopciones CERRAR ABRIR FINIMAGEN CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                padre=CrearHoja(ConstantesCHTML.imagen,"");
                padre=AddHijo(padre,op);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // imagen ::= ABRIR IMAGEN CERRAR ABRIR FINIMAGEN CERRAR 
            {
              NodoArbol RESULT =null;
		
                padre=CrearHoja(ConstantesCHTML.imagen,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // imagen ::= ABRIR IMAGEN lopciones CERRAR ETEXTO ABRIR FINIMAGEN CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.imagen,text);
                padre=AddHijo(padre,op);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // imagen ::= ABRIR IMAGEN CERRAR ETEXTO ABRIR FINIMAGEN CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.imagen,text);
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("imagen",22, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // texto ::= ABRIR TEXTO CERRAR ABRIR FINTEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		
                padre=CrearHoja(ConstantesCHTML.texto,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;

            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // texto ::= ABRIR TEXTO lopciones CERRAR ABRIR FINTEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                padre=CrearHoja(ConstantesCHTML.texto,"");
                padre=AddHijo(padre,op);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // texto ::= ABRIR TEXTO CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.texto,text);
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // texto ::= ABRIR TEXTO lopciones CERRAR ETEXTO ABRIR FINTEXTO CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.texto,text);
                padre=AddHijo(padre,op);
                RESULT=padre;

            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("texto",21, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // panel ::= ABRIR PANEL CERRAR ABRIR FINPANEL CERRAR 
            {
              NodoArbol RESULT =null;
		
                padre=CrearHoja(ConstantesCHTML.panel,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                izq=CrearHoja(ConstantesCHTML.cuerpo,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // panel ::= ABRIR PANEL lopciones CERRAR ABRIR FINPANEL CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                padre=CrearHoja(ConstantesCHTML.panel,"");
                padre=AddHijo(padre,op);
                izq=CrearHoja(ConstantesCHTML.cuerpo,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // panel ::= ABRIR PANEL CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              NodoArbol RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol cuerpo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.panel,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                padre=AddHijo(padre,cuerpo);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // panel ::= ABRIR PANEL lopciones CERRAR lcompcuerpo ABRIR FINPANEL CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol cuerpo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.panel,"");
                padre=AddHijo(padre,op);
                padre=AddHijo(padre,cuerpo);
                RESULT=padre;

            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("panel",20, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // compcuerpo ::= error ABRIR 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCHTML.error,"");
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // compcuerpo ::= saltofin 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // compcuerpo ::= spinner 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // compcuerpo ::= caja 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // compcuerpo ::= cajatexto 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // compcuerpo ::= textoa 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compcuerpo ::= tabla 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compcuerpo ::= enlace 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compcuerpo ::= boton 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compcuerpo ::= imagen 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compcuerpo ::= texto 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compcuerpo ::= panel 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compcuerpo",9, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lcompcuerpo ::= compcuerpo 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
                padre=CrearHoja(ConstantesCHTML.compcuerpo,"");
                padre=AddHijo(padre,nodo);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lcompcuerpo ::= lcompcuerpo compcuerpo 
            {
              NodoArbol RESULT =null;
		int coleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int coright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol co = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
                co=AddHijo(co,nodo);
                RESULT=co;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompcuerpo",8, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo ::= ABRIR CUERPO CERRAR ABRIR FINCUERPO CERRAR 
            {
              NodoArbol RESULT =null;
		
                padre=CrearHoja(ConstantesCHTML.cuerpo,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                izq=CrearHoja(ConstantesCHTML.compcuerpo,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;

            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= ABRIR CUERPO CERRAR lcompcuerpo ABRIR FINCUERPO CERRAR 
            {
              NodoArbol RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol cuerpo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.cuerpo,"");
                izq=CrearHoja(ConstantesCHTML.opciones,"");
                padre=AddHijo(padre,izq);
                padre=AddHijo(padre,cuerpo);
                RESULT=padre;

            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= ABRIR CUERPO lopciones CERRAR ABRIR FINCUERPO CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                padre=CrearHoja(ConstantesCHTML.cuerpo,"");
                padre=AddHijo(padre,op);
                izq=CrearHoja(ConstantesCHTML.compcuerpo,"");
                padre=AddHijo(padre,izq);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo ::= ABRIR CUERPO lopciones CERRAR lcompcuerpo ABRIR FINCUERPO CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol cuerpo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                padre=CrearHoja(ConstantesCHTML.cuerpo,"");
                padre=AddHijo(padre,op);
                padre=AddHijo(padre,cuerpo);
                RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cuerpo",7, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cjs ::= ABRIR CJS CERRAR ECADENA ABRIR FINCJS CERRAR 
            {
              NodoArbol RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                RESULT=CrearHoja(ConstantesCHTML.cjs,QuitarComillas(cad));
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cjs ::= ABRIR CJS lopciones CERRAR ABRIR FINCJS CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                   padre=CrearHoja(ConstantesCHTML.cjs,"");
                   padre=AddHijo(padre,op);
                   RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("cjs",6, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ccss ::= ABRIR CCSS CERRAR ECADENA ABRIR FINCCSS CERRAR 
            {
              NodoArbol RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                    RESULT=CrearHoja(ConstantesCHTML.ccss,QuitarComillas(cad));
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ccss ::= ABRIR CCSS lopciones CERRAR ABRIR FINCCSS CERRAR 
            {
              NodoArbol RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol op = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		
                   padre=CrearHoja(ConstantesCHTML.ccss,"");
                   padre=AddHijo(padre,op);
                   RESULT=padre;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("ccss",5, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // titulo ::= ABRIR TITULO CERRAR ABRIR FINTITULO CERRAR 
            {
              NodoArbol RESULT =null;
		
                 RESULT=CrearHoja(ConstantesCHTML.titulo,"");
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("titulo",4, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // titulo ::= ABRIR TITULO CERRAR ETEXTO ABRIR FINTITULO CERRAR 
            {
              NodoArbol RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
               RESULT=CrearHoja(ConstantesCHTML.titulo,text);
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("titulo",4, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compencabezado ::= error ABRIR 
            {
              NodoArbol RESULT =null;
		RESULT=CrearHoja(ConstantesCHTML.error,"");
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compencabezado ::= cjs 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // compencabezado ::= ccss 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // compencabezado ::= titulo 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		RESULT=nodo;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("compencabezado",3, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lcompencabezado ::= compencabezado 
            {
              NodoArbol RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
                    padre=CrearHoja(ConstantesCHTML.encabezado,"");
                    padre=AddHijo(padre,nodo);
                    RESULT=padre;
                
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lcompencabezado ::= lcompencabezado compencabezado 
            {
              NodoArbol RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol lc = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()).right;
		NodoArbol nodo = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.peek()).value;
		
                    lc=AddHijo(lc,nodo);
                    RESULT=lc;
                
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("lcompencabezado",2, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= ABRIR ENCABEZADO CERRAR ABRIR FINENCABEZADO CERRAR 
            {
              NodoArbol RESULT =null;
		
               RESULT=CrearHoja(ConstantesCHTML.encabezado,"");
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= ABRIR ENCABEZADO CERRAR lcompencabezado ABRIR FINENCABEZADO CERRAR 
            {
              NodoArbol RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol en = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
                RESULT=en;
            
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("encabezado",1, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-6)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= ABRIR CHTML CERRAR ABRIR FINCHTML CERRAR 
            {
              NodoArbol RESULT =null;
		
            System.out.println("Gramatica corecta");
            padre=CrearHoja(ConstantesCHTML.inicio,"");
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.encabezado,""));
            padre=AddHijo(padre,CrearHoja(ConstantesCHTML.cuerpo,""));
            raiz=padre;
            RESULT=raiz;
        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-5)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= ABRIR CHTML CERRAR encabezado cuerpo ABRIR FINCHTML CERRAR 
            {
              NodoArbol RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).right;
		NodoArbol en = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-4)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).right;
		NodoArbol cu = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-3)).value;
		
            System.out.println("Gramatica corecta");
            padre=CrearHoja(ConstantesCHTML.inicio,"");
            padre=AddHijo(padre,en);
            padre=AddHijo(padre,cu);
            raiz=padre;
            RESULT=raiz;

        
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-7)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          return CUP$parserCHTML$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).right;
		NodoArbol start_val = (NodoArbol)((java_cup.runtime.Symbol) CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)).value;
		RESULT = start_val;
              CUP$parserCHTML$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.elementAt(CUP$parserCHTML$top-1)), ((java_cup.runtime.Symbol)CUP$parserCHTML$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserCHTML$parser.done_parsing();
          return CUP$parserCHTML$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

